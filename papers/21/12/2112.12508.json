{
    "title": "From Procedures, Objects, Actors, Components, Services, to Agents -- A Comparative Analysis of the History and Evolution of Programming Abstractions. (arXiv:2112.12508v4 [cs.SE] UPDATED)",
    "abstract": "The objective of this chapter is to propose some retrospective analysis of the evolution of programming abstractions, from {\\em procedures}, {\\em objects}, {\\em actors}, {\\em components}, {\\em services}, up to {\\em agents}, %have some compare concepts of software component and of agent (and multi-agent system), %The method chosen is to by replacing them within a general historical perspective. Some common referential with three axes/dimensions is chosen: {\\em action selection} at the level of one entity, {\\em coupling flexibility} between entities, and {\\em abstraction level}. We indeed may observe some continuous quest for higher flexibility (through notions such as {\\em late binding}, or {\\em reification} of {\\em connections}) and higher level of {\\em abstraction}. Concepts of components, services and agents have some common objectives (notably, {\\em software modularity and reconfigurability}), with multi-agent systems raising further concepts of {\\em autonomy} and {\\em coordination}",
    "link": "http://arxiv.org/abs/2112.12508",
    "context": "Title: From Procedures, Objects, Actors, Components, Services, to Agents -- A Comparative Analysis of the History and Evolution of Programming Abstractions. (arXiv:2112.12508v4 [cs.SE] UPDATED)\nAbstract: The objective of this chapter is to propose some retrospective analysis of the evolution of programming abstractions, from {\\em procedures}, {\\em objects}, {\\em actors}, {\\em components}, {\\em services}, up to {\\em agents}, %have some compare concepts of software component and of agent (and multi-agent system), %The method chosen is to by replacing them within a general historical perspective. Some common referential with three axes/dimensions is chosen: {\\em action selection} at the level of one entity, {\\em coupling flexibility} between entities, and {\\em abstraction level}. We indeed may observe some continuous quest for higher flexibility (through notions such as {\\em late binding}, or {\\em reification} of {\\em connections}) and higher level of {\\em abstraction}. Concepts of components, services and agents have some common objectives (notably, {\\em software modularity and reconfigurability}), with multi-agent systems raising further concepts of {\\em autonomy} and {\\em coordination}",
    "path": "papers/21/12/2112.12508.json",
    "total_tokens": 942,
    "translated_title": "从过程、对象、角色、组件、服务到Agent--编程抽象的历史和演变的比较分析",
    "translated_abstract": "本章的目标是提出对编程抽象的演变进行一些回顾性分析，从\"过程\"、\"对象\"、\"角色\"、\"组件\"、\"服务\"到\"Agent\"。采用的方法是将它们置于一个通用的历史观的视角中。选择了一些常见的参照物，包括一个实体层面的\"动作选择\"、实体之间的\"耦合灵活性\"和\"抽象级别\"。我们可以观察到对更高灵活性（通过\"延迟绑定\"或\"连接再实体化\"等概念）和更高级别的抽象的不断追求。组件、服务和Agent的概念具有一些共同的目标（尤其是\"软件模块化和可重构性\"），而多Agent系统进一步提出了\"自治\"和\"协同\"的概念。",
    "tldr": "本研究回顾性地分析了编程抽象的演变过程，从过程、对象、角色、组件、服务到Agent。研究发现，不断追求更高的灵活性和抽象级别是一个持续的趋势，而组件、服务和Agent的概念在实现软件模块化和重构性方面具有共同的目标。",
    "en_tdlr": "This study provides a retrospective analysis of the evolution of programming abstractions from procedures, objects, actors, components, services to agents. The research reveals a continuous quest for higher flexibility and abstraction level, with the concepts of components, services, and agents sharing common objectives of software modularity and reconfigurability."
}