{
    "title": "Learning to Combine Per-Example Solutions for Neural Program Synthesis. (arXiv:2106.07175v2 [cs.LG] CROSS LISTED)",
    "abstract": "The goal of program synthesis from examples is to find a computer program that is consistent with a given set of input-output examples. Most learning-based approaches try to find a program that satisfies all examples at once. Our work, by contrast, considers an approach that breaks the problem into two stages: (a) find programs that satisfy only one example, and (b) leverage these per-example solutions to yield a program that satisfies all examples. We introduce the Cross Aggregator neural network module based on a multi-head attention mechanism that learns to combine the cues present in these per-example solutions to synthesize a global solution. Evaluation across programs of different lengths and under two different experimental settings reveal that when given the same time budget, our technique significantly improves the success rate over PCCoder [Zohar et. al 2018] and other ablation baselines. The code, data and trained models for our work can be found at https://github.com/shriva",
    "link": "http://arxiv.org/abs/2106.07175",
    "context": "Title: Learning to Combine Per-Example Solutions for Neural Program Synthesis. (arXiv:2106.07175v2 [cs.LG] CROSS LISTED)\nAbstract: The goal of program synthesis from examples is to find a computer program that is consistent with a given set of input-output examples. Most learning-based approaches try to find a program that satisfies all examples at once. Our work, by contrast, considers an approach that breaks the problem into two stages: (a) find programs that satisfy only one example, and (b) leverage these per-example solutions to yield a program that satisfies all examples. We introduce the Cross Aggregator neural network module based on a multi-head attention mechanism that learns to combine the cues present in these per-example solutions to synthesize a global solution. Evaluation across programs of different lengths and under two different experimental settings reveal that when given the same time budget, our technique significantly improves the success rate over PCCoder [Zohar et. al 2018] and other ablation baselines. The code, data and trained models for our work can be found at https://github.com/shriva",
    "path": "papers/21/06/2106.07175.json",
    "total_tokens": 899,
    "translated_title": "学习将周例解决方案进行组合用于神经程序合成",
    "translated_abstract": "例子程序合成的目标是找到一个与给定的输入输出样例一致的计算机程序。大多数基于学习的方法尝试找到满足所有样例的程序。相比之下，我们的工作考虑将问题分为两个阶段的方法：(a)找到只满足一个样例的程序，(b)利用这些单例程序解决方案生成满足所有样例的程序。我们引入了基于多头注意机制的Cross Aggregator神经网络模块，学习如何组合这些单例方案中存在的提示来合成一个全局解决方案。在不同长度的程序和两种不同实验设置下的评估表明，当在相同的时间预算下时，我们的技术显著提高了成功率，超过了PCCoder [Zohar等人，2018]和其他消融基线。我们的工作的代码、数据和训练模型可以在https://github.com/shriva找到。",
    "tldr": "该论文提出了一种把程序合成问题分为两个阶段的方法，提高了解决方案的成功率。作者使用了由多头注意机制构建的Cross Aggregator神经网络模块，学习如何组合每个样例程序解决方案，生成全局解决方案。",
    "en_tdlr": "The paper proposes a two-stage approach to program synthesis, significantly improving the success rate of solutions. The authors use the Cross Aggregator neural network module, based on a multi-head attention mechanism, to learn how to combine per-example solutions and synthesize a global solution."
}