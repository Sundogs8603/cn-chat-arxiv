{
    "title": "Learning logic programs by explaining their failures. (arXiv:2102.12551v2 [cs.AI] UPDATED)",
    "abstract": "Scientists form hypotheses and experimentally test them. If a hypothesis fails (is refuted), scientists try to explain the failure to eliminate other hypotheses. The more precise the failure analysis the more hypotheses can be eliminated. Thus inspired, we introduce failure explanation techniques for inductive logic programming. Given a hypothesis represented as a logic program, we test it on examples. If a hypothesis fails, we explain the failure in terms of failing sub-programs. In case a positive example fails, we identify failing sub-programs at the granularity of literals. We introduce a failure explanation algorithm based on analysing branches of SLD-trees. We integrate a meta-interpreter based implementation of this algorithm with the test-stage of the Popper ILP system. We show that fine-grained failure analysis allows for learning fine-grained constraints on the hypothesis space. Our experimental results show that explaining failures can drastically reduce hypothesis space exp",
    "link": "http://arxiv.org/abs/2102.12551",
    "context": "Title: Learning logic programs by explaining their failures. (arXiv:2102.12551v2 [cs.AI] UPDATED)\nAbstract: Scientists form hypotheses and experimentally test them. If a hypothesis fails (is refuted), scientists try to explain the failure to eliminate other hypotheses. The more precise the failure analysis the more hypotheses can be eliminated. Thus inspired, we introduce failure explanation techniques for inductive logic programming. Given a hypothesis represented as a logic program, we test it on examples. If a hypothesis fails, we explain the failure in terms of failing sub-programs. In case a positive example fails, we identify failing sub-programs at the granularity of literals. We introduce a failure explanation algorithm based on analysing branches of SLD-trees. We integrate a meta-interpreter based implementation of this algorithm with the test-stage of the Popper ILP system. We show that fine-grained failure analysis allows for learning fine-grained constraints on the hypothesis space. Our experimental results show that explaining failures can drastically reduce hypothesis space exp",
    "path": "papers/21/02/2102.12551.json",
    "total_tokens": 879,
    "translated_title": "通过解释逻辑程序的失败来学习",
    "translated_abstract": "科学家形成假说并进行实验测试。如果假设失败（被证明为假），科学家会尝试解释失败以排除其他假说。失败分析越精确，消除的假说越多。受此启发，我们引入归纳逻辑编程的失败解释技术。给定一个表示为逻辑程序的假设，我们在样本上对其进行测试。如果假设失败，我们用失败的子程序来解释失败。如果正例失败，我们在文字的粒度上识别失败的子程序。我们介绍了一种基于分析SLD树分支的失败解释算法。我们将基于元解释器的实现与Popper ILP系统的测试阶段集成。我们展示了细粒度的失败分析可以允许在假设空间上学习细粒度的限制。我们的实验结果表明，解释失败可以大大减少假设空间。",
    "tldr": "本文介绍了一种基于解释失败的技术来进行归纳逻辑编程的学习方法。通过在样例上测试逻辑程序，我们用失败的子程序精细地解释其失败，并基于分析SLD树分支的算法进行实现。实验表明失败解释可以大大减少假设空间。",
    "en_tdlr": "This paper introduces a technique for learning inductive logic programming based on explaining failures. By testing logic programs on examples and explaining the failure in terms of failing sub-programs, the algorithm uses an SLD-tree analysis to fine-tune the hypothesis space. Experimental results suggest that this failure analysis can significantly reduce the hypothesis space."
}