{
    "title": "Follow Your Nose -- Which Code Smells are Worth Chasing?. (arXiv:2103.01861v2 [cs.SE] UPDATED)",
    "abstract": "The common use case of code smells assumes causality: Identify a smell, remove it, and by doing so improve the code. We empirically investigate their fitness to this use. We present a list of properties that code smells should have if they indeed cause lower quality. We evaluated the smells in 31,687 Java files from 677 GitHub repositories, all the repositories with 200+ commits in 2019. We measured the influence of smells on four metrics for quality, productivity, and bug detection efficiency. Out of 151 code smells computed by the CheckStyle smell detector, less than 20% were found to be potentially causal, and only a handful are rather robust. The strongest smells deal with simplicity, defensive programming, and abstraction. Files without the potentially causal smells are 50% more likely to be of high quality. Unfortunately, most smells are not removed, and developers tend to remove the easy ones and not the effective ones.",
    "link": "http://arxiv.org/abs/2103.01861",
    "context": "Title: Follow Your Nose -- Which Code Smells are Worth Chasing?. (arXiv:2103.01861v2 [cs.SE] UPDATED)\nAbstract: The common use case of code smells assumes causality: Identify a smell, remove it, and by doing so improve the code. We empirically investigate their fitness to this use. We present a list of properties that code smells should have if they indeed cause lower quality. We evaluated the smells in 31,687 Java files from 677 GitHub repositories, all the repositories with 200+ commits in 2019. We measured the influence of smells on four metrics for quality, productivity, and bug detection efficiency. Out of 151 code smells computed by the CheckStyle smell detector, less than 20% were found to be potentially causal, and only a handful are rather robust. The strongest smells deal with simplicity, defensive programming, and abstraction. Files without the potentially causal smells are 50% more likely to be of high quality. Unfortunately, most smells are not removed, and developers tend to remove the easy ones and not the effective ones.",
    "path": "papers/21/03/2103.01861.json",
    "total_tokens": 993,
    "translated_title": "追踪代码异味 - 哪些代码异味值得追踪？",
    "translated_abstract": "代码异味的常见用例认为存在因果关系：识别异味，去除它，从而改善代码。我们对其适应性进行了实证研究。我们提出了一系列代码异味的特性，如果它们确实导致较低的代码质量，那么它们应该具备这些特性。我们对来自677个GitHub存储库中31,687个Java文件进行了评估，这些存储库在2019年有200个以上的提交。我们测量了这些异味对质量、生产力和错误检测效率的影响。通过CheckStyle异味检测器计算出的151个代码异味中，只有不到20%被发现可能引起质量下降，并且只有一小部分相对稳定。最强烈的异味与简单性、防御性编程和抽象有关。没有可能引起质量下降的异味的文件更有可能具有较高的质量，概率增加了50%。不幸的是，大多数异味没有被去除，开发人员倾向于去除容易的异味而不是有效的异味。",
    "tldr": "这项研究通过实证研究了代码异味对代码质量和开发生产力的影响，并发现仅有少数代码异味是真正具有因果关系的，其中与简单性、防御性编程和抽象相关的异味是最强烈的。开发人员倾向于去除容易的异味而不是真正有效的异味。",
    "en_tdlr": "This study empirically investigates the impact of code smells on code quality and development productivity, finding that only a few code smells truly have a causal relationship. The strongest smells are related to simplicity, defensive programming, and abstraction, and developers tend to remove easier smells rather than the most effective ones."
}