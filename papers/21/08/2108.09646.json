{
    "title": "A Systematic Review of Automated Query Reformulations in Source Code Search. (arXiv:2108.09646v2 [cs.SE] UPDATED)",
    "abstract": "Fixing software bugs and adding new features are two of the major maintenance tasks. Software bugs and features are reported as change requests. Developers consult these requests and often choose a few keywords from them as an ad hoc query. Then they execute the query with a search engine to find the exact locations within software code that need to be changed. Unfortunately, even experienced developers often fail to choose appropriate queries, which leads to costly trials and errors during a code search. Over the years, many studies attempt to reformulate the ad hoc queries from developers to support them. In this systematic literature review, we carefully select 70 primary studies on query reformulations from 2,970 candidate studies, perform an in-depth qualitative analysis (e.g., Grounded Theory), and then answer seven research questions with major findings. First, to date, eight major methodologies (e.g., term weighting, term co-occurrence analysis, thesaurus lookup) have been adop",
    "link": "http://arxiv.org/abs/2108.09646",
    "context": "Title: A Systematic Review of Automated Query Reformulations in Source Code Search. (arXiv:2108.09646v2 [cs.SE] UPDATED)\nAbstract: Fixing software bugs and adding new features are two of the major maintenance tasks. Software bugs and features are reported as change requests. Developers consult these requests and often choose a few keywords from them as an ad hoc query. Then they execute the query with a search engine to find the exact locations within software code that need to be changed. Unfortunately, even experienced developers often fail to choose appropriate queries, which leads to costly trials and errors during a code search. Over the years, many studies attempt to reformulate the ad hoc queries from developers to support them. In this systematic literature review, we carefully select 70 primary studies on query reformulations from 2,970 candidate studies, perform an in-depth qualitative analysis (e.g., Grounded Theory), and then answer seven research questions with major findings. First, to date, eight major methodologies (e.g., term weighting, term co-occurrence analysis, thesaurus lookup) have been adop",
    "path": "papers/21/08/2108.09646.json",
    "total_tokens": 902,
    "translated_title": "自动查询再制定在源代码搜索中的系统性研究",
    "translated_abstract": "修复软件漏洞和添加新功能是主要的维护任务之二。这些漏洞和功能以更改请求的形式报告。开发人员会从这些请求中选择一些关键词作为即席查询，然后使用搜索引擎执行查询，查找需要更改的软件代码的确切位置。然而，即使是经验丰富的开发人员通常也无法选择适当的查询，这导致在代码搜索期间进行昂贵的试错。多年来，许多研究尝试重新制定开发人员的即席查询以支持他们。本文系统地对70个主要查询再制定研究进行细致筛选（从2,970个候选研究中选择），进行深入的定性分析（如基础理论），并回答七个研究问题并提出主要发现。首先，迄今为止，已采用了八种主要方法（如词项加权，词项共现分析，词库查找）。",
    "tldr": "许多研究尝试重新制定即席查询以支持开发人员进行代码搜索，本文针对70个主要查询再制定研究进行了细致筛选和深入的定性分析，提出了八种主要方法。",
    "en_tdlr": "Many studies attempt to reformulate ad hoc queries to support developers in code search. This paper carefully selects 70 primary studies on query reformulations from 2,970 candidate studies, and performs an in-depth qualitative analysis, identifying eight major methodologies that have been adopted."
}