{
    "title": "Self-Supervised Learning to Prove Equivalence Between Straight-Line Programs via Rewrite Rules. (arXiv:2109.10476v4 [cs.LG] UPDATED)",
    "abstract": "We target the problem of automatically synthesizing proofs of semantic equivalence between two programs made of sequences of statements. We represent programs using abstract syntax trees (AST), where a given set of semantics-preserving rewrite rules can be applied on a specific AST pattern to generate a transformed and semantically equivalent program. In our system, two programs are equivalent if there exists a sequence of application of these rewrite rules that leads to rewriting one program into the other. We propose a neural network architecture based on a transformer model to generate proofs of equivalence between program pairs. The system outputs a sequence of rewrites, and the validity of the sequence is simply checked by verifying it can be applied. If no valid sequence is produced by the neural network, the system reports the programs as non-equivalent, ensuring by design no programs may be incorrectly reported as equivalent. Our system is fully implemented for one single gramm",
    "link": "http://arxiv.org/abs/2109.10476",
    "context": "Title: Self-Supervised Learning to Prove Equivalence Between Straight-Line Programs via Rewrite Rules. (arXiv:2109.10476v4 [cs.LG] UPDATED)\nAbstract: We target the problem of automatically synthesizing proofs of semantic equivalence between two programs made of sequences of statements. We represent programs using abstract syntax trees (AST), where a given set of semantics-preserving rewrite rules can be applied on a specific AST pattern to generate a transformed and semantically equivalent program. In our system, two programs are equivalent if there exists a sequence of application of these rewrite rules that leads to rewriting one program into the other. We propose a neural network architecture based on a transformer model to generate proofs of equivalence between program pairs. The system outputs a sequence of rewrites, and the validity of the sequence is simply checked by verifying it can be applied. If no valid sequence is produced by the neural network, the system reports the programs as non-equivalent, ensuring by design no programs may be incorrectly reported as equivalent. Our system is fully implemented for one single gramm",
    "path": "papers/21/09/2109.10476.json",
    "total_tokens": 833,
    "translated_title": "自监督学习通过重写规则证明直线程序的等价性",
    "translated_abstract": "我们致力于自动合成由一系列语句构成的程序之间语义等价性的证明的问题。我们使用抽象语法树（AST）表示程序，其中一组保持语义的重写规则可以应用于特定的AST模式，生成转换后的程序与原程序在语义上等价。在我们的系统中，如果存在一系列重写规则的应用序列将一个程序重写成另一个程序，那么这两个程序是等价的。我们提出了一种基于Transformer模型的神经网络架构，用于生成程序对之间等价性的证明。系统输出一系列重写操作，验证该序列的有效性只需检查其是否可以应用。如果神经网络没有生成有效的序列，系统将报告这两个程序为非等价的，从设计上确保没有错误地将程序报告为等价的情况发生。我们的系统已经完全实现于单个文法上。",
    "tldr": "本研究针对自动合成一对程序之间语义等价性的证明问题，提出了一种基于Transformer模型的神经网络架构，通过一系列重写规则的应用序列实现程序的等价性证明。",
    "en_tdlr": "This research addresses the problem of automatically synthesizing proofs of semantic equivalence between two programs. It proposes a neural network architecture based on a Transformer model to generate proofs of equivalence by applying a sequence of rewrite rules."
}