{
    "title": "An Optimal Algorithm for Finding Champions in Tournament Graphs. (arXiv:2111.13621v4 [cs.IR] UPDATED)",
    "abstract": "A tournament graph is a complete directed graph, which can be used to model a round-robin tournament between $n$ players. In this paper, we address the problem of finding a champion of the tournament, also known as Copeland winner, which is a player that wins the highest number of matches. In detail, we aim to investigate algorithms that find the champion by playing a low number of matches. Solving this problem allows us to speed up several Information Retrieval and Recommender System applications, including question answering, conversational search, etc. Indeed, these applications often search for the champion inducing a round-robin tournament among the players by employing a machine learning model to estimate who wins each pairwise comparison. Our contribution, thus, allows finding the champion by performing a low number of model inferences. We prove that any deterministic or randomized algorithm finding a champion with constant success probability requires $\\Omega(\\ell n)$ compariso",
    "link": "http://arxiv.org/abs/2111.13621",
    "context": "Title: An Optimal Algorithm for Finding Champions in Tournament Graphs. (arXiv:2111.13621v4 [cs.IR] UPDATED)\nAbstract: A tournament graph is a complete directed graph, which can be used to model a round-robin tournament between $n$ players. In this paper, we address the problem of finding a champion of the tournament, also known as Copeland winner, which is a player that wins the highest number of matches. In detail, we aim to investigate algorithms that find the champion by playing a low number of matches. Solving this problem allows us to speed up several Information Retrieval and Recommender System applications, including question answering, conversational search, etc. Indeed, these applications often search for the champion inducing a round-robin tournament among the players by employing a machine learning model to estimate who wins each pairwise comparison. Our contribution, thus, allows finding the champion by performing a low number of model inferences. We prove that any deterministic or randomized algorithm finding a champion with constant success probability requires $\\Omega(\\ell n)$ compariso",
    "path": "papers/21/11/2111.13621.json",
    "total_tokens": 926,
    "translated_title": "寻找锦标赛图中冠军的最优算法",
    "translated_abstract": "锦标赛图是一个完全有向图，可用于模拟$n$名选手之间的循环赛。本文讨论了寻找锦标赛的冠军（亦称Copeland获胜者）的问题，即赢得最多比赛的选手。我们的目标是探究通过进行较少比赛来寻找冠军的算法。解决这个问题可以加速多种信息检索和推荐系统应用，包括问答、对话搜索等。这些应用经常通过使用机器学习模型估计谁会赢得每个成对比赛，从而诱导选手之间的循环赛来寻找冠军。因此，我们的贡献允许通过执行较少的模型推理来寻找冠军。我们证明了任何具有常数成功概率的确定性或随机算法找到冠军都需要$\\Omega(\\ell n)$次比较。",
    "tldr": "本文提出了一种在完成最少比赛的前提下寻找锦标赛图中冠军（Copeland获胜者）的最优算法，该算法可以加速信息检索和推荐系统应用，这对于进行循环赛的机器学习模型具有重要的意义，能减少模型推理的数量。",
    "en_tdlr": "This paper proposes an optimal algorithm for finding the champion (Copeland winner) in tournament graphs while playing a low number of matches. The algorithm speeds up several Information Retrieval and Recommender System applications and allows finding the champion by performing a low number of model inferences. This has important implications for machine learning models inducing a round-robin tournament among the players, reducing the number of model inferences required."
}