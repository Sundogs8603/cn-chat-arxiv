{
    "title": "BUSTLE: Bottom-Up Program Synthesis Through Learning-Guided Exploration. (arXiv:2007.14381v3 [cs.PL] CROSS LISTED)",
    "abstract": "Program synthesis is challenging largely because of the difficulty of search in a large space of programs. Human programmers routinely tackle the task of writing complex programs by writing sub-programs and then analyzing their intermediate results to compose them in appropriate ways. Motivated by this intuition, we present a new synthesis approach that leverages learning to guide a bottom-up search over programs. In particular, we train a model to prioritize compositions of intermediate values during search conditioned on a given set of input-output examples. This is a powerful combination because of several emergent properties. First, in bottom-up search, intermediate programs can be executed, providing semantic information to the neural network. Second, given the concrete values from those executions, we can exploit rich features based on recent work on property signatures. Finally, bottom-up search allows the system substantial flexibility in what order to generate the solution, al",
    "link": "http://arxiv.org/abs/2007.14381",
    "context": "Title: BUSTLE: Bottom-Up Program Synthesis Through Learning-Guided Exploration. (arXiv:2007.14381v3 [cs.PL] CROSS LISTED)\nAbstract: Program synthesis is challenging largely because of the difficulty of search in a large space of programs. Human programmers routinely tackle the task of writing complex programs by writing sub-programs and then analyzing their intermediate results to compose them in appropriate ways. Motivated by this intuition, we present a new synthesis approach that leverages learning to guide a bottom-up search over programs. In particular, we train a model to prioritize compositions of intermediate values during search conditioned on a given set of input-output examples. This is a powerful combination because of several emergent properties. First, in bottom-up search, intermediate programs can be executed, providing semantic information to the neural network. Second, given the concrete values from those executions, we can exploit rich features based on recent work on property signatures. Finally, bottom-up search allows the system substantial flexibility in what order to generate the solution, al",
    "path": "papers/20/07/2007.14381.json",
    "total_tokens": 861,
    "translated_title": "BUSTLE: 通过学习指导的自下而上程序合成",
    "translated_abstract": "程序合成的挑战在于在庞大的程序空间中进行搜索的困难。人类程序员通常通过编写子程序并分析其中间结果来以适当的方式组合它们来解决编写复杂程序的任务。在此直觉的基础上，我们提出了一种新的合成方法，利用学习来引导自下而上的程序搜索。具体而言，我们训练一个模型，在给定一组输入-输出示例时，通过学习优先考虑中间值的组合来指导搜索。这是一个强大的组合，因为有几个 emergent properties。首先，在自下而上的搜索中，可以执行中间程序，为神经网络提供语义信息。其次，鉴于这些执行的具体值，我们可以利用基于最近关于属性签名的工作的丰富特性。最后，自下而上的搜索使系统在生成解决方案的顺序上具有相当大的灵活性。",
    "tldr": "这种论文提出了一种利用学习指导自下而上搜索的程序合成方法，通过训练模型优先考虑中间值的组合，利用中间程序的语义信息和具体值的特性进行灵活的解决方案生成。",
    "en_tdlr": "This paper presents an approach to program synthesis that utilizes learning to guide a bottom-up search, training a model to prioritize compositions of intermediate values. It leverages the semantic information from executing intermediate programs and the rich features of concrete values for flexible solution generation."
}