{
    "title": "On-the-Fly Adaptation of Source Code Models using Meta-Learning. (arXiv:2003.11768v2 [cs.LG] CROSS LISTED)",
    "abstract": "The ability to adapt to unseen, local contexts is an important challenge that successful models of source code must overcome. One of the most popular approaches for the adaptation of such models is dynamic evaluation. With dynamic evaluation, when running a model on an unseen file, the model is updated immediately after having observed each token in that file. In this work, we propose instead to frame the problem of context adaptation as a meta-learning problem. We aim to train a base source code model that is best able to learn from information in a file to deliver improved predictions of missing tokens. Unlike dynamic evaluation, this formulation allows us to select more targeted information (support tokens) for adaptation, that is both before and after a target hole in a file. We consider an evaluation setting that we call line-level maintenance, designed to reflect the downstream task of code auto-completion in an IDE. Leveraging recent developments in meta-learning such as first-o",
    "link": "http://arxiv.org/abs/2003.11768",
    "context": "Title: On-the-Fly Adaptation of Source Code Models using Meta-Learning. (arXiv:2003.11768v2 [cs.LG] CROSS LISTED)\nAbstract: The ability to adapt to unseen, local contexts is an important challenge that successful models of source code must overcome. One of the most popular approaches for the adaptation of such models is dynamic evaluation. With dynamic evaluation, when running a model on an unseen file, the model is updated immediately after having observed each token in that file. In this work, we propose instead to frame the problem of context adaptation as a meta-learning problem. We aim to train a base source code model that is best able to learn from information in a file to deliver improved predictions of missing tokens. Unlike dynamic evaluation, this formulation allows us to select more targeted information (support tokens) for adaptation, that is both before and after a target hole in a file. We consider an evaluation setting that we call line-level maintenance, designed to reflect the downstream task of code auto-completion in an IDE. Leveraging recent developments in meta-learning such as first-o",
    "path": "papers/20/03/2003.11768.json",
    "total_tokens": 838,
    "translated_title": "基于元学习的源码模型实时适应性研究",
    "translated_abstract": "适应未知的本地环境是成功的源代码模型必须克服的重要挑战之一。动态评估是最流行的适应模型的方法之一，但本文提出了一种不同的方法——将上下文适应问题转化为元学习问题。我们旨在训练一个基本的源码模型，能够从文件中的信息提取最佳的支持标记进行学习，以提供缺失标记的改进预测。与动态评估不同，这个公式允许我们选择更有针对性的信息（支持标记）进行适应，即在目标文件中的目标空位置之前和之后。我们考虑了一种称为行级维护的评估设置，旨在反映IDE中代码自动完成的下游任务。",
    "tldr": "本文提出了一种基于元学习的方法用于源码模型的实时适应性研究，以提高源代码模型的预测准确性，解决代码自动完成问题。",
    "en_tdlr": "This paper proposes a meta-learning approach for real-time adaptation of source code models, aiming to improve the prediction accuracy and solve the problem of code auto-completion, by selecting targeted information for adaptation before and after a target hole in a file. The model is trained to learn from information in a file and deliver improved predictions of missing tokens."
}