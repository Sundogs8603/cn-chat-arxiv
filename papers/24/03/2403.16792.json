{
    "title": "Iterative Refinement of Project-Level Code Context for Precise Code Generation with Compiler Feedback",
    "abstract": "arXiv:2403.16792v1 Announce Type: new  Abstract: Large language models (LLMs) have shown remarkable progress in automated code generation. Yet, incorporating LLM-based code generation into real-life software projects poses challenges, as the generated code may contain errors in API usage, class, data structure, or missing project-specific information. As much of this project-specific context cannot fit into the prompts of LLMs, we must find ways to allow the model to explore the project-level code context. To this end, this paper puts forward a novel approach, termed ProCoder, which iteratively refines the project-level code context for precise code generation, guided by the compiler feedback. In particular, ProCoder first leverages compiler techniques to identify a mismatch between the generated code and the project's context. It then iteratively aligns and fixes the identified errors using information extracted from the code repository. We integrate ProCoder with two representative L",
    "link": "https://arxiv.org/abs/2403.16792",
    "context": "Title: Iterative Refinement of Project-Level Code Context for Precise Code Generation with Compiler Feedback\nAbstract: arXiv:2403.16792v1 Announce Type: new  Abstract: Large language models (LLMs) have shown remarkable progress in automated code generation. Yet, incorporating LLM-based code generation into real-life software projects poses challenges, as the generated code may contain errors in API usage, class, data structure, or missing project-specific information. As much of this project-specific context cannot fit into the prompts of LLMs, we must find ways to allow the model to explore the project-level code context. To this end, this paper puts forward a novel approach, termed ProCoder, which iteratively refines the project-level code context for precise code generation, guided by the compiler feedback. In particular, ProCoder first leverages compiler techniques to identify a mismatch between the generated code and the project's context. It then iteratively aligns and fixes the identified errors using information extracted from the code repository. We integrate ProCoder with two representative L",
    "path": "papers/24/03/2403.16792.json",
    "total_tokens": 828,
    "translated_title": "通过编译器反馈迭代改进项目级代码上下文，以获得精确的代码生成",
    "translated_abstract": "大型语言模型(LLMs)在自动代码生成方面展现出了显著的进展。然而，将基于LLM的代码生成应用到现实项目中会面临挑战，因为生成的代码可能存在API使用、类、数据结构错误或缺少项目特定信息。鉴于大部分项目特定上下文无法适应LLMs的提示，我们必须找到让模型能够探索项目级代码上下文的方法。为此，本文提出了一种名为ProCoder的新颖方法，通过编译器反馈引导，迭代地改进项目级代码上下文，以获得精确的代码生成。具体而言，ProCoder首先利用编译器技术识别生成的代码与项目上下文之间的不匹配之处。然后，通过从代码库中提取的信息迭代地对齐和修复识别出的错误。我们将ProCoder与两个代表性的LLM集成，",
    "tldr": "本论文提出了一种名为ProCoder的新颖方法，通过编译器反馈引导，迭代地改进项目级代码上下文，以获得精确的代码生成",
    "en_tdlr": "This paper presents a novel approach called ProCoder, which iteratively refines the project-level code context for precise code generation guided by compiler feedback."
}