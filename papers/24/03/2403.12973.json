{
    "title": "C Analyzer : A Static Program Analysis Tool for C Programs",
    "abstract": "arXiv:2403.12973v1 Announce Type: cross  Abstract: In our times, when the world is increasingly becoming more dependent on software programs, writing bug-free, correct programs is crucial. Program verification based on formal methods can guarantee this by detecting run-time errors in safety-critical systems to avoid possible adverse impacts on human life and save time and money.   This project work tries to leverage Abstract Interpretation techniques for static analysis of C programs. C Analyzer is a tool developed for static analysis of C programs. This implementation of C Analyzer provides a plug-and-play domain architecture for multiple abstract domains to be used. C Analyzer supports four abstract domains - Interval, Octagon, Polyhedra, and Bit Vector. We use these different domains for required precision in program verification. C Analyzer tool uses LLVM C/C++ compiler frontend Clang API to generate and traverse the Control Flow Graph (CFG) of a given C program. This tool generate",
    "link": "https://arxiv.org/abs/2403.12973",
    "context": "Title: C Analyzer : A Static Program Analysis Tool for C Programs\nAbstract: arXiv:2403.12973v1 Announce Type: cross  Abstract: In our times, when the world is increasingly becoming more dependent on software programs, writing bug-free, correct programs is crucial. Program verification based on formal methods can guarantee this by detecting run-time errors in safety-critical systems to avoid possible adverse impacts on human life and save time and money.   This project work tries to leverage Abstract Interpretation techniques for static analysis of C programs. C Analyzer is a tool developed for static analysis of C programs. This implementation of C Analyzer provides a plug-and-play domain architecture for multiple abstract domains to be used. C Analyzer supports four abstract domains - Interval, Octagon, Polyhedra, and Bit Vector. We use these different domains for required precision in program verification. C Analyzer tool uses LLVM C/C++ compiler frontend Clang API to generate and traverse the Control Flow Graph (CFG) of a given C program. This tool generate",
    "path": "papers/24/03/2403.12973.json",
    "total_tokens": 801,
    "translated_title": "C分析器：用于C程序的静态程序分析工具",
    "translated_abstract": "在我们这个时代，当世界越来越依赖软件程序时，编写无bug、正确的程序至关重要。基于形式方法的程序验证可以通过检测安全关键系统中的运行时错误来保证这一点，以避免对人类生活可能造成的不利影响，节省时间和金钱。本项目尝试利用抽象解释技术对C程序进行静态分析。C分析器是一种用于C程序的静态分析工具。该C分析器的实现提供了一个可供多个抽象域使用的即插即用的架构。C分析器支持四个抽象域——区间、八角形、多面体和位矢。我们使用这些不同的域来提供程序验证所需的精度。C分析器工具使用LLVM C/C++编译器前端Clang API生成和遍历给定C程序的控制流图（CFG）。",
    "tldr": "该项目使用抽象解释技术开发了C分析器，可以对C程序进行静态分析，支持多个抽象域，提高程序验证的精度。",
    "en_tdlr": "The project develops C Analyzer using Abstract Interpretation techniques to perform static analysis on C programs, supporting multiple abstract domains for improved precision in program verification."
}