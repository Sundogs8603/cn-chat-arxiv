{
    "title": "The Impact Of Bug Localization Based on Crash Report Mining: A Developers' Perspective",
    "abstract": "arXiv:2403.10753v1 Announce Type: cross  Abstract: Developers often use crash reports to understand the root cause of bugs. However, locating the buggy source code snippet from such information is a challenging task, mainly when the log database contains many crash reports. To mitigate this issue, recent research has proposed and evaluated approaches for grouping crash report data and using stack trace information to locate bugs. The effectiveness of such approaches has been evaluated by mainly comparing the candidate buggy code snippets with the actual changed code in bug-fix commits -- which happens in the context of retrospective repository mining studies. Therefore, the existing literature still lacks discussing the use of such approaches in the daily life of a software company, which could explain the developers' perceptions on the use of these approaches. In this paper, we report our experience of using an approach for grouping crash reports and finding buggy code on a weekly bas",
    "link": "https://arxiv.org/abs/2403.10753",
    "context": "Title: The Impact Of Bug Localization Based on Crash Report Mining: A Developers' Perspective\nAbstract: arXiv:2403.10753v1 Announce Type: cross  Abstract: Developers often use crash reports to understand the root cause of bugs. However, locating the buggy source code snippet from such information is a challenging task, mainly when the log database contains many crash reports. To mitigate this issue, recent research has proposed and evaluated approaches for grouping crash report data and using stack trace information to locate bugs. The effectiveness of such approaches has been evaluated by mainly comparing the candidate buggy code snippets with the actual changed code in bug-fix commits -- which happens in the context of retrospective repository mining studies. Therefore, the existing literature still lacks discussing the use of such approaches in the daily life of a software company, which could explain the developers' perceptions on the use of these approaches. In this paper, we report our experience of using an approach for grouping crash reports and finding buggy code on a weekly bas",
    "path": "papers/24/03/2403.10753.json",
    "total_tokens": 838,
    "translated_title": "基于崩溃报告挖掘的Bug定位影响：开发者视角",
    "translated_abstract": "开发人员通常使用崩溃报告来理解bug的根本原因。然而，从这些信息中定位有错误的源代码片段是一项具有挑战性的任务，特别是当日志数据库包含许多崩溃报告时。为了解决这个问题，最近的研究提出并评估了分组崩溃报告数据和使用堆栈跟踪信息来定位bug的方法。这种方法的有效性主要通过将候选buggy源代码片段与bug修复提交中实际更改的代码进行比较来评估，这是在回顾性仓库挖掘研究的背景下发生的。因此，现有文献仍缺乏讨论这些方法在软件公司日常生活中的使用，这可以解释开发者对这些方法的看法。在本文中，我们报告了我们在每周基基础上使用一种分组崩溃报告并找到错误代码的方法的经验。",
    "tldr": "本文报告了一种基于崩溃报告挖掘的Bug定位方法，探讨了该方法在软件公司日常生活中的使用，解释了开发者对这一方法的看法。",
    "en_tdlr": "This paper reports on a bug localization method based on crash report mining, discussing its practical application in the daily life of software companies and explaining developers' perspectives on this method."
}