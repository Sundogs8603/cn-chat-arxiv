{
    "title": "Exploring Language Model's Code Generation Ability with Auxiliary Functions",
    "abstract": "arXiv:2403.10575v1 Announce Type: cross  Abstract: Auxiliary function is a helpful component to improve language model's code generation ability. However, a systematic exploration of how they affect has yet to be done. In this work, we comprehensively evaluate the ability to utilize auxiliary functions encoded in recent code-pretrained language models. First, we construct a human-crafted evaluation set, called HumanExtension, which contains examples of two functions where one function assists the other. With HumanExtension, we design several experiments to examine their ability in a multifaceted way. Our evaluation processes enable a comprehensive understanding of including auxiliary functions in the prompt in terms of effectiveness and robustness. An additional implementation style analysis captures the models' various implementation patterns when they access the auxiliary function. Through this analysis, we discover the models' promising ability to utilize auxiliary functions includi",
    "link": "https://arxiv.org/abs/2403.10575",
    "context": "Title: Exploring Language Model's Code Generation Ability with Auxiliary Functions\nAbstract: arXiv:2403.10575v1 Announce Type: cross  Abstract: Auxiliary function is a helpful component to improve language model's code generation ability. However, a systematic exploration of how they affect has yet to be done. In this work, we comprehensively evaluate the ability to utilize auxiliary functions encoded in recent code-pretrained language models. First, we construct a human-crafted evaluation set, called HumanExtension, which contains examples of two functions where one function assists the other. With HumanExtension, we design several experiments to examine their ability in a multifaceted way. Our evaluation processes enable a comprehensive understanding of including auxiliary functions in the prompt in terms of effectiveness and robustness. An additional implementation style analysis captures the models' various implementation patterns when they access the auxiliary function. Through this analysis, we discover the models' promising ability to utilize auxiliary functions includi",
    "path": "papers/24/03/2403.10575.json",
    "total_tokens": 812,
    "translated_title": "用辅助功能探索语言模型的代码生成能力",
    "translated_abstract": "辅助函数是改善语言模型代码生成能力的有用组件。然而，对它们如何影响的系统性探索尚未完成。本研究全面评估了最近的代码预训练语言模型中编码的辅助函数利用能力。我们首先构建了一个人工设计的评估集，称为HumanExtension，其中包含一个函数帮助另一个函数的示例。通过HumanExtension，我们设计了几个实验以多方面地检验它们的能力。我们的评估过程使得能够全面理解包括辅助函数在提示中的有效性和鲁棒性。另外，通过实现风格分析捕捉到模型在访问辅助函数时的各种实现模式。通过这一分析，我们发现模型利用辅助函数的能力很有前景。",
    "tldr": "在这项研究中，我们全面评估了最近代码预训练语言模型中编码的辅助函数利用能力，通过设计实验，并通过实现风格分析，我们发现了模型利用辅助函数的很有前景。",
    "en_tdlr": "In this study, we comprehensively evaluate the ability to utilize auxiliary functions encoded in recent code-pretrained language models, and through experiments and implementation style analysis, we discover the promising ability of models to utilize auxiliary functions."
}