{
    "title": "ConstraintChecker: A Plugin for Large Language Models to Reason on Commonsense Knowledge Bases. (arXiv:2401.14003v1 [cs.CL])",
    "abstract": "Reasoning over Commonsense Knowledge Bases (CSKB), i.e. CSKB reasoning, has been explored as a way to acquire new commonsense knowledge based on reference knowledge in the original CSKBs and external prior knowledge. Despite the advancement of Large Language Models (LLM) and prompt engineering techniques in various reasoning tasks, they still struggle to deal with CSKB reasoning. One of the problems is that it is hard for them to acquire explicit relational constraints in CSKBs from only in-context exemplars, due to a lack of symbolic reasoning capabilities (Bengio et al., 2021). To this end, we proposed **ConstraintChecker**, a plugin over prompting techniques to provide and check explicit constraints. When considering a new knowledge instance, ConstraintChecker employs a rule-based module to produce a list of constraints, then it uses a zero-shot learning module to check whether this knowledge instance satisfies all constraints. The acquired constraint-checking result is then aggrega",
    "link": "http://arxiv.org/abs/2401.14003",
    "context": "Title: ConstraintChecker: A Plugin for Large Language Models to Reason on Commonsense Knowledge Bases. (arXiv:2401.14003v1 [cs.CL])\nAbstract: Reasoning over Commonsense Knowledge Bases (CSKB), i.e. CSKB reasoning, has been explored as a way to acquire new commonsense knowledge based on reference knowledge in the original CSKBs and external prior knowledge. Despite the advancement of Large Language Models (LLM) and prompt engineering techniques in various reasoning tasks, they still struggle to deal with CSKB reasoning. One of the problems is that it is hard for them to acquire explicit relational constraints in CSKBs from only in-context exemplars, due to a lack of symbolic reasoning capabilities (Bengio et al., 2021). To this end, we proposed **ConstraintChecker**, a plugin over prompting techniques to provide and check explicit constraints. When considering a new knowledge instance, ConstraintChecker employs a rule-based module to produce a list of constraints, then it uses a zero-shot learning module to check whether this knowledge instance satisfies all constraints. The acquired constraint-checking result is then aggrega",
    "path": "papers/24/01/2401.14003.json",
    "total_tokens": 903,
    "translated_title": "ConstraintChecker：用于大型语言模型推理常识知识库的插件",
    "translated_abstract": "基于常识知识库的推理（即常识知识库推理）已被探索作为一种通过原始常识知识库和外部先验知识来获取新的常识知识的方法。尽管大型语言模型（LLM）和提示工程技术在各种推理任务中取得了进展，但它们仍然难以处理常识知识库推理。其中一个问题是，它们很难只通过上下文示例从常识知识库中获取显式关系约束，这是因为缺乏符号推理能力（Bengio等人，2021年）。为此，我们提出了一种名为ConstraintChecker的插件，它基于提示技术提供和检查显式约束。在考虑新的知识实例时，ConstraintChecker使用基于规则的模块生成约束列表，然后使用零样本学习模块检查该知识实例是否满足所有约束。然后，获取的约束检查结果被聚合...",
    "tldr": "ConstraintChecker是一个针对大型语言模型的插件，用于推理常识知识库。它通过提示技术提供和检查显式约束，帮助解决了大型语言模型在处理常识知识库推理时的困难。",
    "en_tdlr": "ConstraintChecker is a plugin for large language models to reason on commonsense knowledge bases. It provides and checks explicit constraints using prompting techniques, addressing the challenges faced by large language models in dealing with commonsense knowledge base reasoning."
}