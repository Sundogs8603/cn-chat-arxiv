{
    "title": "Using LLM such as ChatGPT for Designing and Implementing a RISC Processor: Execution,Challenges and Limitations. (arXiv:2401.10364v1 [cs.LG])",
    "abstract": "This paper discusses the feasibility of using Large Language Models LLM for code generation with a particular application in designing an RISC. The paper also reviews the associated steps such as parsing, tokenization, encoding, attention mechanism, sampling the tokens and iterations during code generation. The generated code for the RISC components is verified through testbenches and hardware implementation on a FPGA board. Four metric parameters Correct output on the first iteration, Number of errors embedded in the code, Number of trials required to achieve the code and Failure to generate the code after three iterations, are used to compare the efficiency of using LLM in programming. In all the cases, the generated code had significant errors and human intervention was always required to fix the bugs. LLM can therefore be used to complement a programmer code design.",
    "link": "http://arxiv.org/abs/2401.10364",
    "context": "Title: Using LLM such as ChatGPT for Designing and Implementing a RISC Processor: Execution,Challenges and Limitations. (arXiv:2401.10364v1 [cs.LG])\nAbstract: This paper discusses the feasibility of using Large Language Models LLM for code generation with a particular application in designing an RISC. The paper also reviews the associated steps such as parsing, tokenization, encoding, attention mechanism, sampling the tokens and iterations during code generation. The generated code for the RISC components is verified through testbenches and hardware implementation on a FPGA board. Four metric parameters Correct output on the first iteration, Number of errors embedded in the code, Number of trials required to achieve the code and Failure to generate the code after three iterations, are used to compare the efficiency of using LLM in programming. In all the cases, the generated code had significant errors and human intervention was always required to fix the bugs. LLM can therefore be used to complement a programmer code design.",
    "path": "papers/24/01/2401.10364.json",
    "total_tokens": 824,
    "translated_title": "使用类似ChatGPT的LLM设计和实现RISC处理器：执行、挑战和限制",
    "translated_abstract": "本文讨论了使用大型语言模型LLM进行代码生成的可行性，其中特别应用于设计RISC处理器。文章还回顾了与代码生成相关的步骤，如解析、标记化、编码、注意机制、抽样以及代码生成期间的迭代。通过测试平台和FPGA板上的硬件实现验证了生成的RISC组件的代码。使用了四个度量参数：第一次迭代的正确输出、代码中嵌入的错误数量、实现代码所需的尝试次数以及三次迭代后无法生成代码的失败情况，以比较使用LLM编程的效率。在所有情况下，生成的代码都存在显著错误，总是需要人为干预修复错误。因此，LLM可用于辅助程序员的代码设计。",
    "tldr": "本文讨论了使用LLM进行代码生成的可行性，并特别应用于设计RISC处理器。经实验证实，LLM生成的代码存在显著错误，需要人为干预来修复。LLM可用于辅助程序员的代码设计。",
    "en_tdlr": "This paper discusses the feasibility of using Large Language Models (LLM) for code generation, with a particular application in designing a RISC processor. It is found that the generated code using LLM has significant errors and requires human intervention for bug fixing. LLM can be used to complement a programmer's code design."
}