{
    "title": "CIM-MLC: A Multi-level Compilation Stack for Computing-In-Memory Accelerators. (arXiv:2401.12428v1 [cs.AR])",
    "abstract": "In recent years, various computing-in-memory (CIM) processors have been presented, showing superior performance over traditional architectures. To unleash the potential of various CIM architectures, such as device precision, crossbar size, and crossbar number, it is necessary to develop compilation tools that are fully aware of the CIM architectural details and implementation diversity. However, due to the lack of architectural support in current popular open-source compiling stacks, existing CIM designs either manually deploy networks or build their own compilers, which is time-consuming and labor-intensive. Although some works expose the specific CIM device programming interfaces to compilers, they are often bound to a fixed CIM architecture, lacking the flexibility to support the CIM architectures with different computing granularity. On the other hand, existing compilation works usually consider the scheduling of limited operation types (such as crossbar-bound matrix-vector multipl",
    "link": "http://arxiv.org/abs/2401.12428",
    "context": "Title: CIM-MLC: A Multi-level Compilation Stack for Computing-In-Memory Accelerators. (arXiv:2401.12428v1 [cs.AR])\nAbstract: In recent years, various computing-in-memory (CIM) processors have been presented, showing superior performance over traditional architectures. To unleash the potential of various CIM architectures, such as device precision, crossbar size, and crossbar number, it is necessary to develop compilation tools that are fully aware of the CIM architectural details and implementation diversity. However, due to the lack of architectural support in current popular open-source compiling stacks, existing CIM designs either manually deploy networks or build their own compilers, which is time-consuming and labor-intensive. Although some works expose the specific CIM device programming interfaces to compilers, they are often bound to a fixed CIM architecture, lacking the flexibility to support the CIM architectures with different computing granularity. On the other hand, existing compilation works usually consider the scheduling of limited operation types (such as crossbar-bound matrix-vector multipl",
    "path": "papers/24/01/2401.12428.json",
    "total_tokens": 887,
    "translated_title": "CIM-MLC:面向计算内存加速器的多级编译栈",
    "translated_abstract": "最近几年，各种计算内存(CIM)处理器被提出，展示出优于传统架构的性能。为了释放各种CIM架构的潜力，如设备精度、交叉栏大小和交叉栏数量，有必要开发完全了解CIM架构细节和实现多样性的编译工具。然而，由于当前流行的开源编译栈在架构支持方面的不足，现有的CIM设计要么手动部署网络，要么构建自己的编译器，这是耗时耗力的。尽管一些工作将特定的CIM设备编程接口公开给编译器，但它们通常被绑定到固定的CIM架构，缺乏灵活性来支持具有不同计算粒度的CIM架构。另一方面，现有的编译工作通常考虑了有限的操作类型的调度（例如交叉栏限制的矩阵-向量乘法）",
    "tldr": "CIM-MLC是一个面向计算内存加速器的多级编译栈，为了支持各种CIM架构的潜力，该编译栈完全了解CIM架构细节和实现多样性，并提供灵活性来支持具有不同计算粒度的CIM架构。",
    "en_tdlr": "CIM-MLC is a multi-level compilation stack for computing-in-memory accelerators. It fully understands the architectural details and implementation diversity of CIM architectures, providing flexibility to support CIM architectures with different computing granularity."
}