{
    "title": "Automated legal reasoning with discretion to act using s(LAW). (arXiv:2401.14511v1 [cs.AI])",
    "abstract": "Automated legal reasoning and its application in smart contracts and automated decisions are increasingly attracting interest. In this context, ethical and legal concerns make it necessary for automated reasoners to justify in human-understandable terms the advice given. Logic Programming, specially Answer Set Programming, has a rich semantics and has been used to very concisely express complex knowledge. However, modelling discretionality to act and other vague concepts such as ambiguity cannot be expressed in top-down execution models based on Prolog, and in bottom-up execution models based on ASP the justifications are incomplete and/or not scalable. We propose to use s(CASP), a top-down execution model for predicate ASP, to model vague concepts following a set of patterns. We have implemented a framework, called s(LAW), to model, reason, and justify the applicable legislation and validate it by translating (and benchmarking) a representative use case, the criteria for the admission",
    "link": "http://arxiv.org/abs/2401.14511",
    "context": "Title: Automated legal reasoning with discretion to act using s(LAW). (arXiv:2401.14511v1 [cs.AI])\nAbstract: Automated legal reasoning and its application in smart contracts and automated decisions are increasingly attracting interest. In this context, ethical and legal concerns make it necessary for automated reasoners to justify in human-understandable terms the advice given. Logic Programming, specially Answer Set Programming, has a rich semantics and has been used to very concisely express complex knowledge. However, modelling discretionality to act and other vague concepts such as ambiguity cannot be expressed in top-down execution models based on Prolog, and in bottom-up execution models based on ASP the justifications are incomplete and/or not scalable. We propose to use s(CASP), a top-down execution model for predicate ASP, to model vague concepts following a set of patterns. We have implemented a framework, called s(LAW), to model, reason, and justify the applicable legislation and validate it by translating (and benchmarking) a representative use case, the criteria for the admission",
    "path": "papers/24/01/2401.14511.json",
    "total_tokens": 888,
    "translated_title": "使用s(LAW)进行自动化法律推理与行为裁量",
    "translated_abstract": "自动化法律推理及其在智能合约和自动化决策中的应用越来越受到关注。在这个背景下，道德和法律问题使得自动推理器需要以人类可理解的方式来解释给出的建议。逻辑编程，特别是答案集编程，具有丰富的语义，可以非常简洁地表达复杂知识。然而，在基于Prolog的自顶向下执行模型和基于ASP的自底向上执行模型中，无法表达行为裁量和其他模糊概念，如歧义，并且在ASP中的理由是不完整和/或不可扩展的。我们提出使用s(CASP)，一种用于谓词ASP的自顶向下执行模型，根据一组模式来建模模糊概念。我们实现了一个框架，称为s(LAW)，用于建模、推理和解释适用的法律，并通过翻译（和基准测试）一个代表性用例，即入学标准进行验证。",
    "tldr": "s(LAW)是一种使用s(CASP)模型的框架，用于自动化法律推理和行为裁量，以解决自顶向下和自底向上执行模型无法表达的模糊概念和完整性问题。",
    "en_tdlr": "s(LAW) is a framework using the s(CASP) model for automated legal reasoning and discretion to act, addressing the limitations of top-down and bottom-up execution models in expressing vague concepts and ensuring completeness."
}