{
    "title": "Selecting Walk Schemes for Database Embedding. (arXiv:2401.11215v1 [cs.LG])",
    "abstract": "Machinery for data analysis often requires a numeric representation of the input. Towards that, a common practice is to embed components of structured data into a high-dimensional vector space. We study the embedding of the tuples of a relational database, where existing techniques are often based on optimization tasks over a collection of random walks from the database. The focus of this paper is on the recent FoRWaRD algorithm that is designed for dynamic databases, where walks are sampled by following foreign keys between tuples. Importantly, different walks have different schemas, or \"walk schemes\", that are derived by listing the relations and attributes along the walk. Also importantly, different walk schemes describe relationships of different natures in the database. We show that by focusing on a few informative walk schemes, we can obtain tuple embedding significantly faster, while retaining the quality. We define the problem of scheme selection for tuple embedding, devise sev",
    "link": "http://arxiv.org/abs/2401.11215",
    "context": "Title: Selecting Walk Schemes for Database Embedding. (arXiv:2401.11215v1 [cs.LG])\nAbstract: Machinery for data analysis often requires a numeric representation of the input. Towards that, a common practice is to embed components of structured data into a high-dimensional vector space. We study the embedding of the tuples of a relational database, where existing techniques are often based on optimization tasks over a collection of random walks from the database. The focus of this paper is on the recent FoRWaRD algorithm that is designed for dynamic databases, where walks are sampled by following foreign keys between tuples. Importantly, different walks have different schemas, or \"walk schemes\", that are derived by listing the relations and attributes along the walk. Also importantly, different walk schemes describe relationships of different natures in the database. We show that by focusing on a few informative walk schemes, we can obtain tuple embedding significantly faster, while retaining the quality. We define the problem of scheme selection for tuple embedding, devise sev",
    "path": "papers/24/01/2401.11215.json",
    "total_tokens": 860,
    "translated_title": "选择用于数据库嵌入的行走方案",
    "translated_abstract": "数据分析的机械设备通常需要对输入进行数值表示。为此，一种常见做法是将结构化数据的组成部分嵌入到高维向量空间中。我们研究关系数据库中元组的嵌入，现有技术通常基于对数据库中的一组随机行走的优化任务。本文的重点是最近提出的适用于动态数据库的FoRWaRD算法，其中行走是通过遵循元组间的外键来采样的。重要的是，不同的行走有不同的模式，或者“行走方案”，通过列出行走中的关系和属性来派生。重要的是，不同的行走方案描述了数据库中不同性质的关系。我们展示了通过集中关注几个信息丰富的行走方案，我们可以以更快的速度获得元组嵌入，同时保持其质量。我们定义了用于元组嵌入的方案选择问题，并设计了几种实验策略来解决该问题。",
    "tldr": "本文研究了数据库嵌入中的行走方案选择问题，通过关注几个信息丰富的行走方案，能够更快地获得元组嵌入，并保持其质量。",
    "en_tdlr": "This paper investigates the problem of walk scheme selection for database embedding, and shows that by focusing on a few informative walk schemes, it is possible to obtain tuple embedding significantly faster while maintaining its quality."
}