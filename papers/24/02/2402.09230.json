{
    "title": "Context Composing for Full Line Code Completion",
    "abstract": "arXiv:2402.09230v1 Announce Type: cross Abstract: Code Completion is one of the most used Integrated Development Environment (IDE) features, which affects the everyday life of a software developer. Modern code completion approaches moved from the composition of several static analysis-based contributors to pipelines that involve neural networks. This change allows the proposal of longer code suggestions while maintaining the relatively short time spent on generation itself. At JetBrains, we put a lot of effort into perfecting the code completion workflow so it can be both helpful and non-distracting for a programmer. We managed to ship the Full Line Code Completion feature to PyCharm Pro IDE and proved its usefulness in A/B testing on hundreds of real Python users. The paper describes our approach to context composing for the Transformer model that is a core of the feature's implementation. In addition to that, we share our next steps to improve the feature and emphasize the importance",
    "link": "https://arxiv.org/abs/2402.09230",
    "context": "Title: Context Composing for Full Line Code Completion\nAbstract: arXiv:2402.09230v1 Announce Type: cross Abstract: Code Completion is one of the most used Integrated Development Environment (IDE) features, which affects the everyday life of a software developer. Modern code completion approaches moved from the composition of several static analysis-based contributors to pipelines that involve neural networks. This change allows the proposal of longer code suggestions while maintaining the relatively short time spent on generation itself. At JetBrains, we put a lot of effort into perfecting the code completion workflow so it can be both helpful and non-distracting for a programmer. We managed to ship the Full Line Code Completion feature to PyCharm Pro IDE and proved its usefulness in A/B testing on hundreds of real Python users. The paper describes our approach to context composing for the Transformer model that is a core of the feature's implementation. In addition to that, we share our next steps to improve the feature and emphasize the importance",
    "path": "papers/24/02/2402.09230.json",
    "total_tokens": 813,
    "translated_title": "全行代码自动完成的上下文组合",
    "translated_abstract": "代码自动完成是最常用的集成开发环境（IDE）功能之一，它影响着软件开发人员的日常工作。现代代码自动完成方法已从基于静态分析的几个贡献者的组合转向涉及神经网络的流水线。这种改变允许在生成自身所花费的相对短时间内提出更长的代码建议。在JetBrains，我们投入了大量的精力来完善代码自动完成工作流程，以便对程序员既有帮助又不分散注意力。我们成功将全行代码自动完成功能推出到PyCharm Pro IDE，并在数百名真实Python用户的A/B测试中证明了其有用性。本文描述了我们在Transformer模型上下文组合方面的方法，该模型是该功能实现的核心。此外，我们还分享了改进该功能的下一步工作，并强调了其重要性。",
    "tldr": "本论文介绍了用于全行代码自动完成功能的Transformer模型的上下文组合方法，该功能已在PyCharm Pro IDE上得到应用，并在实际的Python用户A/B测试中证明了其有用性。",
    "en_tdlr": "This paper describes the approach to context composing for the Full Line Code Completion feature using the Transformer model, which has been successfully implemented in PyCharm Pro IDE and validated through A/B testing on real Python users."
}