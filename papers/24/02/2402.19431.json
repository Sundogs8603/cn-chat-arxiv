{
    "title": "Compositional API Recommendation for Library-Oriented Code Generation",
    "abstract": "arXiv:2402.19431v1 Announce Type: cross  Abstract: Large language models (LLMs) have achieved exceptional performance in code generation. However, the performance remains unsatisfactory in generating library-oriented code, especially for the libraries not present in the training data of LLMs. Previous work utilizes API recommendation technology to help LLMs use libraries: it retrieves APIs related to the user requirements, then leverages them as context to prompt LLMs. However, developmental requirements can be coarse-grained, requiring a combination of multiple fine-grained APIs. This granularity inconsistency makes API recommendation a challenging task. To address this, we propose CAPIR (Compositional API Recommendation), which adopts a \"divide-and-conquer\" strategy to recommend APIs for coarse-grained requirements. Specifically, CAPIR employs an LLM-based Decomposer to break down a coarse-grained task description into several detailed subtasks. Then, CAPIR applies an embedding-based",
    "link": "https://arxiv.org/abs/2402.19431",
    "context": "Title: Compositional API Recommendation for Library-Oriented Code Generation\nAbstract: arXiv:2402.19431v1 Announce Type: cross  Abstract: Large language models (LLMs) have achieved exceptional performance in code generation. However, the performance remains unsatisfactory in generating library-oriented code, especially for the libraries not present in the training data of LLMs. Previous work utilizes API recommendation technology to help LLMs use libraries: it retrieves APIs related to the user requirements, then leverages them as context to prompt LLMs. However, developmental requirements can be coarse-grained, requiring a combination of multiple fine-grained APIs. This granularity inconsistency makes API recommendation a challenging task. To address this, we propose CAPIR (Compositional API Recommendation), which adopts a \"divide-and-conquer\" strategy to recommend APIs for coarse-grained requirements. Specifically, CAPIR employs an LLM-based Decomposer to break down a coarse-grained task description into several detailed subtasks. Then, CAPIR applies an embedding-based",
    "path": "papers/24/02/2402.19431.json",
    "total_tokens": 830,
    "translated_title": "面向库导向代码生成的组合式API推荐",
    "translated_abstract": "大型语言模型在代码生成方面取得了出色的表现，但在生成面向库的代码方面表现仍不尽如人意，尤其是针对LLM训练数据中不存在的库。先前的工作利用API推荐技术帮助LLMs使用库：它检索与用户需求相关的API，然后将它们作为上下文来提示LLMs。然而，开发需求可能是粗粒度的，需要结合多个细粒度API。这种粒度不一致使API推荐成为一项具有挑战性的任务。为了解决这个问题，我们提出了CAPIR（组合式API推荐），它采用“分而治之”的策略为粗粒度要求推荐API。具体而言，CAPIR采用基于LLM的分解器将粗粒度任务描述分解为几个详细的子任务。然后，CAPIR应用基于嵌入的",
    "tldr": "提出了CAPIR（Compositional API Recommendation）来为粗粒度需求推荐API，并采用“分而治之”的策略将任务描述分解为详细的子任务。",
    "en_tdlr": "Introduced CAPIR (Compositional API Recommendation) to recommend APIs for coarse-grained requirements and adopt a \"divide-and-conquer\" strategy to decompose task descriptions into detailed subtasks."
}