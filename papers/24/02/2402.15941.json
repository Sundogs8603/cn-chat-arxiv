{
    "title": "Implementing Recycling Methods for Linear Systems in Python with an Application to Multiple Objective Optimization",
    "abstract": "arXiv:2402.15941v1 Announce Type: cross  Abstract: Sequences of linear systems arise in the predictor-corrector method when computing the Pareto front for multi-objective optimization. Rather than discarding information generated when solving one system, it may be advantageous to recycle information for subsequent systems. To accomplish this, we seek to reduce the overall cost of computation when solving linear systems using common recycling methods. In this work, we assessed the performance of recycling minimum residual (RMINRES) method along with a map between coefficient matrices. For these methods to be fully integrated into the software used in Enouen et al. (2022), there must be working version of each in both Python and PyTorch. Herein, we discuss the challenges we encountered and solutions undertaken (and some ongoing) when computing efficient Python implementations of these recycling strategies. The goal of this project was to implement RMINRES in Python and PyTorch and add it",
    "link": "https://arxiv.org/abs/2402.15941",
    "context": "Title: Implementing Recycling Methods for Linear Systems in Python with an Application to Multiple Objective Optimization\nAbstract: arXiv:2402.15941v1 Announce Type: cross  Abstract: Sequences of linear systems arise in the predictor-corrector method when computing the Pareto front for multi-objective optimization. Rather than discarding information generated when solving one system, it may be advantageous to recycle information for subsequent systems. To accomplish this, we seek to reduce the overall cost of computation when solving linear systems using common recycling methods. In this work, we assessed the performance of recycling minimum residual (RMINRES) method along with a map between coefficient matrices. For these methods to be fully integrated into the software used in Enouen et al. (2022), there must be working version of each in both Python and PyTorch. Herein, we discuss the challenges we encountered and solutions undertaken (and some ongoing) when computing efficient Python implementations of these recycling strategies. The goal of this project was to implement RMINRES in Python and PyTorch and add it",
    "path": "papers/24/02/2402.15941.json",
    "total_tokens": 811,
    "translated_title": "在Python中实现用于线性系统的回收方法，并应用于多目标优化",
    "translated_abstract": "在计算多目标优化的帕紗图前沿时，线性系统的序列出现在预测校正方法中。与丢弃解决一个系统时生成的信息不同，重新利用这些信息可能对后续系统有利。为了实现这一目标，我们试图通过常见的回收方法来减少解决线性系统时的总计算成本。在这项工作中，我们评估了回收最小残差（RMINRES）方法以及系数矩阵之间的映射的性能。为了将这些方法完全整合到Enouen等人（2022年）使用的软件中，必须在Python和PyTorch中都有每个方法的可用版本。在这里，我们讨论了在计算这些回收策略的高效Python实现时遇到的挑战和解决方案（以及一些正在进行中的）。该项目的目标是在Python和PyTorch中实现RMINRES并将其添加",
    "tldr": "优化多目标优化问题中线性系统的计算效率，实现了RMINRES方法在Python和PyTorch中的应用",
    "en_tdlr": "Efforts were made to optimize the computational efficiency of linear systems in multi-objective optimization by implementing the RMINRES method in Python and PyTorch."
}