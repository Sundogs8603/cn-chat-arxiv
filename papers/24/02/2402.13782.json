{
    "title": "Semirings for Probabilistic and Neuro-Symbolic Logic Programming",
    "abstract": "arXiv:2402.13782v1 Announce Type: new  Abstract: The field of probabilistic logic programming (PLP) focuses on integrating probabilistic models into programming languages based on logic. Over the past 30 years, numerous languages and frameworks have been developed for modeling, inference and learning in probabilistic logic programs. While originally PLP focused on discrete probability, more recent approaches have incorporated continuous distributions as well as neural networks, effectively yielding neural-symbolic methods. We provide a unified algebraic perspective on PLP, showing that many if not most of the extensions of PLP can be cast within a common algebraic logic programming framework, in which facts are labeled with elements of a semiring and disjunction and conjunction are replaced by addition and multiplication. This does not only hold for the PLP variations itself but also for the underlying execution mechanism that is based on (algebraic) model counting.",
    "link": "https://arxiv.org/abs/2402.13782",
    "context": "Title: Semirings for Probabilistic and Neuro-Symbolic Logic Programming\nAbstract: arXiv:2402.13782v1 Announce Type: new  Abstract: The field of probabilistic logic programming (PLP) focuses on integrating probabilistic models into programming languages based on logic. Over the past 30 years, numerous languages and frameworks have been developed for modeling, inference and learning in probabilistic logic programs. While originally PLP focused on discrete probability, more recent approaches have incorporated continuous distributions as well as neural networks, effectively yielding neural-symbolic methods. We provide a unified algebraic perspective on PLP, showing that many if not most of the extensions of PLP can be cast within a common algebraic logic programming framework, in which facts are labeled with elements of a semiring and disjunction and conjunction are replaced by addition and multiplication. This does not only hold for the PLP variations itself but also for the underlying execution mechanism that is based on (algebraic) model counting.",
    "path": "papers/24/02/2402.13782.json",
    "total_tokens": 812,
    "translated_title": "用于概率和神经符号逻辑编程的半环",
    "translated_abstract": "概率逻辑编程(PLP)领域致力于将概率模型集成到基于逻辑的编程语言中。在过去的30年中，已经开发出许多用于在概率逻辑程序中建模、推理和学习的语言和框架。尽管最初PLP专注于离散概率，但更近期的方法已经将连续分布以及神经网络纳入其中，有效地产生了神经符号方法。我们提供了一个统一的代数透视来看待PLP，表明许多PLP的扩展可以在一个共同的代数逻辑编程框架内进行转换，其中事实被标记为半环的元素，而析取和合取被替换为加法和乘法。这不仅适用于PLP的变体本身，也适用于基于(代数)模型计数的基础执行机制。",
    "tldr": "提出了一种用于概率和神经符号逻辑编程的统一代数视角，将许多PLP的扩展都纳入一个共同的代数逻辑编程框架中。",
    "en_tdlr": "Introduced a unified algebraic perspective for probabilistic and neuro-symbolic logic programming, encompassing many extensions of PLP within a common algebraic logic programming framework."
}