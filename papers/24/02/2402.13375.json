{
    "title": "A Strategic Model of Software Dependency Networks",
    "abstract": "arXiv:2402.13375v1 Announce Type: new  Abstract: Modern software development involves collaborative efforts and reuse of existing code, which reduces the cost of developing new software. However, reusing code from existing packages exposes coders to vulnerabilities in these dependencies. We study the formation of dependency networks among software packages and libraries, guided by a structural model of network formation with observable and unobservable heterogeneity. We estimate costs, benefits, and link externalities of the network of 696,790 directed dependencies between 35,473 repositories of the Rust programming language using a novel scalable algorithm. We find evidence of a positive externality exerted on other coders when coders create dependencies. Furthermore, we show that coders are likely to link to more popular packages of the same software type but less popular packages of other types. We adopt models for the spread of infectious diseases to measure a package's systemicnes",
    "link": "https://arxiv.org/abs/2402.13375",
    "context": "Title: A Strategic Model of Software Dependency Networks\nAbstract: arXiv:2402.13375v1 Announce Type: new  Abstract: Modern software development involves collaborative efforts and reuse of existing code, which reduces the cost of developing new software. However, reusing code from existing packages exposes coders to vulnerabilities in these dependencies. We study the formation of dependency networks among software packages and libraries, guided by a structural model of network formation with observable and unobservable heterogeneity. We estimate costs, benefits, and link externalities of the network of 696,790 directed dependencies between 35,473 repositories of the Rust programming language using a novel scalable algorithm. We find evidence of a positive externality exerted on other coders when coders create dependencies. Furthermore, we show that coders are likely to link to more popular packages of the same software type but less popular packages of other types. We adopt models for the spread of infectious diseases to measure a package's systemicnes",
    "path": "papers/24/02/2402.13375.json",
    "total_tokens": 878,
    "translated_title": "软件依赖网络的战略模型",
    "translated_abstract": "现代软件开发涉及协作努力和重用现有代码，这降低了开发新软件的成本。然而，从现有包中重用代码会使程序员暴露于这些依赖关系的漏洞中。我们研究了软件包和库之间依赖网络的形成，该研究由一个具有可观察和不可观察异质性的网络形成结构模型指导。我们使用一种新颖的可扩展算法估算了 Rust 编程语言的 35,473 个代码库之间的 696,790 个有向依赖关系网络的成本、利益和链接外部性。我们发现，当程序员创建依赖关系时，会对其他程序员产生正的外部性作用。此外，我们展示了程序员倾向于链接到相同软件类型的更受欢迎的包，但链接到其他类型的不太受欢迎的包。我们采用传染病传播模型来衡量一个软件包的系统程度。",
    "tldr": "通过研究软件包和库之间的依赖网络形成，发现程序员创建依赖时对其他程序员具有正的外部性作用，且倾向于链接到相同软件类型的热门包，但链接到其他类型的不太热门包。"
}