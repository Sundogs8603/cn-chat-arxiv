{
    "title": "Enhancing LLM-Based Coding Tools through Native Integration of IDE-Derived Static Context",
    "abstract": "Large Language Models (LLMs) have achieved remarkable success in code completion, as evidenced by their essential roles in developing code assistant services such as Copilot. Being trained on in-file contexts, current LLMs are quite effective in completing code for single source files. However, it is challenging for them to conduct repository-level code completion for large software projects that require cross-file information. Existing research on LLM-based repository-level code completion identifies and integrates cross-file contexts, but it suffers from low accuracy and limited context length of LLMs. In this paper, we argue that Integrated Development Environments (IDEs) can provide direct, accurate and real-time cross-file information for repository-level code completion. We propose IDECoder, a practical framework that leverages IDE native static contexts for cross-context construction and diagnosis results for self-refinement. IDECoder utilizes the rich cross-context information ",
    "link": "https://arxiv.org/abs/2402.03630",
    "context": "Title: Enhancing LLM-Based Coding Tools through Native Integration of IDE-Derived Static Context\nAbstract: Large Language Models (LLMs) have achieved remarkable success in code completion, as evidenced by their essential roles in developing code assistant services such as Copilot. Being trained on in-file contexts, current LLMs are quite effective in completing code for single source files. However, it is challenging for them to conduct repository-level code completion for large software projects that require cross-file information. Existing research on LLM-based repository-level code completion identifies and integrates cross-file contexts, but it suffers from low accuracy and limited context length of LLMs. In this paper, we argue that Integrated Development Environments (IDEs) can provide direct, accurate and real-time cross-file information for repository-level code completion. We propose IDECoder, a practical framework that leverages IDE native static contexts for cross-context construction and diagnosis results for self-refinement. IDECoder utilizes the rich cross-context information ",
    "path": "papers/24/02/2402.03630.json",
    "total_tokens": 835,
    "translated_title": "通过IDE派生的静态上下文的本地集成增强LLM-Based编码工具",
    "translated_abstract": "大型语言模型(LLM)在代码完成方面取得了显著成就，如Copilot等代码助手服务的重要作用所证明。目前的LLM通过对文件上下文的训练，在单个源文件的代码完成方面非常有效。然而，对于需要跨文件信息的大型软件项目的存储库级代码完成，对它们来说是具有挑战性的。现有的基于LLM的存储库级代码完成研究识别和整合跨文件上下文，但因LLM的精度低和上下文长度有限而受到限制。本文认为集成开发环境(IDE)可以为存储库级代码完成提供直接、准确和实时的跨文件信息。我们提出了IDECoder，一个实际的框架，利用IDE的本地静态上下文进行跨上下文构建和自我完善的诊断结果。IDECoder利用丰富的跨上下文信息来...",
    "tldr": "通过IDE的本地集成，我们提出了IDECoder框架，利用IDE提供的准确和实时的跨文件信息来增强LLM-Based编码工具，解决了挑战性的跨文件上下文问题。"
}