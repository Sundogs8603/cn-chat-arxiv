{
    "title": "SwissNYF: Tool Grounded LLM Agents for Black Box Setting",
    "abstract": "arXiv:2402.10051v1 Announce Type: new  Abstract: While Large Language Models (LLMs) have demonstrated enhanced capabilities in function-calling, these advancements primarily rely on accessing the functions' responses. This methodology is practical for simpler APIs but faces scalability issues with irreversible APIs that significantly impact the system, such as a database deletion API. Similarly, processes requiring extensive time for each API call and those necessitating forward planning, like automated action pipelines, present complex challenges. Furthermore, scenarios often arise where a generalized approach is needed because algorithms lack direct access to the specific implementations of these functions or secrets to use them. Traditional tool planning methods are inadequate in these cases, compelling the need to operate within black-box environments. Unlike their performance in tool manipulation, LLMs excel in black-box tasks, such as program synthesis. Therefore, we harness the ",
    "link": "https://arxiv.org/abs/2402.10051",
    "context": "Title: SwissNYF: Tool Grounded LLM Agents for Black Box Setting\nAbstract: arXiv:2402.10051v1 Announce Type: new  Abstract: While Large Language Models (LLMs) have demonstrated enhanced capabilities in function-calling, these advancements primarily rely on accessing the functions' responses. This methodology is practical for simpler APIs but faces scalability issues with irreversible APIs that significantly impact the system, such as a database deletion API. Similarly, processes requiring extensive time for each API call and those necessitating forward planning, like automated action pipelines, present complex challenges. Furthermore, scenarios often arise where a generalized approach is needed because algorithms lack direct access to the specific implementations of these functions or secrets to use them. Traditional tool planning methods are inadequate in these cases, compelling the need to operate within black-box environments. Unlike their performance in tool manipulation, LLMs excel in black-box tasks, such as program synthesis. Therefore, we harness the ",
    "path": "papers/24/02/2402.10051.json",
    "total_tokens": 817,
    "translated_title": "SwissNYF：基于黑盒环境的基于LLM的工具生成智能体",
    "translated_abstract": "在访问函数的返回结果上，大型语言模型（LLM）已经展示了增强的功能调用能力，但这种方法在简单API上是实用的，但对于不可逆API（例如数据库删除API）会面临可扩展性问题。同样，对于每个API调用需要大量时间的流程以及需要前向规划的自动化操作管道等都存在复杂的挑战。此外，通常出现的情况是需要一种通用的方法，因为算法缺乏对这些函数的特定实现或使用它们的秘密的直接访问方式。在这些情况下，传统的工具规划方法是不合适的，因此需要在黑盒环境中运行。与在工具操作中的表现不同，LLM在黑盒任务（例如程序综合）中表现出色。因此，我们利用LLM来生成基于黑盒环境的智能体。",
    "tldr": "该论文提出了一种基于黑盒环境的基于LLM的工具生成智能体的方法，在复杂的API调用中表现出了优越的性能，可以应对具有不可逆性和大量时间消耗的任务。",
    "en_tdlr": "This paper proposes a method for generating LLM-based agent in black-box environments, which performs well in complex API calls with irreversible actions and high time consumption."
}