{
    "title": "Language Models as Compilers: Simulating Pseudocode Execution Improves Algorithmic Reasoning in Language Models",
    "abstract": "arXiv:2404.02575v1 Announce Type: new  Abstract: Algorithmic reasoning refers to the ability to understand the complex patterns behind the problem and decompose them into a sequence of reasoning steps towards the solution. Such nature of algorithmic reasoning makes it a challenge for large language models (LLMs), even though they have demonstrated promising performance in other reasoning tasks. Within this context, some recent studies use programming languages (e.g., Python) to express the necessary logic for solving a given instance/question (e.g., Program-of-Thought) as inspired by their strict and precise syntaxes. However, it is non-trivial to write an executable code that expresses the correct logic on the fly within a single inference call. Also, the code generated specifically for an instance cannot be reused for others, even if they are from the same task and might require identical logic to solve. This paper presents Think-and-Execute, a novel framework that decomposes the rea",
    "link": "https://arxiv.org/abs/2404.02575",
    "context": "Title: Language Models as Compilers: Simulating Pseudocode Execution Improves Algorithmic Reasoning in Language Models\nAbstract: arXiv:2404.02575v1 Announce Type: new  Abstract: Algorithmic reasoning refers to the ability to understand the complex patterns behind the problem and decompose them into a sequence of reasoning steps towards the solution. Such nature of algorithmic reasoning makes it a challenge for large language models (LLMs), even though they have demonstrated promising performance in other reasoning tasks. Within this context, some recent studies use programming languages (e.g., Python) to express the necessary logic for solving a given instance/question (e.g., Program-of-Thought) as inspired by their strict and precise syntaxes. However, it is non-trivial to write an executable code that expresses the correct logic on the fly within a single inference call. Also, the code generated specifically for an instance cannot be reused for others, even if they are from the same task and might require identical logic to solve. This paper presents Think-and-Execute, a novel framework that decomposes the rea",
    "path": "papers/24/04/2404.02575.json",
    "total_tokens": 834,
    "translated_title": "语言模型作为编译器：模拟伪代码执行改进语言模型中的算法推理",
    "translated_abstract": "算法推理指的是理解问题背后复杂模式并将其分解为通往解决方案的一系列推理步骤的能力。算法推理的这种性质使得大型语言模型(LLMs)面临挑战，尽管它们在其他推理任务中表现出色。最近的一些研究使用编程语言（例如Python）来表达解决给定实例/问题所需逻辑的方式，这受到其严格和精确的语法启发。然而，在单个推理调用中编写表达正确逻辑的可执行代码并非易事。此外，为一个实例专门生成的代码无法重用于其他实例，即使它们来自相同的任务并可能需要相同的逻辑来解决。本文介绍了Think-and-Execute，这是一个新颖的框架，将推理和执行进行了分解。",
    "tldr": "这项研究提出了Think-and-Execute框架，将算法推理任务中的思考和执行精细分解，从而改进了大型语言模型的算法推理能力。",
    "en_tdlr": "This study introduces the Think-and-Execute framework, which finely decomposes the thinking and execution in algorithmic reasoning tasks, thereby improving the algorithmic reasoning ability of large language models."
}