{
    "title": "Call Graph Evolution Analytics over a Version Series of an Evolving Software System. (arXiv:2210.08316v1 [cs.SE] CROSS LISTED)",
    "abstract": "Call Graph evolution analytics can aid a software engineer when maintaining or evolving a software system. This paper proposes Call Graph Evolution Analytics to extract information from an evolving call graph ECG = CG_1, CG_2,... CG_N for their version series VS = V_1, V_2, ... V_N of an evolving software system. This is done using Call Graph Evolution Rules (CGERs) and Call Graph Evolution Subgraphs (CGESs). Similar to association rule mining, the CGERs are used to capture co-occurrences of dependencies in the system. Like subgraph patterns in a call graph, the CGESs are used to capture evolution of dependency patterns in evolving call graphs. Call graph analytics on the evolution in these patterns can identify potentially affected dependencies (or procedure calls) that need attention. The experiments are done on the evolving call graphs of 10 large evolving systems to support dependency evolution management. We also consider results from a detailed study for evolving call graphs of M",
    "link": "http://arxiv.org/abs/2210.08316",
    "context": "Title: Call Graph Evolution Analytics over a Version Series of an Evolving Software System. (arXiv:2210.08316v1 [cs.SE] CROSS LISTED)\nAbstract: Call Graph evolution analytics can aid a software engineer when maintaining or evolving a software system. This paper proposes Call Graph Evolution Analytics to extract information from an evolving call graph ECG = CG_1, CG_2,... CG_N for their version series VS = V_1, V_2, ... V_N of an evolving software system. This is done using Call Graph Evolution Rules (CGERs) and Call Graph Evolution Subgraphs (CGESs). Similar to association rule mining, the CGERs are used to capture co-occurrences of dependencies in the system. Like subgraph patterns in a call graph, the CGESs are used to capture evolution of dependency patterns in evolving call graphs. Call graph analytics on the evolution in these patterns can identify potentially affected dependencies (or procedure calls) that need attention. The experiments are done on the evolving call graphs of 10 large evolving systems to support dependency evolution management. We also consider results from a detailed study for evolving call graphs of M",
    "path": "papers/22/10/2210.08316.json",
    "total_tokens": 879,
    "translated_title": "一种软件系统版本序列上的调用图演化分析方法",
    "translated_abstract": "调用图演化分析可以帮助软件工程师在维护或演进软件系统时进行更好的决策。该论文提出了一种Call Graph Evolution Analytics的方法，用于从软件系统版本序列 VS = V_1, V_2, … V_N 的演化调用图 ECG = CG_1, CG_2, … CG_N 中提取信息。这是通过使用Call Graph Evolution Rules（CGERs）和Call Graph Evolution Subgraphs（CGESs）完成的。类似于关联规则挖掘，CGERs用于捕获系统中依赖关系的共现。与调用图中的子图模式类似，CGESs用于捕获演化调用图中的依赖关系模式的演化。对这些模式的演化进行调用图分析可以识别出需要关注的潜在受影响的依赖关系（或过程调用）。",
    "tldr": "该论文提出了一种Call Graph Evolution Analytics的方法，用于从软件系统版本序列的演化调用图中提取信息，通过分析演化调用图的依赖关系模式的演化，帮助软件工程师进行版本演化管理。",
    "en_tdlr": "This paper proposes a method called Call Graph Evolution Analytics to extract information from an evolving call graph of software system versions, which can help software engineers manage version evolution by analyzing the evolution of dependency patterns in the call graph."
}