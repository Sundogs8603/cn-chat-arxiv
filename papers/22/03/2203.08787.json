{
    "title": "Exploring Variational Graph Auto-Encoders for Extract Class Refactoring Recommendation. (arXiv:2203.08787v2 [cs.SE] UPDATED)",
    "abstract": "The code smell is a sign of design and development flaws in a software system that reduces the reusability and maintainability of the system. Refactoring is done as an ongoing practice to remove the code smell from the program code. Among different code smells, the God class or Blob is one of the most common code smells. A god class contains too many responsibilities, violating object-oriented programming design's low coupling and high cohesiveness principles. This paper proposes an automatic approach to extracting a God class into multiple smaller classes with more specific responsibilities. To do this, we first construct a graph of methods (as nodes) for the concerning god class. The edge between any two methods is determined by their structural similarity, and the feature for each method is initialized using different semantic representation methods. Then, the variational graph auto-encoder is used to learn a vector representation for each method. Finally, the learned vectors are us",
    "link": "http://arxiv.org/abs/2203.08787",
    "context": "Title: Exploring Variational Graph Auto-Encoders for Extract Class Refactoring Recommendation. (arXiv:2203.08787v2 [cs.SE] UPDATED)\nAbstract: The code smell is a sign of design and development flaws in a software system that reduces the reusability and maintainability of the system. Refactoring is done as an ongoing practice to remove the code smell from the program code. Among different code smells, the God class or Blob is one of the most common code smells. A god class contains too many responsibilities, violating object-oriented programming design's low coupling and high cohesiveness principles. This paper proposes an automatic approach to extracting a God class into multiple smaller classes with more specific responsibilities. To do this, we first construct a graph of methods (as nodes) for the concerning god class. The edge between any two methods is determined by their structural similarity, and the feature for each method is initialized using different semantic representation methods. Then, the variational graph auto-encoder is used to learn a vector representation for each method. Finally, the learned vectors are us",
    "path": "papers/22/03/2203.08787.json",
    "total_tokens": 935,
    "translated_title": "探究变分图自编码器用于提取分类重构建议",
    "translated_abstract": "代码异味是软件系统中设计和开发缺陷的标志，会降低系统的可重用性和可维护性。重构是一种持续进行的实践，用于从程序代码中去除代码异味。在不同的代码异味中，上帝类或Blob是最常见的代码异味之一。上帝类包含许多职责，违反了面向对象程序设计的低耦合和高内聚原则。本文提出了一种自动提取上帝类为多个较小类的方法，以更具体的职责。为此，我们首先构造了一个有关上帝类的方法图（作为节点）。任何两种方法之间的边缘由它们的结构相似性决定，并使用不同的语义表示方法初始化每种方法的特征。然后，使用变分图自编码器为每个方法学习向量表示。最后，利用学到的向量将方法聚类到较小的类别中。该方法在五个开源项目上进行了评估，结果表明该方法在将上帝类提取为更具体职责的较小类别方面有效。",
    "tldr": "本文提出了一种利用变分图自编码器自动将上帝类提取为更具体职责的较小类别的方法，在五个开源项目上评估后结果表明有效。",
    "en_tdlr": "This paper proposes an automatic approach to extract god classes into smaller classes with more specific responsibilities, utilizing variational graph auto-encoder. The effectiveness of the approach is demonstrated through evaluation on five open-source projects."
}