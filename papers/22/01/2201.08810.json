{
    "title": "GAP-Gen: Guided Automatic Python Code Generation. (arXiv:2201.08810v2 [cs.PL] UPDATED)",
    "abstract": "Automatic code generation from natural language descriptions can be highly beneficial during the process of software development. In this work, we propose GAP-Gen, a Guided Automatic Python Code Generation method based on Python syntactic constraints and semantic constraints. We first introduce Python syntactic constraints in the form of Syntax-Flow, which is a simplified version of Abstract Syntax Tree (AST) reducing the size and high complexity of Abstract Syntax Tree but maintaining crucial syntactic information of Python code. In addition to Syntax-Flow, we introduce Variable-Flow which abstracts variable and function names consistently through out the code. In our work, rather than pretraining, we focus on modifying the finetuning process which reduces computational requirements but retains high generation performance on automatic Python code generation task. GAP-Gen fine-tunes the transformer based language models T5 and CodeT5 using the Code-to-Docstring datasets CodeSearchNet, ",
    "link": "http://arxiv.org/abs/2201.08810",
    "context": "Title: GAP-Gen: Guided Automatic Python Code Generation. (arXiv:2201.08810v2 [cs.PL] UPDATED)\nAbstract: Automatic code generation from natural language descriptions can be highly beneficial during the process of software development. In this work, we propose GAP-Gen, a Guided Automatic Python Code Generation method based on Python syntactic constraints and semantic constraints. We first introduce Python syntactic constraints in the form of Syntax-Flow, which is a simplified version of Abstract Syntax Tree (AST) reducing the size and high complexity of Abstract Syntax Tree but maintaining crucial syntactic information of Python code. In addition to Syntax-Flow, we introduce Variable-Flow which abstracts variable and function names consistently through out the code. In our work, rather than pretraining, we focus on modifying the finetuning process which reduces computational requirements but retains high generation performance on automatic Python code generation task. GAP-Gen fine-tunes the transformer based language models T5 and CodeT5 using the Code-to-Docstring datasets CodeSearchNet, ",
    "path": "papers/22/01/2201.08810.json",
    "total_tokens": 840,
    "translated_title": "GAP-Gen: 引导自动生成 Python 代码的方法",
    "translated_abstract": "自然语言描述自动生成代码在软件开发过程中非常有助于提高效率。本文提出了一种基于 Python 语法约束和语义约束的引导自动生成 Python 代码的方法 GAP-Gen。我们首先介绍了 Syntax-Flow，这是一种简化的抽象语法树（AST）形式的 Python 语法约束，并且在代码中保留了关键的语法信息，从而减小了抽象语法树的规模和复杂性。除了 Syntax-Flow，我们还介绍了 Variable-Flow，它能够在整个代码中一致地抽象变量和函数名。我们的工作重点不是在预训练上，而是在修改微调过程，从而减少计算需求，但在自动生成 Python 代码任务上保持高生成性能。 GAP-Gen 使用 T5 和 CodeT5 这两种基于 transformer 的语言模型，通过 CodeSearchNet 数据集进行微调。",
    "tldr": "本文介绍了一种基于 Python 语法约束和语义约束的引导自动生成 Python 代码的方法 GAP-Gen，通过微调 T5 和 CodeT5 这两种语言模型，在自动生成 Python 代码任务上保持了高生成性能。",
    "en_tdlr": "This paper introduces a Guided Automatic Python Code Generation method, GAP-Gen, based on Python syntactic and semantic constraints, which fine-tunes T5 and CodeT5 language models and achieves high generation performance on automatic Python code generation task without pretraining."
}