{
    "title": "PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Library for Linear and Integer Programming. (arXiv:2206.14234v2 [math.OC] UPDATED)",
    "abstract": "In deterministic optimization, it is typically assumed that all problem parameters are fixed and known. In practice, however, some parameters may be a priori unknown but can be estimated from historical data. A typical predict-then-optimize approach separates predictions and optimization into two stages. Recently, end-to-end predict-then-optimize has become an attractive alternative. In this work, we present the PyEPO package, a PyTorchbased end-to-end predict-then-optimize library in Python. To the best of our knowledge, PyEPO (pronounced like pineapple with a silent \"n\") is the first such generic tool for linear and integer programming with predicted objective function coefficients. It provides four base algorithms: a convex surrogate loss function from the seminal work of Elmachtoub and Grigas [16], a differentiable black-box solver approach of Pogancic et al. [35], and two differentiable perturbation-based methods from Berthet et al. [6]. PyEPO provides a simple interface for the d",
    "link": "http://arxiv.org/abs/2206.14234",
    "context": "Title: PyEPO: A PyTorch-based End-to-End Predict-then-Optimize Library for Linear and Integer Programming. (arXiv:2206.14234v2 [math.OC] UPDATED)\nAbstract: In deterministic optimization, it is typically assumed that all problem parameters are fixed and known. In practice, however, some parameters may be a priori unknown but can be estimated from historical data. A typical predict-then-optimize approach separates predictions and optimization into two stages. Recently, end-to-end predict-then-optimize has become an attractive alternative. In this work, we present the PyEPO package, a PyTorchbased end-to-end predict-then-optimize library in Python. To the best of our knowledge, PyEPO (pronounced like pineapple with a silent \"n\") is the first such generic tool for linear and integer programming with predicted objective function coefficients. It provides four base algorithms: a convex surrogate loss function from the seminal work of Elmachtoub and Grigas [16], a differentiable black-box solver approach of Pogancic et al. [35], and two differentiable perturbation-based methods from Berthet et al. [6]. PyEPO provides a simple interface for the d",
    "path": "papers/22/06/2206.14234.json",
    "total_tokens": 976,
    "translated_title": "PyEPO: 一种基于PyTorch的端到端预测优化库，适用于线性规划和整数规划",
    "translated_abstract": "在确定性优化中，通常假定所有问题参数都是固定和已知的。然而，在实践中，一些参数可能是先验未知的，但可以从历史数据中估计出来。一种典型的预测优化方法将预测和优化分为两个阶段。最近，端到端预测优化已成为一种有吸引力的替代方案。在本文中，我们介绍了PyEPO包，这是一个基于PyTorch的端到端预测优化库。据我们所知，PyEPO（发音类似于带有一个“n”的菠萝）是第一个具有预测目标函数系数的一般性线性和整数规划工具。它提供了四种基本算法：Elmachtoub和Grigas的半凸估计函数、Pogancic等人的可微黑盒求解器方法、以及Berthet等人的两种可微扰动方法。PyEPO为使用的算法提供了简单的接口。",
    "tldr": "PyEPO是一种针对线性规划和整数规划的基于PyTorch的端到端预测优化库，提供了一种新的方法来解决历史数据中存在先验未知参数的问题。它是具有预测目标函数系数的一般性构架，并提供了四种基本算法。",
    "en_tdlr": "PyEPO is an end-to-end predict-then-optimize library in Python, based on PyTorch, for linear and integer programming. It offers a new approach to solving problems when some parameters are a priori unknown but can be estimated from historical data. PyEPO is a generic tool with predicted objective function coefficients and provides four base algorithms."
}