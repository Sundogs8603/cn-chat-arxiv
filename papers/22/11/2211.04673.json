{
    "title": "Syntax-Aware On-the-Fly Code Completion. (arXiv:2211.04673v2 [cs.SE] UPDATED)",
    "abstract": "Code completion aims to help improve developers' productivity by suggesting the next code tokens from a given context. Various approaches have been proposed to incorporate abstract syntax tree (AST) information for model training, ensuring that code completion is aware of the syntax of the programming languages. However, existing syntax-aware code completion approaches are not on-the-fly, as we found that for every two-thirds of characters that developers type, AST fails to be extracted because it requires the syntactically correct source code, limiting its practicality in real-world scenarios. On the other hand, existing on-the-fly code completion does not consider syntactic information yet. In this paper, we propose PyCoder to leverage token types, a kind of lightweight syntactic information, which is readily available and aligns with the natural order of source code. Our PyCoder is trained in a multi-task training manner so that by learning the supporting task of predicting token ty",
    "link": "http://arxiv.org/abs/2211.04673",
    "context": "Title: Syntax-Aware On-the-Fly Code Completion. (arXiv:2211.04673v2 [cs.SE] UPDATED)\nAbstract: Code completion aims to help improve developers' productivity by suggesting the next code tokens from a given context. Various approaches have been proposed to incorporate abstract syntax tree (AST) information for model training, ensuring that code completion is aware of the syntax of the programming languages. However, existing syntax-aware code completion approaches are not on-the-fly, as we found that for every two-thirds of characters that developers type, AST fails to be extracted because it requires the syntactically correct source code, limiting its practicality in real-world scenarios. On the other hand, existing on-the-fly code completion does not consider syntactic information yet. In this paper, we propose PyCoder to leverage token types, a kind of lightweight syntactic information, which is readily available and aligns with the natural order of source code. Our PyCoder is trained in a multi-task training manner so that by learning the supporting task of predicting token ty",
    "path": "papers/22/11/2211.04673.json",
    "total_tokens": 1096,
    "translated_title": "语法感知的即时代码自动补全",
    "translated_abstract": "代码自动补全旨在通过从给定上下文推荐下一个代码标记来提高开发人员的生产力。为了进行模型训练，已经提出了各种方法来融合抽象语法树（AST）信息，从而确保代码自动补全能够意识到编程语言的语法。然而，现有的语法感知代码自动补全方法并非即时，因为我们发现，在每个开发人员输入的三分之二的字符中，AST无法提取，因为它需要符合语法正确的源代码，从而限制了其在实际场景中的实用性。另一方面，现有的即时代码自动补全不考虑语法信息。在本文中，我们提出 PyCoder 来利用令人满意的轻量级的语法信息——标记类型，该信息已经可用并且与源代码的自然顺序对齐。我们的 PyCoder 是通过多任务训练的方式进行训练的，因此通过学习预测标记类型序列的支持任务，它可以提高代码自动补全中预测下一个标记的性能。实验结果表明，PyCoder 在不考虑语法信息的最先进即时代码自动补全方法方面显著优于现有方法，同时与无法即时工作的语法感知代码自动补全方法相竞争。",
    "tldr": "本文介绍了一种有关语法感知的即时代码自动补全方法 PyCoder，通过利用轻量级的语法信息（标记类型），它插入了支持任务来提高代码自动补全的性能，在不考虑语法信息的最先进即时代码自动补全方法中表现显著优于现有方法，同时与无法即时工作的语法感知代码自动补全方法相竞争。",
    "en_tdlr": "This paper proposes an on-the-fly code completion method PyCoder that leverages lightweight syntactic information (token types) and inserts supporting tasks to improve performance, which outperforms existing on-the-fly code completion methods without considering syntax information and is competitive with syntax-aware code completion methods that cannot work on-the-fly."
}