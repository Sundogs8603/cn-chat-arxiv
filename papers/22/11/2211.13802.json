{
    "title": "Sequential Gradient Coding For Straggler Mitigation. (arXiv:2211.13802v2 [cs.LG] UPDATED)",
    "abstract": "In distributed computing, slower nodes (stragglers) usually become a bottleneck. Gradient Coding (GC), introduced by Tandon et al., is an efficient technique that uses principles of error-correcting codes to distribute gradient computation in the presence of stragglers. In this paper, we consider the distributed computation of a sequence of gradients $\\{g(1),g(2),\\ldots,g(J)\\}$, where processing of each gradient $g(t)$ starts in round-$t$ and finishes by round-$(t+T)$. Here $T\\geq 0$ denotes a delay parameter. For the GC scheme, coding is only across computing nodes and this results in a solution where $T=0$. On the other hand, having $T>0$ allows for designing schemes which exploit the temporal dimension as well. In this work, we propose two schemes that demonstrate improved performance compared to GC. Our first scheme combines GC with selective repetition of previously unfinished tasks and achieves improved straggler mitigation. In our second scheme, which constitutes our main contri",
    "link": "http://arxiv.org/abs/2211.13802",
    "context": "Title: Sequential Gradient Coding For Straggler Mitigation. (arXiv:2211.13802v2 [cs.LG] UPDATED)\nAbstract: In distributed computing, slower nodes (stragglers) usually become a bottleneck. Gradient Coding (GC), introduced by Tandon et al., is an efficient technique that uses principles of error-correcting codes to distribute gradient computation in the presence of stragglers. In this paper, we consider the distributed computation of a sequence of gradients $\\{g(1),g(2),\\ldots,g(J)\\}$, where processing of each gradient $g(t)$ starts in round-$t$ and finishes by round-$(t+T)$. Here $T\\geq 0$ denotes a delay parameter. For the GC scheme, coding is only across computing nodes and this results in a solution where $T=0$. On the other hand, having $T>0$ allows for designing schemes which exploit the temporal dimension as well. In this work, we propose two schemes that demonstrate improved performance compared to GC. Our first scheme combines GC with selective repetition of previously unfinished tasks and achieves improved straggler mitigation. In our second scheme, which constitutes our main contri",
    "path": "papers/22/11/2211.13802.json",
    "total_tokens": 850,
    "translated_title": "用于减轻慢节点影响力的顺序梯度编码",
    "translated_abstract": "在分布式计算中，慢节点（即拖拉机）通常成为瓶颈。Tandon等人提出的梯度编码（GC）是一种利用纠错码原理在拖车存在的情况下分布梯度计算的有效技术。本文考虑计算一个梯度序列$\\{g(1),g(2),\\ldots,g(J)\\}$的分布式计算，其中每个梯度$g(t)$的处理从第$t$轮开始，到第$(t+T)$轮结束。这里$T\\geq 0$表示一个延迟参数。对于GC方案，编码仅在计算节点之间进行，导致$T=0$的解。然而，$T>0$允许设计利用时间维度的方案。在本文中，我们提出了两种方案，相比于GC，性能得到了改进。我们的第一个方案将GC与选择性重复之前未完成的任务相结合，实现了改进的拖车减轻。在我们的第二个方案中，构成了我们的主要创新。",
    "tldr": "本文介绍了两种方案，结合了梯度编码和选择性重复任务，实现了更好的拖车减轻性能。"
}