{
    "title": "Online 2-stage Stable Matching. (arXiv:2207.02057v2 [cs.DS] UPDATED)",
    "abstract": "We focus on an online 2-stage problem, motivated by the following situation: consider a system where students shall be assigned to universities. There is a first round where some students apply, and a first (stable) matching $M_1$ has to be computed. However, some students may decide to leave the system (change their plan, go to a foreign university, or to some institution not in the system). Then, in a second round (after these deletions), we shall compute a second (final) stable matching $M_2$. As it is undesirable to change assignments, the goal is to minimize the number of divorces/modifications between the two stable matchings $M_1$ and $M_2$. Then, how should we choose $M_1$ and $M_2$? We show that there is an {\\it optimal online} algorithm to solve this problem. In particular, thanks to a dominance property, we show that we can optimally compute $M_1$ without knowing the students that will leave the system. We generalize the result to some other possible modifications in the inp",
    "link": "http://arxiv.org/abs/2207.02057",
    "context": "Title: Online 2-stage Stable Matching. (arXiv:2207.02057v2 [cs.DS] UPDATED)\nAbstract: We focus on an online 2-stage problem, motivated by the following situation: consider a system where students shall be assigned to universities. There is a first round where some students apply, and a first (stable) matching $M_1$ has to be computed. However, some students may decide to leave the system (change their plan, go to a foreign university, or to some institution not in the system). Then, in a second round (after these deletions), we shall compute a second (final) stable matching $M_2$. As it is undesirable to change assignments, the goal is to minimize the number of divorces/modifications between the two stable matchings $M_1$ and $M_2$. Then, how should we choose $M_1$ and $M_2$? We show that there is an {\\it optimal online} algorithm to solve this problem. In particular, thanks to a dominance property, we show that we can optimally compute $M_1$ without knowing the students that will leave the system. We generalize the result to some other possible modifications in the inp",
    "path": "papers/22/07/2207.02057.json",
    "total_tokens": 870,
    "translated_title": "在线2阶段稳定匹配",
    "translated_abstract": "我们关注一个在线2阶段问题，由以下情况激发：考虑一个学生被分配到大学的系统。有第一轮申请，需要计算第一个稳定匹配$M_1$。然而，有些学生可能会决定离开这个系统（改变计划，去外国大学，或者去一些不在系统中的机构）。然后，在第二轮（在这些删除之后），我们应该计算第二个（最终）稳定匹配$M_2$。由于改变分配是不可取的，目标是将两个稳定的匹配$M_1$和$M_2$之间的离婚/修改次数最小化。那么，我们应该如何选择$M_1$和$M_2$？我们展示了有一个最佳的在线算法来解决这个问题。特别是，我们通过支配性质展示了即使不知道离开系统的学生，我们仍然可以最优地计算出$M_1$。我们将结果推广到输入数据中可能的其他一些修改中。",
    "tldr": "该论文研究了一个在线2阶段的稳定匹配问题，提出了能够最优解决该问题的算法。",
    "en_tdlr": "This paper studies an online 2-stage stable matching problem, and proposes an optimal algorithm to solve it."
}