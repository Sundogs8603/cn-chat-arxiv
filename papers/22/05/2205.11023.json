{
    "title": "AdaptivePaste: Code Adaptation through Learning Semantics-aware Variable Usage Representations. (arXiv:2205.11023v3 [cs.SE] UPDATED)",
    "abstract": "In software development, it is common for programmers to copy-paste or port code snippets and then adapt them to their use case. This scenario motivates the code adaptation task -- a variant of program repair which aims to adapt variable identifiers in a pasted snippet of code to the surrounding, preexisting source code. However, no existing approach has been shown to effectively address this task. In this paper, we introduce AdaptivePaste, a learning-based approach to source code adaptation, based on transformers and a dedicated dataflow-aware deobfuscation pre-training task to learn meaningful representations of variable usage patterns. We evaluate AdaptivePaste on a dataset of code snippets in Python. Results suggest that our model can learn to adapt source code with 79.8% accuracy. To evaluate how valuable is AdaptivePaste in practice, we perform a user study with 10 Python developers on a hundred real-world copy-paste instances. The results show that AdaptivePaste reduces the dwel",
    "link": "http://arxiv.org/abs/2205.11023",
    "context": "Title: AdaptivePaste: Code Adaptation through Learning Semantics-aware Variable Usage Representations. (arXiv:2205.11023v3 [cs.SE] UPDATED)\nAbstract: In software development, it is common for programmers to copy-paste or port code snippets and then adapt them to their use case. This scenario motivates the code adaptation task -- a variant of program repair which aims to adapt variable identifiers in a pasted snippet of code to the surrounding, preexisting source code. However, no existing approach has been shown to effectively address this task. In this paper, we introduce AdaptivePaste, a learning-based approach to source code adaptation, based on transformers and a dedicated dataflow-aware deobfuscation pre-training task to learn meaningful representations of variable usage patterns. We evaluate AdaptivePaste on a dataset of code snippets in Python. Results suggest that our model can learn to adapt source code with 79.8% accuracy. To evaluate how valuable is AdaptivePaste in practice, we perform a user study with 10 Python developers on a hundred real-world copy-paste instances. The results show that AdaptivePaste reduces the dwel",
    "path": "papers/22/05/2205.11023.json",
    "total_tokens": 922,
    "translated_title": "AdaptivePaste: 通过学习语义感知变量使用表示进行代码适应",
    "translated_abstract": "在软件开发中，程序员常常会复制粘贴或移植代码片段，然后根据自己的使用情况进行调整。这种情况促使了代码适应任务——一种程序修复的变体，旨在将粘贴的代码片段中的变量标识符适应到周围已存在的源代码中。然而，目前没有已知的方法能够有效地解决这个任务。在本文中，我们介绍了一种基于变压器和专门的数据流感知去混淆预训练任务的学习型源代码适应方法——AdaptivePaste，它能够学习变量使用模式的有意义表示。我们在一个Python代码片段数据集上评估了AdaptivePaste的性能。结果表明，我们的模型能够以79.8%的准确率适应源代码。为了评估AdaptivePaste在实践中的价值，我们对10名Python开发者进行了一项用户研究，涉及了100个真实世界的复制粘贴实例。结果显示，AdaptivePaste能够降低开发时间的浪费。",
    "tldr": "AdaptivePaste是一种基于变压器的学习型源代码适应方法，通过学习变量使用模式的有意义表示，可以以高准确率适应源代码。用户研究结果显示，AdaptivePaste能够降低开发时间的浪费。",
    "en_tdlr": "AdaptivePaste is a learning-based source code adaptation method based on transformers, which can adapt source code with high accuracy by learning meaningful representations of variable usage patterns. User studies show that AdaptivePaste can reduce waste of development time."
}