{
    "title": "From {Solution Synthesis} to {Student Attempt Synthesis} for Block-Based Visual Programming Tasks. (arXiv:2205.01265v3 [cs.AI] UPDATED)",
    "abstract": "Block-based visual programming environments are increasingly used to introduce computing concepts to beginners. Given that programming tasks are open-ended and conceptual, novice students often struggle when learning in these environments. AI-driven programming tutors hold great promise in automatically assisting struggling students, and need several components to realize this potential. We investigate the crucial component of student modeling, in particular, the ability to automatically infer students' misconceptions for predicting (synthesizing) their behavior. We introduce a novel benchmark, StudentSyn, centered around the following challenge: For a given student, synthesize the student's attempt on a new target task after observing the student's attempt on a fixed reference task. This challenge is akin to that of program synthesis; however, instead of synthesizing a {solution} (i.e., program an expert would write), the goal here is to synthesize a {student attempt} (i.e., program t",
    "link": "http://arxiv.org/abs/2205.01265",
    "context": "Title: From {Solution Synthesis} to {Student Attempt Synthesis} for Block-Based Visual Programming Tasks. (arXiv:2205.01265v3 [cs.AI] UPDATED)\nAbstract: Block-based visual programming environments are increasingly used to introduce computing concepts to beginners. Given that programming tasks are open-ended and conceptual, novice students often struggle when learning in these environments. AI-driven programming tutors hold great promise in automatically assisting struggling students, and need several components to realize this potential. We investigate the crucial component of student modeling, in particular, the ability to automatically infer students' misconceptions for predicting (synthesizing) their behavior. We introduce a novel benchmark, StudentSyn, centered around the following challenge: For a given student, synthesize the student's attempt on a new target task after observing the student's attempt on a fixed reference task. This challenge is akin to that of program synthesis; however, instead of synthesizing a {solution} (i.e., program an expert would write), the goal here is to synthesize a {student attempt} (i.e., program t",
    "path": "papers/22/05/2205.01265.json",
    "total_tokens": 1098,
    "translated_title": "从“解决方案合成”到“学生尝试合成”：面向基于块的可视化编程任务的研究",
    "translated_abstract": "基于块的可视化编程环境越来越被用来介绍计算概念给初学者。鉴于编程任务是开放式和概念性的，初学者在这些环境中学习时常常遇到困难。人工智能驱动的编程导师有着帮助挣扎的学生的巨大潜力，并且需要几个组成部分来实现这一潜力。我们研究了学生建模这一关键组成部分，特别是自动推断学生误解的能力，以便预测（合成）他们的行为。我们介绍了一个新颖的基准，StudentSyn，围绕以下挑战：为一个给定的学生，观察他们在一个固定的引用任务上的尝试后，合成他们对新目标任务的尝试。这个挑战类似于程序合成；但是，这里的目标不是合成一个“解决方案”（即专家编写的程序），而是合成一个“学生尝试”（即一个学生在学习过程中记录的程序）。我们提供了StudentSyn的详细说明，并描述了基准测试的几个潜在用例。我们还提出了一种模块化方法来解决这个挑战，并通过对初学者和有经验的参与者的实验分析了挑战的难度。",
    "tldr": "研究自动推断学生误解的关键组成部分，引入了一个基准测试——StudentSyn，通过观察学生在一个任务上的尝试，合成他们对另一个任务的学习尝试，以提高人工智能驱动的编程导师的效果。",
    "en_tdlr": "This paper investigates the crucial component of student modeling in block-based visual programming, and proposes a novel benchmark, StudentSyn, to synthesize a student's attempt on a new task after observing their attempt on a reference task, aiming to improve AI-driven programming tutoring."
}