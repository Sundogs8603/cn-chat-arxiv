{
    "title": "Formalizing Preferences Over Runtime Distributions. (arXiv:2205.13028v2 [cs.AI] UPDATED)",
    "abstract": "When trying to solve a computational problem, we are often faced with a choice between algorithms that are guaranteed to return the right answer but differ in their runtime distributions (e.g., SAT solvers, sorting algorithms). This paper aims to lay theoretical foundations for such choices by formalizing preferences over runtime distributions. It might seem that we should simply prefer the algorithm that minimizes expected runtime. However, such preferences would be driven by exactly how slow our algorithm is on bad inputs, whereas in practice we are typically willing to cut off occasional, sufficiently long runs before they finish. We propose a principled alternative, taking a utility-theoretic approach to characterize the scoring functions that describe preferences over algorithms. These functions depend on the way our value for solving our problem decreases with time and on the distribution from which captimes are drawn. We describe examples of realistic utility functions and show ",
    "link": "http://arxiv.org/abs/2205.13028",
    "context": "Title: Formalizing Preferences Over Runtime Distributions. (arXiv:2205.13028v2 [cs.AI] UPDATED)\nAbstract: When trying to solve a computational problem, we are often faced with a choice between algorithms that are guaranteed to return the right answer but differ in their runtime distributions (e.g., SAT solvers, sorting algorithms). This paper aims to lay theoretical foundations for such choices by formalizing preferences over runtime distributions. It might seem that we should simply prefer the algorithm that minimizes expected runtime. However, such preferences would be driven by exactly how slow our algorithm is on bad inputs, whereas in practice we are typically willing to cut off occasional, sufficiently long runs before they finish. We propose a principled alternative, taking a utility-theoretic approach to characterize the scoring functions that describe preferences over algorithms. These functions depend on the way our value for solving our problem decreases with time and on the distribution from which captimes are drawn. We describe examples of realistic utility functions and show ",
    "path": "papers/22/05/2205.13028.json",
    "total_tokens": 787,
    "translated_title": "形式化运行时分布上的偏好",
    "translated_abstract": "在解决计算问题时，我们通常需要在能够返回正确结果的算法之间进行选择，但这些算法的运行时分布不同（例如SAT求解器，排序算法）。本文旨在通过形式化运行时分布上的偏好为这些选择奠定理论基础。我们往往希望选择预期运行时间最短的算法。然而，这样的偏好将完全受到算法在坏输入上表现如何而影响，而在实践中，我们通常愿意在长时间的运行没有结束之前将其切断。我们提出了一个基于效用理论的可替代方案，用于描述算法偏好的评分函数。这些函数取决于随着时间的推移，问题解决的价值如何下降以及消费时间的分布。我们提出了一些真实的效用函数示例，并展示了一些优势决策算法的选择过程，并对这些函数进行了实验评估。",
    "tldr": "本文形式化了偏好运行时分布，提出了一种基于效用理论的替代方案来描述算法的评分函数，这些函数与随时间的推移和消费时间的分布有关。"
}