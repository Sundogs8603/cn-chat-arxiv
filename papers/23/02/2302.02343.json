{
    "title": "LExecutor: Learning-Guided Execution. (arXiv:2302.02343v3 [cs.SE] UPDATED)",
    "abstract": "Executing code is essential for various program analysis tasks, e.g., to detect bugs that manifest through exceptions or to obtain execution traces for further dynamic analysis. However, executing an arbitrary piece of code is often difficult in practice, e.g., because of missing variable definitions, missing user inputs, and missing third-party dependencies. This paper presents LExecutor, a learning-guided approach for executing arbitrary code snippets in an underconstrained way. The key idea is to let a neural model predict missing values that otherwise would cause the program to get stuck, and to inject these values into the execution. For example, LExecutor injects likely values for otherwise undefined variables and likely return values of calls to otherwise missing functions. We evaluate the approach on Python code from popular open-source projects and on code snippets extracted from Stack Overflow. The neural model predicts realistic values with an accuracy between 79.5% and 98.2",
    "link": "http://arxiv.org/abs/2302.02343",
    "context": "Title: LExecutor: Learning-Guided Execution. (arXiv:2302.02343v3 [cs.SE] UPDATED)\nAbstract: Executing code is essential for various program analysis tasks, e.g., to detect bugs that manifest through exceptions or to obtain execution traces for further dynamic analysis. However, executing an arbitrary piece of code is often difficult in practice, e.g., because of missing variable definitions, missing user inputs, and missing third-party dependencies. This paper presents LExecutor, a learning-guided approach for executing arbitrary code snippets in an underconstrained way. The key idea is to let a neural model predict missing values that otherwise would cause the program to get stuck, and to inject these values into the execution. For example, LExecutor injects likely values for otherwise undefined variables and likely return values of calls to otherwise missing functions. We evaluate the approach on Python code from popular open-source projects and on code snippets extracted from Stack Overflow. The neural model predicts realistic values with an accuracy between 79.5% and 98.2",
    "path": "papers/23/02/2302.02343.json",
    "total_tokens": 836,
    "translated_title": "LExecutor: 学习引导的执行",
    "translated_abstract": "执行代码对于各种程序分析任务是必不可少的，例如通过异常检测错误或获取执行跟踪以进行进一步的动态分析。然而，在实践中执行任意代码片段通常很困难，例如由于缺少变量定义、缺少用户输入和缺少第三方依赖。本文介绍了LExecutor，一种学习引导的方法，用于以自由约束的方式执行任意代码片段。关键思想是让神经模型预测否则会导致程序停滞的缺失值，并将这些值注入到执行中。例如，LExecutor为未定义的变量注入可能的值，并为缺失的函数调用返回预测可能的返回值。我们在来自流行开源项目的Python代码和从Stack Overflow中提取的代码片段上评估了该方法。神经模型以79.5%到98.2%的准确率预测真实值。",
    "tldr": "LExecutor是一个学习引导的执行方法，通过让神经模型预测缺失值，并将其注入到执行中，可以以自由约束的方式执行任意代码片段。该方法在Python代码和从Stack Overflow提取的代码片段上表现良好。",
    "en_tdlr": "LExecutor is a learning-guided approach that executes arbitrary code snippets in an underconstrained way by predicting missing values using a neural model and injecting them into the execution. It performs well on Python code and snippets extracted from Stack Overflow."
}