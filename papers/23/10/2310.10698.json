{
    "title": "Bridging Code Semantic and LLMs: Semantic Chain-of-Thought Prompting for Code Generation. (arXiv:2310.10698v1 [cs.CL])",
    "abstract": "Large language models (LLMs) have showcased remarkable prowess in code generation. However, automated code generation is still challenging since it requires a high-level semantic mapping between natural language requirements and codes. Most existing LLMs-based approaches for code generation rely on decoder-only causal language models often treate codes merely as plain text tokens \\ie feeding the requirements as a prompt input, and outputing code as flat sequence of tokens, potentially missing the rich semantic features inherent in source code. To bridge this gap, this paper proposes the \"Semantic Chain-of-Thought\" approach to intruduce semantic information of code, named SeCoT. Our motivation is that the semantic information of the source code (\\eg data flow and control flow) describes more precise program execution behavior, intention and function. By guiding LLM consider and integrate semantic information, we can achieve a more granular understanding and representation of code, enhan",
    "link": "http://arxiv.org/abs/2310.10698",
    "context": "Title: Bridging Code Semantic and LLMs: Semantic Chain-of-Thought Prompting for Code Generation. (arXiv:2310.10698v1 [cs.CL])\nAbstract: Large language models (LLMs) have showcased remarkable prowess in code generation. However, automated code generation is still challenging since it requires a high-level semantic mapping between natural language requirements and codes. Most existing LLMs-based approaches for code generation rely on decoder-only causal language models often treate codes merely as plain text tokens \\ie feeding the requirements as a prompt input, and outputing code as flat sequence of tokens, potentially missing the rich semantic features inherent in source code. To bridge this gap, this paper proposes the \"Semantic Chain-of-Thought\" approach to intruduce semantic information of code, named SeCoT. Our motivation is that the semantic information of the source code (\\eg data flow and control flow) describes more precise program execution behavior, intention and function. By guiding LLM consider and integrate semantic information, we can achieve a more granular understanding and representation of code, enhan",
    "path": "papers/23/10/2310.10698.json",
    "total_tokens": 838,
    "translated_title": "将代码语义与LLMs相结合：代码生成的语义思维链约束",
    "translated_abstract": "大型语言模型（LLMs）在代码生成方面展示了出色的能力。然而，自动化代码生成仍然具有挑战性，因为它需要对自然语言需求和代码之间进行高级语义映射。大多数现有基于LLMs的代码生成方法依赖于仅使用解码器的因果语言模型，通常将代码仅视为纯文本标记，即将需求作为提示输入，并将代码作为一系列平面标记输出，可能会忽略源代码中固有的丰富语义特征。为了弥合这一差距，本文提出了一种“语义思维链”的方法，引入了代码的语义信息，称为SeCoT。我们的动机是源代码的语义信息（例如数据流和控制流）更精确地描述了程序执行行为、意图和功能。通过引导LLMs考虑和整合语义信息，我们可以实现对代码更精细的理解和表示，增强代码生成的质量。",
    "tldr": "本文提出了一种“语义思维链”的方法，用于在代码生成中引入语义信息，并以此来实现更精细的代码理解和表示。",
    "en_tdlr": "This paper proposes a \"Semantic Chain-of-Thought\" approach to introduce semantic information into code generation, aiming to achieve a more granular understanding and representation of code."
}