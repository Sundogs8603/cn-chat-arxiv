{
    "title": "mlirSynth: Automatic, Retargetable Program Raising in Multi-Level IR using Program Synthesis. (arXiv:2310.04196v1 [cs.PL])",
    "abstract": "MLIR is an emerging compiler infrastructure for modern hardware, but existing programs cannot take advantage of MLIR's high-performance compilation if they are described in lower-level general purpose languages. Consequently, to avoid programs needing to be rewritten manually, this has led to efforts to automatically raise lower-level to higher-level dialects in MLIR. However, current methods rely on manually-defined raising rules, which limit their applicability and make them challenging to maintain as MLIR dialects evolve.  We present mlirSynth -- a novel approach which translates programs from lower-level MLIR dialects to high-level ones without manually defined rules. Instead, it uses available dialect definitions to construct a program space and searches it effectively using type constraints and equivalences. We demonstrate its effectiveness \\revi{by raising C programs} to two distinct high-level MLIR dialects, which enables us to use existing high-level dialect specific compilati",
    "link": "http://arxiv.org/abs/2310.04196",
    "context": "Title: mlirSynth: Automatic, Retargetable Program Raising in Multi-Level IR using Program Synthesis. (arXiv:2310.04196v1 [cs.PL])\nAbstract: MLIR is an emerging compiler infrastructure for modern hardware, but existing programs cannot take advantage of MLIR's high-performance compilation if they are described in lower-level general purpose languages. Consequently, to avoid programs needing to be rewritten manually, this has led to efforts to automatically raise lower-level to higher-level dialects in MLIR. However, current methods rely on manually-defined raising rules, which limit their applicability and make them challenging to maintain as MLIR dialects evolve.  We present mlirSynth -- a novel approach which translates programs from lower-level MLIR dialects to high-level ones without manually defined rules. Instead, it uses available dialect definitions to construct a program space and searches it effectively using type constraints and equivalences. We demonstrate its effectiveness \\revi{by raising C programs} to two distinct high-level MLIR dialects, which enables us to use existing high-level dialect specific compilati",
    "path": "papers/23/10/2310.04196.json",
    "total_tokens": 885,
    "translated_title": "mlirSynth：使用程序综合在多级IR中进行自动、重定向的程序提升",
    "translated_abstract": "MLIR是一个新兴的针对现代硬件的编译器基础设施，但是如果现有程序是用低级通用语言描述的，无法充分利用MLIR的高性能编译。因此，为了避免手动重写程序，现有方法致力于自动将低级别提升到MLIR中的高级别方言。然而，当前的方法依赖于手动定义的提升规则，这限制了它们的适用性，并且随着MLIR方言的演变，使它们难以维护。我们提出了mlirSynth，一种新颖的方法，它在不需要手动定义规则的情况下，将低级别MLIR方言的程序转换为高级别方言。相反，它利用可用的方言定义构建程序空间，并使用类型约束和等效性有效地搜索。我们通过将C程序提升到两个不同的高级MLIR方言来展示其有效性，这使我们能够使用现有的高级方言特定编译。",
    "tldr": "mlirSynth采用程序综合的方法，无需手动定义规则即可将低级MLIR方言的程序提升到高级方言，实现了自动且重定向的提升，极大地提高了编译效率。"
}