{
    "title": "Efficient Algorithms for Recognizing Weighted Tree-Adjoining Languages. (arXiv:2310.15276v1 [cs.CL])",
    "abstract": "The class of tree-adjoining languages can be characterized by various two-level formalisms, consisting of a context-free grammar (CFG) or pushdown automaton (PDA) controlling another CFG or PDA. These four formalisms are equivalent to tree-adjoining grammars (TAG), linear indexed grammars (LIG), pushdown-adjoining automata (PAA), and embedded pushdown automata (EPDA). We define semiring-weighted versions of the above two-level formalisms, and we design new algorithms for computing their stringsums (the weight of all derivations of a string) and allsums (the weight of all derivations). From these, we also immediately obtain stringsum and allsum algorithms for TAG, LIG, PAA, and EPDA. For LIG, our algorithm is more time-efficient by a factor of $\\mathcal{O}(n|\\mathcal{N}|)$ (where $n$ is the string length and $|\\mathcal{N}|$ is the size of the nonterminal set) and more space-efficient by a factor of $\\mathcal{O}(|\\Gamma|)$ (where $|\\Gamma|$ is the size of the stack alphabet) than the alg",
    "link": "http://arxiv.org/abs/2310.15276",
    "context": "Title: Efficient Algorithms for Recognizing Weighted Tree-Adjoining Languages. (arXiv:2310.15276v1 [cs.CL])\nAbstract: The class of tree-adjoining languages can be characterized by various two-level formalisms, consisting of a context-free grammar (CFG) or pushdown automaton (PDA) controlling another CFG or PDA. These four formalisms are equivalent to tree-adjoining grammars (TAG), linear indexed grammars (LIG), pushdown-adjoining automata (PAA), and embedded pushdown automata (EPDA). We define semiring-weighted versions of the above two-level formalisms, and we design new algorithms for computing their stringsums (the weight of all derivations of a string) and allsums (the weight of all derivations). From these, we also immediately obtain stringsum and allsum algorithms for TAG, LIG, PAA, and EPDA. For LIG, our algorithm is more time-efficient by a factor of $\\mathcal{O}(n|\\mathcal{N}|)$ (where $n$ is the string length and $|\\mathcal{N}|$ is the size of the nonterminal set) and more space-efficient by a factor of $\\mathcal{O}(|\\Gamma|)$ (where $|\\Gamma|$ is the size of the stack alphabet) than the alg",
    "path": "papers/23/10/2310.15276.json",
    "total_tokens": 975,
    "translated_title": "识别加权树相邻语言的高效算法",
    "translated_abstract": "树相邻语言的类别可以通过各种二级形式化方式来进行特征化，包括一个上下文无关文法（CFG）或下推自动机（PDA）控制另一个CFG或PDA。这四个形式等价于树相邻文法（TAG）、线性索引文法（LIG）、下推相邻自动机（PAA）和嵌套下推自动机（EPDA）。我们定义了上述两级形式化方式的半环加权版本，并设计了新的算法来计算它们的字符串总和（一个字符串的所有推导的权重）和全部总和（所有推导的权重）。根据这些，我们还可以立即得到TAG、LIG、PAA和EPDA的字符串总和和全部总和算法。对于LIG，我们的算法在时间效率上比因素$\\mathcal{O}(n|\\mathcal{N}|)$（其中$n$是字符串长度，$|\\mathcal{N}|$是非终结符集合的大小）更高，而在空间效率上比因素$\\mathcal{O}(|\\Gamma|)$（其中$|\\Gamma|$是栈字母表的大小）更高。",
    "tldr": "本研究提出了识别加权树相邻语言的高效算法，通过定义半环加权版本的两级形式化方式，并设计新的算法来计算字符串总和和全部总和。对于线性索引文法，算法在时间和空间效率上表现更优。"
}