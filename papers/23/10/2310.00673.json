{
    "title": "Learning Type Inference for Enhanced Dataflow Analysis. (arXiv:2310.00673v2 [cs.LG] UPDATED)",
    "abstract": "Statically analyzing dynamically-typed code is a challenging endeavor, as even seemingly trivial tasks such as determining the targets of procedure calls are non-trivial without knowing the types of objects at compile time. Addressing this challenge, gradual typing is increasingly added to dynamically-typed languages, a prominent example being TypeScript that introduces static typing to JavaScript. Gradual typing improves the developer's ability to verify program behavior, contributing to robust, secure and debuggable programs. In practice, however, users only sparsely annotate types directly. At the same time, conventional type inference faces performance-related challenges as program size grows. Statistical techniques based on machine learning offer faster inference, but although recent approaches demonstrate overall improved accuracy, they still perform significantly worse on user-defined types than on the most common built-in types. Limiting their real-world usefulness even more, t",
    "link": "http://arxiv.org/abs/2310.00673",
    "context": "Title: Learning Type Inference for Enhanced Dataflow Analysis. (arXiv:2310.00673v2 [cs.LG] UPDATED)\nAbstract: Statically analyzing dynamically-typed code is a challenging endeavor, as even seemingly trivial tasks such as determining the targets of procedure calls are non-trivial without knowing the types of objects at compile time. Addressing this challenge, gradual typing is increasingly added to dynamically-typed languages, a prominent example being TypeScript that introduces static typing to JavaScript. Gradual typing improves the developer's ability to verify program behavior, contributing to robust, secure and debuggable programs. In practice, however, users only sparsely annotate types directly. At the same time, conventional type inference faces performance-related challenges as program size grows. Statistical techniques based on machine learning offer faster inference, but although recent approaches demonstrate overall improved accuracy, they still perform significantly worse on user-defined types than on the most common built-in types. Limiting their real-world usefulness even more, t",
    "path": "papers/23/10/2310.00673.json",
    "total_tokens": 879,
    "translated_title": "学习类型推断以增强数据流分析",
    "translated_abstract": "静态分析动态类型代码是一项具有挑战性的任务，因为即使是看似微不足道的任务，比如确定过程调用的目标，在没有在编译时知道对象类型的情况下也是非常困难的。为了解决这个挑战，渐进式类型越来越多地添加到动态类型语言中，一个著名的例子是TypeScript，它为JavaScript引入了静态类型。渐进式类型提高了开发人员验证程序行为的能力，有助于创建稳健、安全和可调试的程序。然而，在实践中，用户很少直接注释类型。与此同时，传统的类型推断在程序规模增长时面临与性能相关的挑战。基于机器学习的统计技术提供了更快的推断，但尽管最近的方法在整体上表现出更高的准确性，但它们在用户定义的类型上的性能仍然明显较差，而在最常见的内置类型上的性能较好。这更限制了它们在真实世界中的实用性。",
    "tldr": "该论文介绍了一种学习类型推断的方法，以增强数据流分析。传统的类型推断在面对程序规模增长时面临性能挑战，而基于机器学习的统计技术可以提供更快的推断。然而，目前的方法在用户定义的类型上性能仍较差，限制了其在实际应用中的效果。"
}