{
    "title": "Tackling the Matrix Multiplication Micro-kernel Generation with Exo. (arXiv:2310.17408v1 [cs.MS])",
    "abstract": "The optimization of the matrix multiplication (or GEMM) has been a need during the last decades. This operation is considered the flagship of current linear algebra libraries such as BLIS, OpenBLAS, or Intel OneAPI because of its widespread use in a large variety of scientific applications. The GEMM is usually implemented following the GotoBLAS philosophy, which tiles the GEMM operands and uses a series of nested loops for performance improvement. These approaches extract the maximum computational power of the architectures through small pieces of hardware-oriented, high-performance code called micro-kernel. However, this approach forces developers to generate, with a non-negligible effort, a dedicated micro-kernel for each new hardware.  In this work, we present a step-by-step procedure for generating micro-kernels with the Exo compiler that performs close to (or even better than) manually developed microkernels written with intrinsic functions or assembly language. Our solution also ",
    "link": "http://arxiv.org/abs/2310.17408",
    "context": "Title: Tackling the Matrix Multiplication Micro-kernel Generation with Exo. (arXiv:2310.17408v1 [cs.MS])\nAbstract: The optimization of the matrix multiplication (or GEMM) has been a need during the last decades. This operation is considered the flagship of current linear algebra libraries such as BLIS, OpenBLAS, or Intel OneAPI because of its widespread use in a large variety of scientific applications. The GEMM is usually implemented following the GotoBLAS philosophy, which tiles the GEMM operands and uses a series of nested loops for performance improvement. These approaches extract the maximum computational power of the architectures through small pieces of hardware-oriented, high-performance code called micro-kernel. However, this approach forces developers to generate, with a non-negligible effort, a dedicated micro-kernel for each new hardware.  In this work, we present a step-by-step procedure for generating micro-kernels with the Exo compiler that performs close to (or even better than) manually developed microkernels written with intrinsic functions or assembly language. Our solution also ",
    "path": "papers/23/10/2310.17408.json",
    "total_tokens": 861,
    "translated_title": "使用Exo解决矩阵乘法微内核生成问题",
    "translated_abstract": "在过去的几十年里，矩阵乘法（或GEMM）的优化一直是一个需求。这个操作被认为是当前线性代数库（如BLIS，OpenBLAS或Intel OneAPI）的旗舰，因为它在各种科学应用中被广泛使用。GEMM通常是按照GotoBLAS的理念进行实现的，它将GEMM的操作数进行切割，并使用一系列嵌套循环来提高性能。这些方法通过一小块面向硬件的高性能代码，即微内核，提取体系结构的最大计算能力。然而，这种方法迫使开发人员为每个新的硬件生成一个专用的微内核，并需要非常大的工作量。在这项工作中，我们提出了一种使用Exo编译器生成微内核的逐步过程，该过程的性能接近甚至超过了手动编写的使用内部函数或汇编语言的微内核。",
    "tldr": "介绍了使用Exo编译器生成接近于甚至优于手动开发的微内核的步骤和方法，并解决了为每个新硬件生成专用微内核的问题。",
    "en_tdlr": "This paper presents a step-by-step procedure using Exo compiler to generate micro-kernels that perform close to or better than manually developed microkernels, addressing the issue of generating dedicated micro-kernels for each new hardware."
}