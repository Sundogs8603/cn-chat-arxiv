{
    "title": "Tips for making the most of 64-bit architectures in langage design, libraries or garbage collection. (arXiv:2310.15632v1 [cs.CL])",
    "abstract": "The 64-bit architectures that have become standard today offer unprecedented low-level programming possibilities. For the first time in the history of computing, the size of address registers far exceeded the physical capacity of their bus.After a brief reminder of the possibilities offered by the small size of addresses compared to the available 64 bits,we develop three concrete examples of how the vacant bits of these registers can be used.Among these examples, two of them concern the implementation of a library for a new statically typed programming language.Firstly, the implementation of multi-precision integers, with the aim of improving performance in terms of both calculation speed and RAM savings.The second example focuses on the library's handling of UTF-8 character strings.Here, the idea is to make indexing easier by ignoring the physical size of each UTF-8 characters.Finally, the third example is a possible enhancement of garbage collectors, in particular the mark \\& sweep f",
    "link": "http://arxiv.org/abs/2310.15632",
    "context": "Title: Tips for making the most of 64-bit architectures in langage design, libraries or garbage collection. (arXiv:2310.15632v1 [cs.CL])\nAbstract: The 64-bit architectures that have become standard today offer unprecedented low-level programming possibilities. For the first time in the history of computing, the size of address registers far exceeded the physical capacity of their bus.After a brief reminder of the possibilities offered by the small size of addresses compared to the available 64 bits,we develop three concrete examples of how the vacant bits of these registers can be used.Among these examples, two of them concern the implementation of a library for a new statically typed programming language.Firstly, the implementation of multi-precision integers, with the aim of improving performance in terms of both calculation speed and RAM savings.The second example focuses on the library's handling of UTF-8 character strings.Here, the idea is to make indexing easier by ignoring the physical size of each UTF-8 characters.Finally, the third example is a possible enhancement of garbage collectors, in particular the mark \\& sweep f",
    "path": "papers/23/10/2310.15632.json",
    "total_tokens": 889,
    "translated_title": "在语言设计、库或垃圾收集方面充分利用64位体系结构的技巧",
    "translated_abstract": "如今成为标准的64位体系结构提供了前所未有的低级编程可能性。在计算历史上，地址寄存器的大小首次远远超过其总线的物理容量。在简要回顾了与可用64位相比地址的大小所提供的可能性之后，我们开发了三个具体的例子来说明如何利用这些寄存器中的空闲位。其中两个例子涉及实现一个新的静态类型编程语言的库。首先，是多精度整数的实现，旨在提高计算速度和节省RAM的性能。第二个例子关注于库对UTF-8字符串的处理，目标是通过忽略每个UTF-8字符的物理大小使索引更加方便。最后，第三个例子是对垃圾收集器的可能增强，特别是mark \\& sweep。",
    "tldr": "该论文介绍了如何在语言设计、库和垃圾收集方面充分利用64位体系结构的技巧，通过实现多精度整数、简化UTF-8字符串索引以及增强垃圾收集器的功能，提高了计算性能和节省了内存空间。",
    "en_tdlr": "This paper discusses tips for maximizing the potential of 64-bit architectures in language design, libraries, and garbage collection. It presents concrete examples of utilizing the vacant bits in address registers, including the implementation of multi-precision integers, simplifying UTF-8 string indexing, and enhancing garbage collectors for improved computational performance and memory savings."
}