{
    "title": "Formalizing Natural Language Intent into Program Specifications via Large Language Models. (arXiv:2310.01831v1 [cs.SE])",
    "abstract": "Informal natural language that describes code functionality, such as code comments or function documentation, may contain substantial information about a programs intent. However, there is typically no guarantee that a programs implementation and natural language documentation are aligned. In the case of a conflict, leveraging information in code-adjacent natural language has the potential to enhance fault localization, debugging, and code trustworthiness. In practice, however, this information is often underutilized due to the inherent ambiguity of natural language which makes natural language intent challenging to check programmatically. The \"emergent abilities\" of Large Language Models (LLMs) have the potential to facilitate the translation of natural language intent to programmatically checkable assertions. However, it is unclear if LLMs can correctly translate informal natural language specifications into formal specifications that match programmer intent. Additionally, it is uncl",
    "link": "http://arxiv.org/abs/2310.01831",
    "context": "Title: Formalizing Natural Language Intent into Program Specifications via Large Language Models. (arXiv:2310.01831v1 [cs.SE])\nAbstract: Informal natural language that describes code functionality, such as code comments or function documentation, may contain substantial information about a programs intent. However, there is typically no guarantee that a programs implementation and natural language documentation are aligned. In the case of a conflict, leveraging information in code-adjacent natural language has the potential to enhance fault localization, debugging, and code trustworthiness. In practice, however, this information is often underutilized due to the inherent ambiguity of natural language which makes natural language intent challenging to check programmatically. The \"emergent abilities\" of Large Language Models (LLMs) have the potential to facilitate the translation of natural language intent to programmatically checkable assertions. However, it is unclear if LLMs can correctly translate informal natural language specifications into formal specifications that match programmer intent. Additionally, it is uncl",
    "path": "papers/23/10/2310.01831.json",
    "total_tokens": 789,
    "translated_title": "将自然语言意图形式化为程序规范通过大型语言模型",
    "translated_abstract": "描述代码功能的非正式自然语言，例如代码注释或函数文档，可能包含关于程序意图的重要信息。然而，程序的实现和自然语言文档通常无法保持一致。在冲突的情况下，利用与代码相关的自然语言信息有潜力提高故障定位、调试和代码可信度。然而，在实践中，由于自然语言的固有歧义性，这些信息通常被低效利用，使得自然语言意图难以在程序中进行程序化检查。大型语言模型的“新兴能力”有可能促进自然语言意图转化为程序可检查的断言。然而，尚不清楚LLM是否能够正确地将非正式自然语言规范转化为与程序员意图相匹配的正式规范。",
    "tldr": "本论文研究了利用大型语言模型将非正式自然语言意图转化为可检查的程序规范的可能性，以提高代码的可靠性和调试效率。",
    "en_tdlr": "This paper investigates the possibility of using large language models to translate informal natural language intent into programmatically checkable program specifications, aiming to enhance code reliability and debugging efficiency."
}