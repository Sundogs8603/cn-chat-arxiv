{
    "title": "Reverse Chain: A Generic-Rule for LLMs to Master Multi-API Planning. (arXiv:2310.04474v2 [cs.SE] UPDATED)",
    "abstract": "While enabling large language models to implement function calling (known as APIs) can greatly enhance the performance of LLMs, function calling is still a challenging task due to the complicated relations between different APIs, especially in a context-learning setting without fine-tuning. This paper proposes a simple yet controllable target-driven approach called Reverse Chain to empower LLMs with capabilities to use external APIs with only prompts. Given that most open-source LLMs have limited tool-use or tool-plan capabilities, LLMs in Reverse Chain are only employed to implement simple tasks, e.g., API selection and argument completion, and a generic rule is employed to implement a controllable multiple functions calling. In this generic rule, after selecting a final API to handle a given task via LLMs, we first ask LLMs to fill the required arguments from user query and context. Some missing arguments could be further completed by letting LLMs select another API based on API desc",
    "link": "http://arxiv.org/abs/2310.04474",
    "context": "Title: Reverse Chain: A Generic-Rule for LLMs to Master Multi-API Planning. (arXiv:2310.04474v2 [cs.SE] UPDATED)\nAbstract: While enabling large language models to implement function calling (known as APIs) can greatly enhance the performance of LLMs, function calling is still a challenging task due to the complicated relations between different APIs, especially in a context-learning setting without fine-tuning. This paper proposes a simple yet controllable target-driven approach called Reverse Chain to empower LLMs with capabilities to use external APIs with only prompts. Given that most open-source LLMs have limited tool-use or tool-plan capabilities, LLMs in Reverse Chain are only employed to implement simple tasks, e.g., API selection and argument completion, and a generic rule is employed to implement a controllable multiple functions calling. In this generic rule, after selecting a final API to handle a given task via LLMs, we first ask LLMs to fill the required arguments from user query and context. Some missing arguments could be further completed by letting LLMs select another API based on API desc",
    "path": "papers/23/10/2310.04474.json",
    "total_tokens": 826,
    "translated_title": "反向链：一种通用规则，用于使LLMs掌握多API规划",
    "translated_abstract": "尽管使大型语言模型能够实现函数调用（即API）可以极大地提高LLMs的性能，但由于不同API之间的复杂关系，在没有微调的情况下，函数调用仍然是一项具有挑战性的任务。本文提出了一种简单但可控的目标驱动方法，称为反向链，以使LLMs能够仅通过提示使用外部API。在反向链中，大多数开源LLMs仅用于实现简单任务，例如API选择和参数补全，并使用通用规则实现可控的多函数调用。在这个通用规则中，选择一个最终API来处理给定任务之后，我们首先要求LLMs从用户查询和上下文中填写所需的参数。一些缺失的参数可以通过让LLMs基于API描述选择另一个API来进一步完成。",
    "tldr": "这项研究提出了一种名为反向链的通用规则，通过反向链思路使LLMs能够使用外部API完成复杂的函数调用任务，并通过填充参数的方式提高任务完成的准确性。",
    "en_tdlr": "This study proposes a generic rule called Reverse Chain to enable LLMs to master complex function calling tasks using external APIs, improving task accuracy by filling in missing arguments."
}