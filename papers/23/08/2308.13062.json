{
    "title": "ZeroLeak: Using LLMs for Scalable and Cost Effective Side-Channel Patching. (arXiv:2308.13062v1 [cs.CR])",
    "abstract": "Security critical software, e.g., OpenSSL, comes with numerous side-channel leakages left unpatched due to a lack of resources or experts. The situation will only worsen as the pace of code development accelerates, with developers relying on Large Language Models (LLMs) to automatically generate code. In this work, we explore the use of LLMs in generating patches for vulnerable code with microarchitectural side-channel leakages. For this, we investigate the generative abilities of powerful LLMs by carefully crafting prompts following a zero-shot learning approach. All generated code is dynamically analyzed by leakage detection tools, which are capable of pinpointing information leakage at the instruction level leaked either from secret dependent accesses or branches or vulnerable Spectre gadgets, respectively. Carefully crafted prompts are used to generate candidate replacements for vulnerable code, which are then analyzed for correctness and for leakage resilience. From a cost/perform",
    "link": "http://arxiv.org/abs/2308.13062",
    "context": "Title: ZeroLeak: Using LLMs for Scalable and Cost Effective Side-Channel Patching. (arXiv:2308.13062v1 [cs.CR])\nAbstract: Security critical software, e.g., OpenSSL, comes with numerous side-channel leakages left unpatched due to a lack of resources or experts. The situation will only worsen as the pace of code development accelerates, with developers relying on Large Language Models (LLMs) to automatically generate code. In this work, we explore the use of LLMs in generating patches for vulnerable code with microarchitectural side-channel leakages. For this, we investigate the generative abilities of powerful LLMs by carefully crafting prompts following a zero-shot learning approach. All generated code is dynamically analyzed by leakage detection tools, which are capable of pinpointing information leakage at the instruction level leaked either from secret dependent accesses or branches or vulnerable Spectre gadgets, respectively. Carefully crafted prompts are used to generate candidate replacements for vulnerable code, which are then analyzed for correctness and for leakage resilience. From a cost/perform",
    "path": "papers/23/08/2308.13062.json",
    "total_tokens": 895,
    "translated_title": "ZeroLeak: 使用LLMs进行可扩展和成本有效的侧信道补丁",
    "translated_abstract": "安全关键的软件，如OpenSSL，由于缺乏资源或专家，存在许多未修补的侧信道泄漏。随着代码开发速度的加快，开发人员依赖于大型语言模型(LLMs)自动生成代码，情况只会变得更糟。在这项工作中，我们探索了使用LLMs生成具有微体系结构侧信道泄漏的脆弱代码的修补程序。为此，我们通过精心设计的提示来探索强大的LLMs的生成能力，采用了零-shot学习方法。所有生成的代码都通过泄漏检测工具进行动态分析，这些工具能够准确指示从秘密相关访问或分支或脆弱的Spectre gadget泄漏的指令级的信息泄漏。精心设计的提示被用来生成脆弱代码的候选替换，然后对其进行正确性和泄漏鲁棒性的分析。",
    "tldr": "本研究在安全关键的软件中探索了使用LLMs生成具有侧信道泄漏的脆弱代码的修补程序。通过零-shot学习方法和动态分析，我们成功地生成了具有泄漏鲁棒性的候选替换。",
    "en_tdlr": "This research explores the use of LLMs in generating patches for vulnerable code with side-channel leakages in security-critical software. Through zero-shot learning approach and dynamic analysis, we successfully generate candidate replacements with leakage resilience."
}