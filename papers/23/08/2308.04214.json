{
    "title": "A Differential Datalog Interpreter. (arXiv:2308.04214v1 [cs.DB])",
    "abstract": "The core reasoning task for datalog engines is materialization, the evaluation of a datalog program over a database alongside its physical incorporation into the database itself. The de-facto method of computing it, is through the recursive application of inference rules. Due to it being a costly operation, it is a must for datalog engines to provide incremental materialization, that is, to adjust the computation to new data, instead of restarting from scratch. One of the major caveats, is that deleting data is notoriously more involved than adding, since one has to take into account all possible data that has been entailed from what is being deleted. Differential Dataflow is a computational model that provides efficient incremental maintenance, notoriously with equal performance between additions and deletions, and work distribution, of iterative dataflows. In this paper we investigate the performance of materialization with three reference datalog implementations, out of which one is",
    "link": "http://arxiv.org/abs/2308.04214",
    "context": "Title: A Differential Datalog Interpreter. (arXiv:2308.04214v1 [cs.DB])\nAbstract: The core reasoning task for datalog engines is materialization, the evaluation of a datalog program over a database alongside its physical incorporation into the database itself. The de-facto method of computing it, is through the recursive application of inference rules. Due to it being a costly operation, it is a must for datalog engines to provide incremental materialization, that is, to adjust the computation to new data, instead of restarting from scratch. One of the major caveats, is that deleting data is notoriously more involved than adding, since one has to take into account all possible data that has been entailed from what is being deleted. Differential Dataflow is a computational model that provides efficient incremental maintenance, notoriously with equal performance between additions and deletions, and work distribution, of iterative dataflows. In this paper we investigate the performance of materialization with three reference datalog implementations, out of which one is",
    "path": "papers/23/08/2308.04214.json",
    "total_tokens": 765,
    "translated_title": "《一种差分Datalog解释器》",
    "translated_abstract": "Datalog引擎的核心推理任务是材料化，即在数据库中评估Datalog程序并将其物理纳入数据库本身。计算它的事实上的方法是通过递归应用推理规则。由于这是一个昂贵的操作，Datalog引擎必须提供增量材料化，即将计算调整到新数据上，而不是从头开始。其中一个主要的缺陷就是删除数据比添加数据复杂得多，因为必须考虑所有可能从正在删除的数据中推导出的数据。差分数据流是一种提供有效的增量维护的计算模型，尤其在添加和删除之间拥有相等的性能，并且能够处理迭代数据流的工作分配。在本文中，我们研究了使用三个参考Datalog实现进行材料化的性能情况。",
    "tldr": "本文研究了差分Datalog解释器的材料化性能，特别是增量维护和工作分配方面的表现。"
}