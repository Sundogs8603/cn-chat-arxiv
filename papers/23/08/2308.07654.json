{
    "title": "SEER: Super-Optimization Explorer for HLS using E-graph Rewriting with MLIR. (arXiv:2308.07654v1 [cs.PL])",
    "abstract": "High-level synthesis (HLS) is a process that automatically translates a software program in a high-level language into a low-level hardware description. However, the hardware designs produced by HLS tools still suffer from a significant performance gap compared to manual implementations. This is because the input HLS programs must still be written using hardware design principles.  Existing techniques either leave the program source unchanged or perform a fixed sequence of source transformation passes, potentially missing opportunities to find the optimal design. We propose a super-optimization approach for HLS that automatically rewrites an arbitrary software program into efficient HLS code that can be used to generate an optimized hardware design. We developed a toolflow named SEER, based on the e-graph data structure, to efficiently explore equivalent implementations of a program at scale. SEER provides an extensible framework, orchestrating existing software compiler passes and har",
    "link": "http://arxiv.org/abs/2308.07654",
    "context": "Title: SEER: Super-Optimization Explorer for HLS using E-graph Rewriting with MLIR. (arXiv:2308.07654v1 [cs.PL])\nAbstract: High-level synthesis (HLS) is a process that automatically translates a software program in a high-level language into a low-level hardware description. However, the hardware designs produced by HLS tools still suffer from a significant performance gap compared to manual implementations. This is because the input HLS programs must still be written using hardware design principles.  Existing techniques either leave the program source unchanged or perform a fixed sequence of source transformation passes, potentially missing opportunities to find the optimal design. We propose a super-optimization approach for HLS that automatically rewrites an arbitrary software program into efficient HLS code that can be used to generate an optimized hardware design. We developed a toolflow named SEER, based on the e-graph data structure, to efficiently explore equivalent implementations of a program at scale. SEER provides an extensible framework, orchestrating existing software compiler passes and har",
    "path": "papers/23/08/2308.07654.json",
    "total_tokens": 845,
    "translated_title": "SEER：使用MLIR进行E图重写的HLS超级优化探索器",
    "translated_abstract": "高级综合（HLS）是一个将高级语言编写的软件程序自动转换为低级硬件描述的过程。然而，由HLS工具生成的硬件设计与手动实现相比仍然存在显著的性能差距。这是因为输入的HLS程序仍必须按照硬件设计原则编写。现有的技术要么保持程序源代码不变，要么执行一系列固定的源代码转换步骤，可能会错过寻找最优设计的机会。我们提出了一种HLS的超级优化方法，可以自动将任意软件程序重写为高效的HLS代码，用于生成优化的硬件设计。我们开发了一个名为SEER的工具流程，基于E图数据结构，以高效地探索程序的等效实现。SEER提供了一个可扩展的框架，协调现有的软件编译器传递和硬",
    "tldr": "SEER是一个基于E图重写和MLIR的超级优化探索器，用于将软件程序自动转换为高效的硬件描述，填补了高级综合工具生成的硬件设计与手动实现之间的性能差距。",
    "en_tdlr": "SEER is a super-optimization explorer that uses E-graph rewriting and MLIR to automatically convert software programs into efficient hardware descriptions, bridging the performance gap between hardware designs generated by HLS tools and manual implementations."
}