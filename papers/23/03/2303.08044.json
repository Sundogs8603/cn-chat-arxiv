{
    "title": "Happy-GLL: modular, reusable and complete top-down parsers for parameterized nonterminals. (arXiv:2303.08044v1 [cs.CL])",
    "abstract": "Parser generators and parser combinator libraries are the most popular tools for producing parsers. Parser combinators use the host language to provide reusable components in the form of higher-order functions with parsers as parameters. Very few parser generators support this kind of reuse through abstraction and even fewer generate parsers that are as modular and reusable as the parts of the grammar for which they are produced. This paper presents a strategy for generating modular, reusable and complete top-down parsers from syntax descriptions with parameterized nonterminals, based on the FUN-GLL variant of the GLL algorithm.  The strategy is discussed and demonstrated as a novel back-end for the Happy parser generator. Happy grammars can contain `parameterized nonterminals' in which parameters abstract over grammar symbols, granting an abstraction mechanism to define reusable grammar operators. However, the existing Happy back-ends do not deliver on the full potential of parameteri",
    "link": "http://arxiv.org/abs/2303.08044",
    "context": "Title: Happy-GLL: modular, reusable and complete top-down parsers for parameterized nonterminals. (arXiv:2303.08044v1 [cs.CL])\nAbstract: Parser generators and parser combinator libraries are the most popular tools for producing parsers. Parser combinators use the host language to provide reusable components in the form of higher-order functions with parsers as parameters. Very few parser generators support this kind of reuse through abstraction and even fewer generate parsers that are as modular and reusable as the parts of the grammar for which they are produced. This paper presents a strategy for generating modular, reusable and complete top-down parsers from syntax descriptions with parameterized nonterminals, based on the FUN-GLL variant of the GLL algorithm.  The strategy is discussed and demonstrated as a novel back-end for the Happy parser generator. Happy grammars can contain `parameterized nonterminals' in which parameters abstract over grammar symbols, granting an abstraction mechanism to define reusable grammar operators. However, the existing Happy back-ends do not deliver on the full potential of parameteri",
    "path": "papers/23/03/2303.08044.json",
    "total_tokens": 961,
    "translated_title": "Happy-GLL:模块化、可重用和完整的支持参数化非终结符的自顶向下解析器",
    "translated_abstract": "解析器生成器和解析器组合库是生成解析器的最流行的工具。解析器组合器使用主机语言以高阶函数的形式提供可重用的组件，并将解析器作为参数。很少有解析器生成器通过抽象支持这种重用，而且生成的解析器像产生它们的语法部分一样模块化和可重用。本文提出了一种策略，基于 GL算法的 FUN-GLL变体，从具有参数化非终结符的语法描述生成模块化、可重用和完整的自顶向下解析器。该策略作为 Happy 解析器生成器的一种新的后端来展示和讨论。Happy 语法可以包含参数化非终结符，在这些非终结符中，参数抽象了语法符号，通过授权抽象机制定义可重用的语法运算符。然而，现有的 Happy 后端不能完全发挥参数化非终结符的潜力。所提出的 Happy-GLL 后端解决了这个问题，允许在 Happy 语法中使用模块化和可重用的参数化非终结符。",
    "tldr": "本文提出了 Happy-GLL 解析器生成器的后端，该后端支持参数化非终结符的模块化和可重用，从而提供了一种生成模块化、可重用和完整解析器的策略。",
    "en_tdlr": "This paper proposes a strategy for generating modular, reusable, and complete top-down parsers with parameterized nonterminals, and presents Happy-GLL as a new back-end that supports modular and reusable parameterized nonterminals."
}