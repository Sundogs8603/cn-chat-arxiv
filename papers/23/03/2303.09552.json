{
    "title": "Dataflow graphs as complete causal graphs. (arXiv:2303.09552v1 [cs.SE])",
    "abstract": "Component-based development is one of the core principles behind modern software engineering practices. Understanding of causal relationships between components of a software system can yield significant benefits to developers. Yet modern software design approaches make it difficult to track and discover such relationships at system scale, which leads to growing intellectual debt. In this paper we consider an alternative approach to software design, flow-based programming (FBP), and draw the attention of the community to the connection between dataflow graphs produced by FBP and structural causal models. With expository examples we show how this connection can be leveraged to improve day-to-day tasks in software projects, including fault localisation, business analysis and experimentation.",
    "link": "http://arxiv.org/abs/2303.09552",
    "context": "Title: Dataflow graphs as complete causal graphs. (arXiv:2303.09552v1 [cs.SE])\nAbstract: Component-based development is one of the core principles behind modern software engineering practices. Understanding of causal relationships between components of a software system can yield significant benefits to developers. Yet modern software design approaches make it difficult to track and discover such relationships at system scale, which leads to growing intellectual debt. In this paper we consider an alternative approach to software design, flow-based programming (FBP), and draw the attention of the community to the connection between dataflow graphs produced by FBP and structural causal models. With expository examples we show how this connection can be leveraged to improve day-to-day tasks in software projects, including fault localisation, business analysis and experimentation.",
    "path": "papers/23/03/2303.09552.json",
    "total_tokens": 773,
    "translated_title": "数据流图作为完整因果图",
    "translated_abstract": "组件化开发是现代软件工程实践的核心原则之一。理解软件系统组件之间的因果关系可以为开发人员带来显著的益处。然而，现代软件设计方法使得在系统规模下跟踪和发现这种关系变得困难，这导致了不断增长的智力负担。在本文中，我们考虑了一种替代的软件设计方法——基于流的编程（FBP），并引起了社区对FBP生成的数据流图和结构性因果模型之间关系的注意。我们通过说明性示例展示了如何利用这种关系来改进软件项目中的日常任务，包括故障定位、业务分析和实验室实验。",
    "tldr": "本篇论文介绍了一种替代的软件设计方法——基于流的编程（FBP），并强调了FBP生成的数据流图和结构性因果模型之间的联系，通过这种联系可以改进软件项目中的日常任务，包括故障定位、业务分析和实验室实验。",
    "en_tdlr": "This paper presents an alternative software design approach, flow-based programming (FBP), and highlights the connection between dataflow graphs produced by FBP and structural causal models. This connection can be leveraged to improve day-to-day tasks in software projects, including fault localization, business analysis, and experimentation."
}