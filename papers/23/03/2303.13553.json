{
    "title": "CH-Go: Online Go System Based on Chunk Data Storage. (arXiv:2303.13553v1 [cs.LG])",
    "abstract": "The training and running of an online Go system require the support of effective data management systems to deal with vast data, such as the initial Go game records, the feature data set obtained by representation learning, the experience data set of self-play, the randomly sampled Monte Carlo tree, and so on. Previous work has rarely mentioned this problem, but the ability and efficiency of data management systems determine the accuracy and speed of the Go system. To tackle this issue, we propose an online Go game system based on the chunk data storage method (CH-Go), which processes the format of 160k Go game data released by Kiseido Go Server (KGS) and designs a Go encoder with 11 planes, a parallel processor and generator for better memory performance. Specifically, we store the data in chunks, take the chunk size of 1024 as a batch, and save the features and labels of each chunk as binary files. Then a small set of data is randomly sampled each time for the neural network training",
    "link": "http://arxiv.org/abs/2303.13553",
    "context": "Title: CH-Go: Online Go System Based on Chunk Data Storage. (arXiv:2303.13553v1 [cs.LG])\nAbstract: The training and running of an online Go system require the support of effective data management systems to deal with vast data, such as the initial Go game records, the feature data set obtained by representation learning, the experience data set of self-play, the randomly sampled Monte Carlo tree, and so on. Previous work has rarely mentioned this problem, but the ability and efficiency of data management systems determine the accuracy and speed of the Go system. To tackle this issue, we propose an online Go game system based on the chunk data storage method (CH-Go), which processes the format of 160k Go game data released by Kiseido Go Server (KGS) and designs a Go encoder with 11 planes, a parallel processor and generator for better memory performance. Specifically, we store the data in chunks, take the chunk size of 1024 as a batch, and save the features and labels of each chunk as binary files. Then a small set of data is randomly sampled each time for the neural network training",
    "path": "papers/23/03/2303.13553.json",
    "total_tokens": 916,
    "translated_title": "基于分块数据存储的在线围棋系统CH-Go",
    "translated_abstract": "构建一个有效的数据管理系统来处理海量数据，如初始围棋游戏记录，表示学习获得的特征数据集，自我对弈的经验数据集，随机采样的蒙特卡罗树等，是实现在线围棋系统的训练和运行所必需的。先前的工作很少提到这个问题，但数据管理系统的能力和效率决定了围棋系统的准确性和速度。为了解决这个问题，我们提出了一种基于分块数据存储方法的在线围棋游戏系统 (CH-Go)，它处理了Kiseido Go Server (KGS)发布的160k格式的围棋游戏数据，并设计了一个具有11个平面的围棋编码器、一个并行处理器和一个生成器，以实现更好的内存性能。具体而言，我们把数据存储在块中，以1024为批处理大小，并将每个块的特征和标签保存为二进制文件。然后每次随机抽取一小组数据进行神经网络训练。",
    "tldr": "该论文提出了一种基于分块数据存储方法的在线围棋游戏系统 CH-Go，可以高效地处理海量数据，并使用神经网络来进行训练。"
}