{
    "title": "Type Prediction With Program Decomposition and Fill-in-the-Type Training. (arXiv:2305.17145v1 [cs.SE])",
    "abstract": "TypeScript and Python are two programming languages that support optional type annotations, which are useful but tedious to introduce and maintain. This has motivated automated type prediction: given an untyped program, produce a well-typed output program. Large language models (LLMs) are promising for type prediction, but there are challenges: fill-in-the-middle performs poorly, programs may not fit into the context window, generated types may not type check, and it is difficult to measure how well-typed the output program is. We address these challenges by building OpenTau, a search-based approach for type prediction that leverages large language models. We propose a new metric for type prediction quality, give a tree-based program decomposition that searches a space of generated types, and present fill-in-the-type fine-tuning for LLMs. We evaluate our work with a new dataset for TypeScript type prediction, and show that 47.4% of files type check (14.5% absolute improvement) with an ",
    "link": "http://arxiv.org/abs/2305.17145",
    "context": "Title: Type Prediction With Program Decomposition and Fill-in-the-Type Training. (arXiv:2305.17145v1 [cs.SE])\nAbstract: TypeScript and Python are two programming languages that support optional type annotations, which are useful but tedious to introduce and maintain. This has motivated automated type prediction: given an untyped program, produce a well-typed output program. Large language models (LLMs) are promising for type prediction, but there are challenges: fill-in-the-middle performs poorly, programs may not fit into the context window, generated types may not type check, and it is difficult to measure how well-typed the output program is. We address these challenges by building OpenTau, a search-based approach for type prediction that leverages large language models. We propose a new metric for type prediction quality, give a tree-based program decomposition that searches a space of generated types, and present fill-in-the-type fine-tuning for LLMs. We evaluate our work with a new dataset for TypeScript type prediction, and show that 47.4% of files type check (14.5% absolute improvement) with an ",
    "path": "papers/23/05/2305.17145.json",
    "total_tokens": 1002,
    "translated_title": "程序分解与类型填充训练的类型预测",
    "translated_abstract": "TypeScript和Python是支持可选类型注释的编程语言，很有用但引入和维护起来很麻烦。这激发了自动类型预测：给定一个未标记类型的程序，生成一个类型正确的输出程序。大型语言模型（LLMs）对于类型预测非常有希望，但存在挑战：中间填充的表现差，程序可能不适合上下文窗口，生成的类型可能无法通过类型检查，而且很难测量输出程序的类型正确性。我们通过构建OpenTau来解决这些问题，这是一种基于搜索的类型预测方法，利用大型语言模型。我们提出了一种新的类型预测质量度量方法，提供了一种树形程序分解技术来搜索生成的类型空间，并提出了用于LLMs的类型填充微调方法。我们使用新的TypeScript类型预测数据集进行评估，并展示了47.4％的文件通过类型检查（14.5％的绝对改进），平均精度达到0.707，超过了最先进的方法。",
    "tldr": "该论文提出了一种基于大型语言模型的搜索方法OpenTau，采用树形程序分解技术和类型填充微调方法解决类型预测中的一些挑战。在TypeScript类型预测方面，该方法在类型检查方面表现良好，平均精度为0.707，优于现有最先进方法。",
    "en_tdlr": "The paper proposes an approach for automated type prediction called OpenTau that leverages large language models, addresses challenges in type prediction with a tree-based program decomposition and fill-in-the-type fine-tuning for LLMs, and introduces a new metric for type prediction quality. The method outperforms state-of-the-art approaches in TypeScript type prediction, achieving 47.4% of files type checking with an average precision of 0.707."
}