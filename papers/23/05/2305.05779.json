{
    "title": "Learning to Parallelize with OpenMP by Augmented Heterogeneous AST Representation. (arXiv:2305.05779v1 [cs.LG])",
    "abstract": "Detecting parallelizable code regions is a challenging task, even for experienced developers. Numerous recent studies have explored the use of machine learning for code analysis and program synthesis, including parallelization, in light of the success of machine learning in natural language processing. However, applying machine learning techniques to parallelism detection presents several challenges, such as the lack of an adequate dataset for training, an effective code representation with rich information, and a suitable machine learning model to learn the latent features of code for diverse analyses. To address these challenges, we propose a novel graph-based learning approach called Graph2Par that utilizes a heterogeneous augmented abstract syntax tree (Augmented-AST) representation for code. The proposed approach primarily focused on loop-level parallelization with OpenMP. Moreover, we create an OMP\\_Serial dataset with 18598 parallelizable and 13972 non-parallelizable loops to tr",
    "link": "http://arxiv.org/abs/2305.05779",
    "context": "Title: Learning to Parallelize with OpenMP by Augmented Heterogeneous AST Representation. (arXiv:2305.05779v1 [cs.LG])\nAbstract: Detecting parallelizable code regions is a challenging task, even for experienced developers. Numerous recent studies have explored the use of machine learning for code analysis and program synthesis, including parallelization, in light of the success of machine learning in natural language processing. However, applying machine learning techniques to parallelism detection presents several challenges, such as the lack of an adequate dataset for training, an effective code representation with rich information, and a suitable machine learning model to learn the latent features of code for diverse analyses. To address these challenges, we propose a novel graph-based learning approach called Graph2Par that utilizes a heterogeneous augmented abstract syntax tree (Augmented-AST) representation for code. The proposed approach primarily focused on loop-level parallelization with OpenMP. Moreover, we create an OMP\\_Serial dataset with 18598 parallelizable and 13972 non-parallelizable loops to tr",
    "path": "papers/23/05/2305.05779.json",
    "total_tokens": 904,
    "translated_title": "通过增强异构AST表示法学习使用OpenMP并行化",
    "translated_abstract": "检测可并行化的代码区域是一项具有挑战性的任务，即使对于经验丰富的开发人员也是如此。为了解决这些挑战，我们提出了一种新颖的基于图形的学习方法，称为Graph2Par，它利用了一种名为Augmented-AST的异构增强的抽象语法树表示来表示代码。该方法主要关注使用OpenMP进行循环级并行化。我们还创建了一个包含18598个可并行化和13972个不可并行化循环的OMP\\_Serial数据集，将代码分析任务转换为二进制分类问题。基准数据集上的实验结果表明，我们的方法优于检测可并行化循环的最先进技术，取得了高达88.74%的F1得分和81.94%的精度。",
    "tldr": "该论文提出了一种名为Graph2Par的基于图形的深度学习方法，利用叫做Augmented-AST的抽象语法树表示法来检测并行化代码区域。实验结果显示，该方法在检测可并行化循环方面优于最先进技术。"
}