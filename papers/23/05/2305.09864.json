{
    "title": "The Jaseci Programming Paradigm and Runtime Stack: Building Scale-out Production Applications Easy and Fast. (arXiv:2305.09864v1 [cs.CL])",
    "abstract": "Today's production scale-out applications include many sub-application components, such as storage backends, logging infrastructure and AI models. These components have drastically different characteristics, are required to work in collaboration, and interface with each other as microservices. This leads to increasingly high complexity in developing, optimizing, configuring, and deploying scale-out applications, raising the barrier to entry for most individuals and small teams. We developed a novel co-designed runtime system, Jaseci, and programming language, Jac, which aims to reduce this complexity. The key design principle throughout Jaseci's design is to raise the level of abstraction by moving as much of the scale-out data management, microservice componentization, and live update complexity into the runtime stack to be automated and optimized automatically. We use real-world AI applications to demonstrate Jaseci's benefit for application performance and developer productivity.",
    "link": "http://arxiv.org/abs/2305.09864",
    "context": "Title: The Jaseci Programming Paradigm and Runtime Stack: Building Scale-out Production Applications Easy and Fast. (arXiv:2305.09864v1 [cs.CL])\nAbstract: Today's production scale-out applications include many sub-application components, such as storage backends, logging infrastructure and AI models. These components have drastically different characteristics, are required to work in collaboration, and interface with each other as microservices. This leads to increasingly high complexity in developing, optimizing, configuring, and deploying scale-out applications, raising the barrier to entry for most individuals and small teams. We developed a novel co-designed runtime system, Jaseci, and programming language, Jac, which aims to reduce this complexity. The key design principle throughout Jaseci's design is to raise the level of abstraction by moving as much of the scale-out data management, microservice componentization, and live update complexity into the runtime stack to be automated and optimized automatically. We use real-world AI applications to demonstrate Jaseci's benefit for application performance and developer productivity.",
    "path": "papers/23/05/2305.09864.json",
    "total_tokens": 898,
    "translated_title": "Jaseci编程范式和运行时堆栈：轻松快速构建规模化生产应用程序",
    "translated_abstract": "当今的生产规模化应用程序包括许多子应用程序组件，例如存储后端、日志基础设施和AI模型。这些组件具有非常不同的特性，需要协同工作，并作为微服务与彼此接口。这导致在开发、优化、配置和部署规模化应用程序方面越来越复杂，提高了大多数个人和小团队的准入门槛。我们开发了一种新颖的协同设计运行时系统Jaseci和编程语言Jac，旨在减少这种复杂性。Jaseci设计和开发的关键设计原则是通过将尽可能多的规模化数据管理、微服务组件化和实时更新复杂性移入运行时堆栈以进行自动化和自动优化来提高抽象水平。我们使用真实世界的AI应用程序来展示Jaseci在应用程序性能和开发人员生产力方面的好处。",
    "tldr": "Jaseci编程范式和运行时堆栈的设计原则在于通过自动化和自动优化尽可能多的规模化数据管理、微服务组件化和实时更新复杂性，从而提高了抽象水平，降低了应用程序的开发难度和部署门槛。",
    "en_tdlr": "The Jaseci programming paradigm and runtime stack aim to reduce complexity in developing, optimizing, configuring, and deploying scale-out applications by automating and optimizing data management, microservice componentization, and live updates through abstraction, which is demonstrated through real-world AI application examples."
}