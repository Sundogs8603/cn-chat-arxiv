{
    "title": "Can You Solve Closest String Faster than Exhaustive Search?. (arXiv:2305.16878v2 [cs.CC] UPDATED)",
    "abstract": "We study the fundamental problem of finding the best string to represent a given set, in the form of the Closest String problem: Given a set $X \\subseteq \\Sigma^d$ of $n$ strings, find the string $x^*$ minimizing the radius of the smallest Hamming ball around $x^*$ that encloses all the strings in $X$. In this paper, we investigate whether the Closest String problem admits algorithms that are faster than the trivial exhaustive search algorithm. We obtain the following results for the two natural versions of the problem:  $\\bullet$ In the continuous Closest String problem, the goal is to find the solution string $x^*$ anywhere in $\\Sigma^d$. For binary strings, the exhaustive search algorithm runs in time $O(2^d poly(nd))$ and we prove that it cannot be improved to time $O(2^{(1-\\epsilon) d} poly(nd))$, for any $\\epsilon > 0$, unless the Strong Exponential Time Hypothesis fails.  $\\bullet$ In the discrete Closest String problem, $x^*$ is required to be in the input set $X$. While this p",
    "link": "http://arxiv.org/abs/2305.16878",
    "context": "Title: Can You Solve Closest String Faster than Exhaustive Search?. (arXiv:2305.16878v2 [cs.CC] UPDATED)\nAbstract: We study the fundamental problem of finding the best string to represent a given set, in the form of the Closest String problem: Given a set $X \\subseteq \\Sigma^d$ of $n$ strings, find the string $x^*$ minimizing the radius of the smallest Hamming ball around $x^*$ that encloses all the strings in $X$. In this paper, we investigate whether the Closest String problem admits algorithms that are faster than the trivial exhaustive search algorithm. We obtain the following results for the two natural versions of the problem:  $\\bullet$ In the continuous Closest String problem, the goal is to find the solution string $x^*$ anywhere in $\\Sigma^d$. For binary strings, the exhaustive search algorithm runs in time $O(2^d poly(nd))$ and we prove that it cannot be improved to time $O(2^{(1-\\epsilon) d} poly(nd))$, for any $\\epsilon > 0$, unless the Strong Exponential Time Hypothesis fails.  $\\bullet$ In the discrete Closest String problem, $x^*$ is required to be in the input set $X$. While this p",
    "path": "papers/23/05/2305.16878.json",
    "total_tokens": 1057,
    "translated_title": "你能比穷举搜索更快地解决最近字符串问题吗？",
    "translated_abstract": "我们研究了寻找用最佳字符串表示给定集合的基本问题，并提出了最近字符串问题：给定一个大小为$n$，长度为$d$，由字符串$X \\subseteq \\Sigma^d$组成的集合，找到字符串$x^*$，使得最小的Hamming球的半径囊括了$X$中的所有字符串。在本文中，我们探讨了最近字符串问题是否存在比平凡的穷举搜索算法更快的算法。对于问题的两个自然版本，我们得到了以下结果：在连续的最近字符串问题中，目标是在$\\Sigma^d$中找到解决方案字符串$x^*$。对于二进制字符串，穷举搜索算法的运行时间为$O(2^d poly(nd))$，我们证明它不能改进为时间复杂度为$O(2^{(1-\\epsilon) d} poly(nd))$，任何$\\epsilon > 0$都不成立，除非强指数时间假设失败。在离散的最近字符串问题中，要求$x^*$在输入集合$X$中。虽然这将问题转换为NP-完全问题，但我们证明，如果$d$是常数，则以$2^{O(\\sqrt{n})}$次比较的形式可以解决它。",
    "tldr": "本文研究最近字符串问题是否存在比平凡的穷举搜索算法更快的算法，针对不同版本的问题的自然版本，得出以下结果：对于连续的问题版本，不存在比平凡的穷举搜索算法更快的解法，对于离散版本，如果$d$是常数，则以$2^{O(\\sqrt{n})}$次比较可以解决它。",
    "en_tdlr": "This paper examines whether the Closest String problem can be solved faster than the trivial exhaustive search algorithm and provides results for its continuous and discrete versions. The continuous version cannot be improved beyond the exhaustive search algorithm and the discrete version can be solved with $2^{O(\\sqrt{n})}$ comparisons if $d$ is a constant."
}