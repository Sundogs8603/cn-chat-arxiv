{
    "title": "Enhancing Datalog Reasoning with Hypertree Decompositions. (arXiv:2305.06854v1 [cs.DB])",
    "abstract": "Datalog reasoning based on the semina\\\"ive evaluation strategy evaluates rules using traditional join plans, which often leads to redundancy and inefficiency in practice, especially when the rules are complex. Hypertree decompositions help identify efficient query plans and reduce similar redundancy in query answering. However, it is unclear how this can be applied to materialisation and incremental reasoning with recursive Datalog programs. Moreover, hypertree decompositions require additional data structures and thus introduce nonnegligible overhead in both runtime and memory consumption. In this paper, we provide algorithms that exploit hypertree decompositions for the materialisation and incremental evaluation of Datalog programs. Furthermore, we combine this approach with standard Datalog reasoning algorithms in a modular fashion so that the overhead caused by the decompositions is reduced. Our empirical evaluation shows that, when the program contains complex rules, the combined ",
    "link": "http://arxiv.org/abs/2305.06854",
    "context": "Title: Enhancing Datalog Reasoning with Hypertree Decompositions. (arXiv:2305.06854v1 [cs.DB])\nAbstract: Datalog reasoning based on the semina\\\"ive evaluation strategy evaluates rules using traditional join plans, which often leads to redundancy and inefficiency in practice, especially when the rules are complex. Hypertree decompositions help identify efficient query plans and reduce similar redundancy in query answering. However, it is unclear how this can be applied to materialisation and incremental reasoning with recursive Datalog programs. Moreover, hypertree decompositions require additional data structures and thus introduce nonnegligible overhead in both runtime and memory consumption. In this paper, we provide algorithms that exploit hypertree decompositions for the materialisation and incremental evaluation of Datalog programs. Furthermore, we combine this approach with standard Datalog reasoning algorithms in a modular fashion so that the overhead caused by the decompositions is reduced. Our empirical evaluation shows that, when the program contains complex rules, the combined ",
    "path": "papers/23/05/2305.06854.json",
    "total_tokens": 864,
    "translated_title": "利用超树分解增强Datalog推理",
    "translated_abstract": "基于半朴素评估策略的Datalog推理使用传统的连接计划评估规则，在实践中经常导致冗余和低效，尤其是当规则很复杂时。超树分解有助于确定有效的查询计划并减少查询响应中类似的冗余。然而，如何将其应用于具有递归Datalog程序的物化和增量推理尚不清楚。此外，超树分解需要额外的数据结构，因此在运行时间和内存消耗方面引入了不可忽略的开销。在本文中，我们提供了利用超树分解进行Datalog程序的物化和增量评估的算法。此外，我们以模块化的方式将这种方法与标准Datalog推理算法相结合，以减少分解引起的开销。我们的实证评估表明，在程序包含复杂规则时，这种组合方法可以提高推理效率和减少内存消耗。",
    "tldr": "本文提出了一种利用超树分解来增强Datalog推理效率的算法，并将其与标准Datalog算法相结合以减少额外开销。实证评估结果表明，该算法可以提高推理效率和减少内存消耗。"
}