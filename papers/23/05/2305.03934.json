{
    "title": "Revisiting Lightweight Compiler Provenance Recovery on ARM Binaries. (arXiv:2305.03934v1 [cs.LG])",
    "abstract": "A binary's behavior is greatly influenced by how the compiler builds its source code. Although most compiler configuration details are abstracted away during compilation, recovering them is useful for reverse engineering and program comprehension tasks on unknown binaries, such as code similarity detection. We observe that previous work has thoroughly explored this on x86-64 binaries. However, there has been limited investigation of ARM binaries, which are increasingly prevalent.  In this paper, we extend previous work with a shallow-learning model that efficiently and accurately recovers compiler configuration properties for ARM binaries. We apply opcode and register-derived features, that have previously been effective on x86-64 binaries, to ARM binaries. Furthermore, we compare this work with Pizzolotto et al., a recent architecture-agnostic model that uses deep learning, whose dataset and code are available.  We observe that the lightweight features are reproducible on ARM binaries",
    "link": "http://arxiv.org/abs/2305.03934",
    "context": "Title: Revisiting Lightweight Compiler Provenance Recovery on ARM Binaries. (arXiv:2305.03934v1 [cs.LG])\nAbstract: A binary's behavior is greatly influenced by how the compiler builds its source code. Although most compiler configuration details are abstracted away during compilation, recovering them is useful for reverse engineering and program comprehension tasks on unknown binaries, such as code similarity detection. We observe that previous work has thoroughly explored this on x86-64 binaries. However, there has been limited investigation of ARM binaries, which are increasingly prevalent.  In this paper, we extend previous work with a shallow-learning model that efficiently and accurately recovers compiler configuration properties for ARM binaries. We apply opcode and register-derived features, that have previously been effective on x86-64 binaries, to ARM binaries. Furthermore, we compare this work with Pizzolotto et al., a recent architecture-agnostic model that uses deep learning, whose dataset and code are available.  We observe that the lightweight features are reproducible on ARM binaries",
    "path": "papers/23/05/2305.03934.json",
    "total_tokens": 982,
    "translated_title": "重访在ARM二进制代码上的轻量级编译器溯源恢复",
    "translated_abstract": "一个二进制代码的行为受编译器如何构建其源代码的影响。尽管在编译过程中大多数编译器配置细节都被抽象化了，但恢复它们对于未知二进制代码的逆向工程和程序理解任务（例如代码相似性检测）是有用的。我们注意到以前的工作已经在x86-64二进制代码上进行了深入的研究。然而，在ARM二进制代码上的研究有限，而这种情况越来越普遍。在本文中，我们使用一种浅层学习模型，该模型针对ARM二进制代码高效而准确地恢复编译器配置属性。我们应用了已经在x86-64二进制代码上有效的操作码和寄存器派生特征到ARM二进制代码上。此外，我们将这项工作与Pizzolotto等人的工作进行比较，后者是最近使用深度学习的与架构无关的模型，并且具有可用的数据集和代码。我们观察到，轻量级特征在ARM二进制代码上是可重现的。",
    "tldr": "本文在ARM二进制代码上使用浅层学习模型，高效和准确地恢复编译器配置属性。我们应用了已经在x86-64二进制代码上有效的操作码和寄存器派生特征，并将这项工作与使用深度学习的与架构无关的模型进行比较，证明轻量级特征在ARM二进制代码上是可重现的。",
    "en_tdlr": "This paper uses a shallow-learning model to efficiently and accurately recover compiler configuration properties for ARM binaries, applying previously effective opcode and register-derived features from x86-64 binaries and comparing with an architecture-agnostic model that uses deep learning, showing that lightweight features are reproducible on ARM binaries."
}