{
    "title": "Enabling Programming Thinking in Large Language Models Toward Code Generation. (arXiv:2305.06599v1 [cs.SE])",
    "abstract": "Large Language Models (LLMs) (e.g., ChatGPT) have shown impressive performance in code generation. A large-scale study released that writing programs requires programming thinking, i.e., analyzing and implementing requirements in programming logic (e.g., sequence, branch, loop). Existing studies use LLMs to generate programs from requirements directly and do not explicitly introduce the programming thinking.  This paper explores how to unlock the programming thinking of LLMs in code generation and proposes an approach named TiP. Our idea is to decompose code generation into two steps and progressively lead LLMs to analyze&implement requirements in programming logic. Specifically, TiP first generates a code sketch, which provides a high-level solving process using programming logic but omits implementation details (e.g., APIs). Then, TiP implements the sketch into a program using specific programming languages. We conduct extensive experiments on three public benchmarks (i.e., HumanEval",
    "link": "http://arxiv.org/abs/2305.06599",
    "context": "Title: Enabling Programming Thinking in Large Language Models Toward Code Generation. (arXiv:2305.06599v1 [cs.SE])\nAbstract: Large Language Models (LLMs) (e.g., ChatGPT) have shown impressive performance in code generation. A large-scale study released that writing programs requires programming thinking, i.e., analyzing and implementing requirements in programming logic (e.g., sequence, branch, loop). Existing studies use LLMs to generate programs from requirements directly and do not explicitly introduce the programming thinking.  This paper explores how to unlock the programming thinking of LLMs in code generation and proposes an approach named TiP. Our idea is to decompose code generation into two steps and progressively lead LLMs to analyze&implement requirements in programming logic. Specifically, TiP first generates a code sketch, which provides a high-level solving process using programming logic but omits implementation details (e.g., APIs). Then, TiP implements the sketch into a program using specific programming languages. We conduct extensive experiments on three public benchmarks (i.e., HumanEval",
    "path": "papers/23/05/2305.06599.json",
    "total_tokens": 915,
    "tldr": "本文提出了一种名为TiP的解锁大型语言模型编程思维的方法，通过将代码生成分解为两个步骤来逐步引导LLMs分析和实现编程逻辑中的要求。",
    "en_tdlr": "This paper proposes an approach named TiP to unlock the programming thinking of LLMs in code generation by decomposing code generation into two steps and progressively leading LLMs to analyze and implement requirements in programming logic. TiP first generates a code sketch and then implements it into a program using specific programming languages. Extensive experiments on three public benchmarks have been conducted to demonstrate the effectiveness of this approach."
}