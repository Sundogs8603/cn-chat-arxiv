{
    "title": "Data Aggregation for Hierarchical Clustering. (arXiv:2309.02552v1 [stat.ML])",
    "abstract": "Hierarchical Agglomerative Clustering (HAC) is likely the earliest and most flexible clustering method, because it can be used with many distances, similarities, and various linkage strategies. It is often used when the number of clusters the data set forms is unknown and some sort of hierarchy in the data is plausible. Most algorithms for HAC operate on a full distance matrix, and therefore require quadratic memory. The standard algorithm also has cubic runtime to produce a full hierarchy. Both memory and runtime are especially problematic in the context of embedded or otherwise very resource-constrained systems. In this section, we present how data aggregation with BETULA, a numerically stable version of the well known BIRCH data aggregation algorithm, can be used to make HAC viable on systems with constrained resources with only small losses on clustering quality, and hence allow exploratory data analysis of very large data sets.",
    "link": "http://arxiv.org/abs/2309.02552",
    "context": "Title: Data Aggregation for Hierarchical Clustering. (arXiv:2309.02552v1 [stat.ML])\nAbstract: Hierarchical Agglomerative Clustering (HAC) is likely the earliest and most flexible clustering method, because it can be used with many distances, similarities, and various linkage strategies. It is often used when the number of clusters the data set forms is unknown and some sort of hierarchy in the data is plausible. Most algorithms for HAC operate on a full distance matrix, and therefore require quadratic memory. The standard algorithm also has cubic runtime to produce a full hierarchy. Both memory and runtime are especially problematic in the context of embedded or otherwise very resource-constrained systems. In this section, we present how data aggregation with BETULA, a numerically stable version of the well known BIRCH data aggregation algorithm, can be used to make HAC viable on systems with constrained resources with only small losses on clustering quality, and hence allow exploratory data analysis of very large data sets.",
    "path": "papers/23/09/2309.02552.json",
    "total_tokens": 845,
    "translated_title": "数据聚合用于层次聚类",
    "translated_abstract": "层次凝聚聚类（HAC）可能是最早和最灵活的聚类方法，因为它可以与许多距离、相似度和不同的链接策略一起使用。当数据集形成的聚类数量未知且数据中存在一定的层次结构时，通常使用HAC。大多数HAC算法在全距离矩阵上操作，因此需要二次存储。标准算法的运行时间也是立方级别的，用于生成完整的层次结构。在嵌入式或其他资源受限的系统中，存储和运行时间尤其成问题。在本节中，我们介绍了如何利用BETULA进行数据聚合，它是著名的BIRCH数据聚合算法的数值稳定版本，可使HAC在具有受限资源的系统上可行，只造成较小的聚类质量损失，从而允许对非常大的数据集进行探索性数据分析。",
    "tldr": "本研究介绍了如何利用数据聚合算法BETULA使得资源受限系统上的层次聚类方法HAC变得可行，从而允许对非常大的数据集进行探索性数据分析。"
}