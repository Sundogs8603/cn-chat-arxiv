{
    "title": "C++ Design Patterns for Low-latency Applications Including High-frequency Trading. (arXiv:2309.04259v1 [cs.PF])",
    "abstract": "This work aims to bridge the existing knowledge gap in the optimisation of latency-critical code, specifically focusing on high-frequency trading (HFT) systems. The research culminates in three main contributions: the creation of a Low-Latency Programming Repository, the optimisation of a market-neutral statistical arbitrage pairs trading strategy, and the implementation of the Disruptor pattern in C++. The repository serves as a practical guide and is enriched with rigorous statistical benchmarking, while the trading strategy optimisation led to substantial improvements in speed and profitability. The Disruptor pattern showcased significant performance enhancement over traditional queuing methods. Evaluation metrics include speed, cache utilisation, and statistical significance, among others. Techniques like Cache Warming and Constexpr showed the most significant gains in latency reduction. Future directions involve expanding the repository, testing the optimised trading algorithm in ",
    "link": "http://arxiv.org/abs/2309.04259",
    "context": "Title: C++ Design Patterns for Low-latency Applications Including High-frequency Trading. (arXiv:2309.04259v1 [cs.PF])\nAbstract: This work aims to bridge the existing knowledge gap in the optimisation of latency-critical code, specifically focusing on high-frequency trading (HFT) systems. The research culminates in three main contributions: the creation of a Low-Latency Programming Repository, the optimisation of a market-neutral statistical arbitrage pairs trading strategy, and the implementation of the Disruptor pattern in C++. The repository serves as a practical guide and is enriched with rigorous statistical benchmarking, while the trading strategy optimisation led to substantial improvements in speed and profitability. The Disruptor pattern showcased significant performance enhancement over traditional queuing methods. Evaluation metrics include speed, cache utilisation, and statistical significance, among others. Techniques like Cache Warming and Constexpr showed the most significant gains in latency reduction. Future directions involve expanding the repository, testing the optimised trading algorithm in ",
    "path": "papers/23/09/2309.04259.json",
    "total_tokens": 960,
    "translated_title": "C++低延迟应用的设计模式，包括高频交易",
    "translated_abstract": "本文旨在填补现有知识中关于优化延迟关键代码的空白，尤其专注于高频交易系统。研究成果包括三个主要贡献：创建了一个低延迟编程库，优化了一个市场中性统计套利配对交易策略，并在C++中实现了Disruptor模式。该库作为一个实用指南，并通过严格的统计基准测试进行了丰富。而交易策略的优化使得速度和盈利能力都有了显著提升。Disruptor模式相比传统的排队方法，表现出了显著的性能提升。评估指标包括速度、缓存利用率和统计显著性等。而像缓存预热和Constexpr这样的技术在降低延迟方面表现出了最显著的收益。未来的方向包括扩展该库，并测试优化后的交易算法。",
    "tldr": "本论文讨论了C++低延迟应用的设计模式，着重于高频交易系统。研究结果包括创建低延迟编程库、优化套利交易策略和实现C++中的Disruptor模式。其中，Disruptor模式在性能方面表现出显著的改进。未来的研究方向包括扩展编程库和测试优化后的交易算法。",
    "en_tdlr": "This paper discusses C++ design patterns for low-latency applications, with a focus on high-frequency trading systems. The research includes creating a low-latency programming repository, optimizing a statistical arbitrage pairs trading strategy, and implementing the Disruptor pattern in C++. The Disruptor pattern shows significant performance improvement. Future directions involve expanding the repository and testing the optimized trading algorithm."
}