{
    "title": "Guess & Sketch: Language Model Guided Transpilation. (arXiv:2309.14396v1 [cs.SE])",
    "abstract": "Maintaining legacy software requires many software and systems engineering hours. Assembly code programs, which demand low-level control over the computer machine state and have no variable names, are particularly difficult for humans to analyze. Existing conventional program translators guarantee correctness, but are hand-engineered for the source and target programming languages in question. Learned transpilation, i.e. automatic translation of code, offers an alternative to manual re-writing and engineering efforts. Automated symbolic program translation approaches guarantee correctness but struggle to scale to longer programs due to the exponentially large search space. Their rigid rule-based systems also limit their expressivity, so they can only reason about a reduced space of programs. Probabilistic neural language models (LMs) produce plausible outputs for every input, but do so at the cost of guaranteed correctness. In this work, we leverage the strengths of LMs and symbolic so",
    "link": "http://arxiv.org/abs/2309.14396",
    "context": "Title: Guess & Sketch: Language Model Guided Transpilation. (arXiv:2309.14396v1 [cs.SE])\nAbstract: Maintaining legacy software requires many software and systems engineering hours. Assembly code programs, which demand low-level control over the computer machine state and have no variable names, are particularly difficult for humans to analyze. Existing conventional program translators guarantee correctness, but are hand-engineered for the source and target programming languages in question. Learned transpilation, i.e. automatic translation of code, offers an alternative to manual re-writing and engineering efforts. Automated symbolic program translation approaches guarantee correctness but struggle to scale to longer programs due to the exponentially large search space. Their rigid rule-based systems also limit their expressivity, so they can only reason about a reduced space of programs. Probabilistic neural language models (LMs) produce plausible outputs for every input, but do so at the cost of guaranteed correctness. In this work, we leverage the strengths of LMs and symbolic so",
    "path": "papers/23/09/2309.14396.json",
    "total_tokens": 878,
    "translated_title": "猜测与绘图：语言模型引导的转译",
    "translated_abstract": "维护遗留软件需要大量的软件和系统工程时间。汇编代码程序对于人类来说特别难以分析，因为它们对计算机机器状态需要低级别的控制，并且没有变量名称。现有的传统程序转换器保证正确性，但是它们是针对特定的源语言和目标编程语言进行手工工程设计的。学习式转译，即代码的自动翻译，提供了手动重写和工程努力的替代方案。自动化的符号程序转换方法保证了正确性，但是由于搜索空间指数级增长，很难扩展到较长的程序。它们刚性的基于规则的系统也限制了它们的表达能力，因此它们只能推理出一小部分程序空间。概率性神经语言模型（LMs）为每个输入生成合理的输出，但是以确保正确性为代价。在这项工作中，我们充分利用了LMs和符号化方法的优势。",
    "tldr": "本论文通过结合概率性神经语言模型和符号化方法，提出了一种语言模型引导的转译方法，用于自动翻译汇编代码程序，以缩短维护遗留软件的时间和工程成本。",
    "en_tdlr": "This paper proposes a language model guided transpilation approach, combining probabilistic neural language models and symbolic methods, for automatic translation of assembly code programs, aiming to reduce the time and engineering efforts required for maintaining legacy software."
}