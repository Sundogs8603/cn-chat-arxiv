{
    "title": "Compositional Program Generation for Systematic Generalization. (arXiv:2309.16467v1 [cs.LG])",
    "abstract": "Compositional generalization is a key ability of humans that enables us to learn new concepts from only a handful examples. Machine learning models, including the now ubiquitous transformers, struggle to generalize in this way, and typically require thousands of examples of a concept during training in order to generalize meaningfully. This difference in ability between humans and artificial neural architectures, motivates this study on a neuro-symbolic architecture called the Compositional Program Generator (CPG). CPG has three key features: modularity, type abstraction, and recursive composition, that enable it to generalize both systematically to new concepts in a few-shot manner, as well as productively by length on various sequence-to-sequence language tasks. For each input, CPG uses a grammar of the input domain and a parser to generate a type hierarchy in which each grammar rule is assigned its own unique semantic module, a probabilistic copy or substitution program. Instances w",
    "link": "http://arxiv.org/abs/2309.16467",
    "context": "Title: Compositional Program Generation for Systematic Generalization. (arXiv:2309.16467v1 [cs.LG])\nAbstract: Compositional generalization is a key ability of humans that enables us to learn new concepts from only a handful examples. Machine learning models, including the now ubiquitous transformers, struggle to generalize in this way, and typically require thousands of examples of a concept during training in order to generalize meaningfully. This difference in ability between humans and artificial neural architectures, motivates this study on a neuro-symbolic architecture called the Compositional Program Generator (CPG). CPG has three key features: modularity, type abstraction, and recursive composition, that enable it to generalize both systematically to new concepts in a few-shot manner, as well as productively by length on various sequence-to-sequence language tasks. For each input, CPG uses a grammar of the input domain and a parser to generate a type hierarchy in which each grammar rule is assigned its own unique semantic module, a probabilistic copy or substitution program. Instances w",
    "path": "papers/23/09/2309.16467.json",
    "total_tokens": 911,
    "translated_title": "系统化泛化的组合式程序生成",
    "translated_abstract": "组合式泛化是人类的关键技能之一，它使我们能够从少数例子中学习新概念。机器学习模型，包括如今无处不在的transformers，在这方面很难进行泛化，并且通常需要在训练过程中提供数千个概念示例才能进行有意义的泛化。人类与人工神经网络结构在能力上的差异，促使了对一种称为组合式程序生成器（CPG）的神经符号体系结构进行研究。CPG具有三个关键特征：模块化、类型抽象和递归组合，它使其能够以少样本的方式对新概念进行系统化的泛化，同时在各种序列到序列的语言任务上具有生产力。对于每个输入，CPG使用输入领域的语法和解析器生成一个类型层次结构，在这个结构中，每个语法规则都被分配了一个独特的语义模块——一个概率性的复制或替换程序。",
    "tldr": "系统化泛化是人类的关键技能之一，组合式程序生成器（CPG）通过模块化、类型抽象和递归组合的特征，能够以少样本的方式对新概念进行系统化的泛化，在各种语言任务上具有生产力。",
    "en_tdlr": "Compositional generalization is a key ability of humans. The Compositional Program Generator (CPG) utilizes modularity, type abstraction, and recursive composition to systematically generalize to new concepts in a few-shot manner and be productive in various language tasks."
}