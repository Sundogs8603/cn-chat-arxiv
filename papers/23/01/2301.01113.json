{
    "title": "Invalidator: Automated Patch Correctness Assessment via Semantic and Syntactic Reasoning. (arXiv:2301.01113v2 [cs.SE] UPDATED)",
    "abstract": "Automated program repair (APR) faces the challenge of test overfitting, where generated patches pass validation tests but fail to generalize. Existing methods for patch assessment involve generating new tests or manual inspection, which can be time-consuming or biased. In this paper, we propose a novel technique, INVALIDATOR, to automatically assess the correctness of APR-generated patches via semantic and syntactic reasoning. INVALIDATOR leverages program invariants to reason about program semantics while also capturing program syntax through language semantics learned from a large code corpus using a pre-trained language model. Given a buggy program and the developer-patched program, INVALIDATOR infers likely invariants on both programs. Then, INVALIDATOR determines that an APR-generated patch overfits if: (1) it violates correct specifications or (2) maintains erroneous behaviors from the original buggy program. In case our approach fails to determine an overfitting patch based on i",
    "link": "http://arxiv.org/abs/2301.01113",
    "context": "Title: Invalidator: Automated Patch Correctness Assessment via Semantic and Syntactic Reasoning. (arXiv:2301.01113v2 [cs.SE] UPDATED)\nAbstract: Automated program repair (APR) faces the challenge of test overfitting, where generated patches pass validation tests but fail to generalize. Existing methods for patch assessment involve generating new tests or manual inspection, which can be time-consuming or biased. In this paper, we propose a novel technique, INVALIDATOR, to automatically assess the correctness of APR-generated patches via semantic and syntactic reasoning. INVALIDATOR leverages program invariants to reason about program semantics while also capturing program syntax through language semantics learned from a large code corpus using a pre-trained language model. Given a buggy program and the developer-patched program, INVALIDATOR infers likely invariants on both programs. Then, INVALIDATOR determines that an APR-generated patch overfits if: (1) it violates correct specifications or (2) maintains erroneous behaviors from the original buggy program. In case our approach fails to determine an overfitting patch based on i",
    "path": "papers/23/01/2301.01113.json",
    "total_tokens": 1096,
    "translated_title": "Invalidator: 通过语义和语法推理实现自动修复程序的正确性评估",
    "translated_abstract": "自动程序修复面临测试过度拟合的挑战，即生成的补丁通过验证测试但未能推广。目前的缺陷修复评估方法包括生成新测试或手动检查，这可能耗时或具有偏见。本文提出了一种新的技术INVALIDATOR，通过语义和语法推理自动评估由APR生成的补丁的正确性。INVALIDATOR利用程序不变量推理程序语义，同时通过使用预训练语言模型从大型代码语料库中学习语言语法来捕获程序语法。给定有缺陷的程序和开发人员修复后的程序，INVALIDATOR推断出两个程序中可能的不变量。然后，INVALIDATOR确定APR生成的补丁过度拟合，如果：（1）它违反了正确的规范或（2）保留了原来有缺陷程序的错误行为。在我们的方法根据其程序分析无法确定过度拟合补丁的情况下，INVALIDATOR会回退到生成其他测试以进行进一步验证。我们在一组真实世界的错误基准上评估INVALIDATOR，并显示它在检测过度拟合补丁方面优于现有方法，同时更加高效。",
    "tldr": "本文提出了INVALIDATOR，一种使用语义和语法推理自动评估由APR生成的补丁的正确性的技术。INVALIDATOR利用程序不变量来推理程序的语义并捕获程序的语法，然后判断APR生成的补丁是否过度拟合。我们的实验结果表明INVALIDATOR在检测过度拟合补丁方面优于现有方法。",
    "en_tdlr": "This paper presents INVALIDATOR, a technique for automatically assessing the correctness of patches generated by automated program repair using semantic and syntactic reasoning. INVALIDATOR leverages program invariants to reason about program semantics while also capturing program syntax through language semantics learned from a large code corpus using a pre-trained language model. The approach determines if an APR-generated patch overfits by checking if it violates correct specifications or maintains erroneous behaviors from the original buggy program. Experimental results show that INVALIDATOR outperforms existing methods in detecting program patch overfitting."
}