{
    "title": "CRUSH4SQL: Collective Retrieval Using Schema Hallucination For Text2SQL. (arXiv:2311.01173v1 [cs.CL])",
    "abstract": "Existing Text-to-SQL generators require the entire schema to be encoded with the user text. This is expensive or impractical for large databases with tens of thousands of columns. Standard dense retrieval techniques are inadequate for schema subsetting of a large structured database, where the correct semantics of retrieval demands that we rank sets of schema elements rather than individual elements. In response, we propose a two-stage process for effective coverage during retrieval. First, we instruct an LLM to hallucinate a minimal DB schema deemed adequate to answer the query. We use the hallucinated schema to retrieve a subset of the actual schema, by composing the results from multiple dense retrievals. Remarkably, hallucination $\\unicode{x2013}$ generally considered a nuisance $\\unicode{x2013}$ turns out to be actually useful as a bridging mechanism. Since no existing benchmarks exist for schema subsetting on large databases, we introduce three benchmarks. Two semi-synthetic data",
    "link": "http://arxiv.org/abs/2311.01173",
    "context": "Title: CRUSH4SQL: Collective Retrieval Using Schema Hallucination For Text2SQL. (arXiv:2311.01173v1 [cs.CL])\nAbstract: Existing Text-to-SQL generators require the entire schema to be encoded with the user text. This is expensive or impractical for large databases with tens of thousands of columns. Standard dense retrieval techniques are inadequate for schema subsetting of a large structured database, where the correct semantics of retrieval demands that we rank sets of schema elements rather than individual elements. In response, we propose a two-stage process for effective coverage during retrieval. First, we instruct an LLM to hallucinate a minimal DB schema deemed adequate to answer the query. We use the hallucinated schema to retrieve a subset of the actual schema, by composing the results from multiple dense retrievals. Remarkably, hallucination $\\unicode{x2013}$ generally considered a nuisance $\\unicode{x2013}$ turns out to be actually useful as a bridging mechanism. Since no existing benchmarks exist for schema subsetting on large databases, we introduce three benchmarks. Two semi-synthetic data",
    "path": "papers/23/11/2311.01173.json",
    "total_tokens": 886,
    "translated_title": "CRUSH4SQL：使用模式幻觉进行Text2SQL的集体检索",
    "translated_abstract": "现有的Text-to-SQL生成器需要将整个模式与用户文本进行编码。对于具有成千上万列的大型数据库来说，这是昂贵或不可行的。标准的稠密检索技术对于大型结构化数据库的模式子集检索是不足够的，因为正确的检索语义要求我们对模式元素组进行排序，而不是单个元素。为此，我们提出了一个两阶段的检索过程来实现有效的覆盖。首先，我们指导LLM幻觉出一个被认为足够回答查询的最小数据库模式。我们使用幻觉的模式通过组合多个稠密检索的结果来检索实际模式的子集。显然，幻觉一直被认为是一个麻烦，但事实证明它实际上是一个有用的桥梁机制。由于目前还没有针对大型数据库的模式子集的现有基准，我们引入了三个基准。",
    "tldr": "CRUSH4SQL提出了一个两阶段的检索过程，使用模式幻觉进行Text2SQL的集体检索，通过幻觉的最小数据库模式检索实际模式的子集，解决了大型数据库中的模式子集检索问题。",
    "en_tdlr": "CRUSH4SQL proposes a two-stage retrieval process, using schema hallucination for collective retrieval in Text2SQL, solving the problem of schema subsetting in large databases by retrieving subsets of the actual schema through the minimal hallucinated schema."
}