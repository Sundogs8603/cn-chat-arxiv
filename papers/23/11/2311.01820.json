{
    "title": "Minimalist Grammar: Construction without Overgeneration. (arXiv:2311.01820v1 [cs.CL])",
    "abstract": "In this paper we give instructions on how to write a minimalist grammar (MG). In order to present the instructions as an algorithm, we use a variant of context free grammars (CFG) as an input format. We can exclude overgeneration, if the CFG has no recursion, i.e. no non-terminal can (indirectly) derive to a right-hand side containing itself. The constructed MGs utilize licensors/-ees as a special way of exception handling. A CFG format for a derivation $A\\_eats\\_B\\mapsto^* peter\\_eats\\_apples$, where $A$ and $B$ generate noun phrases, normally leads to overgeneration, e.\\,g., $i\\_eats\\_apples$. In order to avoid overgeneration, a CFG would need many non-terminal symbols and rules, that mainly produce the same word, just to handle exceptions. In our MGs however, we can summarize CFG rules that produce the same word in one item and handle exceptions by a proper distribution of licensees/-ors. The difficulty with this technique is that in most generations the majority of licensees/-ors i",
    "link": "http://arxiv.org/abs/2311.01820",
    "context": "Title: Minimalist Grammar: Construction without Overgeneration. (arXiv:2311.01820v1 [cs.CL])\nAbstract: In this paper we give instructions on how to write a minimalist grammar (MG). In order to present the instructions as an algorithm, we use a variant of context free grammars (CFG) as an input format. We can exclude overgeneration, if the CFG has no recursion, i.e. no non-terminal can (indirectly) derive to a right-hand side containing itself. The constructed MGs utilize licensors/-ees as a special way of exception handling. A CFG format for a derivation $A\\_eats\\_B\\mapsto^* peter\\_eats\\_apples$, where $A$ and $B$ generate noun phrases, normally leads to overgeneration, e.\\,g., $i\\_eats\\_apples$. In order to avoid overgeneration, a CFG would need many non-terminal symbols and rules, that mainly produce the same word, just to handle exceptions. In our MGs however, we can summarize CFG rules that produce the same word in one item and handle exceptions by a proper distribution of licensees/-ors. The difficulty with this technique is that in most generations the majority of licensees/-ors i",
    "path": "papers/23/11/2311.01820.json",
    "total_tokens": 901,
    "translated_title": "极简语法：无过度生成的构造",
    "translated_abstract": "本文介绍了如何编写极简语法（MG）的指南。为了将指南呈现为一种算法，我们使用上下文无关文法（CFG）的一种变体作为输入格式。如果CFG没有递归，即没有非终结符可以（间接）导出包含自身的右手边，则可以排除过度生成。构建的MG利用许可者/-被许可者作为特殊的异常处理方式。在一个推导$A\\_eats\\_B\\mapsto^* peter\\_eats\\_apples$的CFG格式中，其中$A$和$B$生成名词短语，通常会导致过度生成，例如$i\\_eats\\_apples$。为了避免过度生成，CFG需要许多非终结符和规则，主要产生相同的单词，以处理异常情况。然而，在我们的MG中，我们可以将产生相同单词的CFG规则总结为一个项目，并通过适当分配许可者/-被许可者来处理异常情况。使用这种技术的困难在于，在大多数生成过程中，许多许可者/-被许可者无效",
    "tldr": "该论文介绍了如何编写极简语法，并利用许可者/-被许可者来处理异常情况，避免过度生成。",
    "en_tdlr": "This paper provides instructions on how to write a minimalist grammar (MG) and introduces the use of licensors/-ees to handle exceptions and prevent overgeneration."
}