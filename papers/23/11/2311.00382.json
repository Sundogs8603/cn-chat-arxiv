{
    "title": "Will Code Remain a Relevant User Interface for End-User Programming with Generative AI Models?. (arXiv:2311.00382v1 [cs.HC])",
    "abstract": "The research field of end-user programming has largely been concerned with helping non-experts learn to code sufficiently well in order to achieve their tasks. Generative AI stands to obviate this entirely by allowing users to generate code from naturalistic language prompts. In this essay, we explore the extent to which \"traditional\" programming languages remain relevant for non-expert end-user programmers in a world with generative AI. We posit the \"generative shift hypothesis\": that generative AI will create qualitative and quantitative expansions in the traditional scope of end-user programming. We outline some reasons that traditional programming languages may still be relevant and useful for end-user programmers. We speculate whether each of these reasons might be fundamental and enduring, or whether they may disappear with further improvements and innovations in generative AI. Finally, we articulate a set of implications for end-user programming research, including the possibili",
    "link": "http://arxiv.org/abs/2311.00382",
    "context": "Title: Will Code Remain a Relevant User Interface for End-User Programming with Generative AI Models?. (arXiv:2311.00382v1 [cs.HC])\nAbstract: The research field of end-user programming has largely been concerned with helping non-experts learn to code sufficiently well in order to achieve their tasks. Generative AI stands to obviate this entirely by allowing users to generate code from naturalistic language prompts. In this essay, we explore the extent to which \"traditional\" programming languages remain relevant for non-expert end-user programmers in a world with generative AI. We posit the \"generative shift hypothesis\": that generative AI will create qualitative and quantitative expansions in the traditional scope of end-user programming. We outline some reasons that traditional programming languages may still be relevant and useful for end-user programmers. We speculate whether each of these reasons might be fundamental and enduring, or whether they may disappear with further improvements and innovations in generative AI. Finally, we articulate a set of implications for end-user programming research, including the possibili",
    "path": "papers/23/11/2311.00382.json",
    "total_tokens": 881,
    "translated_title": "编码在使用生成式AI模型进行终端用户编程中是否仍然具有相关性？",
    "translated_abstract": "终端用户编程的研究领域一直致力于帮助非专业人士学习足够好的编码，以便完成他们的任务。生成式人工智能可以通过自然语言提示生成代码，从而完全消除这一需求。在本文中，我们探讨在具有生成式人工智能的世界中，“传统”编程语言对非专业终端用户程序员仍然相关的程度。我们提出了“生成转变假设”：生成式人工智能将在终端用户编程的传统范围上创造定性和定量的扩展。我们概述了传统编程语言可能仍然对终端用户程序员有用的一些原因。我们推测这些原因是否可能是根本和持久的，或者它们是否会随着生成式人工智能的进一步改进和创新而消失。最后，我们阐述了对终端用户编程研究的一系列影响，包括可能性。",
    "tldr": "这篇论文探讨了生成式人工智能对终端用户编程的影响，提出了生成转变假设，并讨论了传统编程语言对非专业终端用户程序员仍然具有相关性的原因和可能性。",
    "en_tdlr": "This paper explores the impact of generative AI on end-user programming, proposes the generative shift hypothesis, and discusses the reasons and possibilities for the relevance of traditional programming languages to non-expert end-user programmers."
}