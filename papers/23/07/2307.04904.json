{
    "title": "Fast dynamic time warping and clustering in C++. (arXiv:2307.04904v1 [eess.SP])",
    "abstract": "We present an approach for computationally efficient dynamic time warping (DTW) and clustering of time-series data. The method frames the dynamic warping of time series datasets as an optimisation problem solved using dynamic programming, and then clusters time series data by solving a second optimisation problem using mixed-integer programming (MIP). There is also an option to use k-medoids clustering for increased speed, when a certificate for global optimality is not essential. The improved efficiency of our approach is due to task-level parallelisation of the clustering alongside DTW. Our approach was tested using the UCR Time Series Archive, and was found to be, on average, 33% faster than the next fastest option when using the same clustering method. This increases to 64% faster when considering only larger datasets (with more than 1000 time series). The MIP clustering is most effective on small numbers of longer time series, because the DTW computation is faster than other appro",
    "link": "http://arxiv.org/abs/2307.04904",
    "context": "Title: Fast dynamic time warping and clustering in C++. (arXiv:2307.04904v1 [eess.SP])\nAbstract: We present an approach for computationally efficient dynamic time warping (DTW) and clustering of time-series data. The method frames the dynamic warping of time series datasets as an optimisation problem solved using dynamic programming, and then clusters time series data by solving a second optimisation problem using mixed-integer programming (MIP). There is also an option to use k-medoids clustering for increased speed, when a certificate for global optimality is not essential. The improved efficiency of our approach is due to task-level parallelisation of the clustering alongside DTW. Our approach was tested using the UCR Time Series Archive, and was found to be, on average, 33% faster than the next fastest option when using the same clustering method. This increases to 64% faster when considering only larger datasets (with more than 1000 time series). The MIP clustering is most effective on small numbers of longer time series, because the DTW computation is faster than other appro",
    "path": "papers/23/07/2307.04904.json",
    "total_tokens": 949,
    "translated_title": "快速动态时间规整和聚类在C++中的应用",
    "translated_abstract": "我们提出了一种计算效率高的动态时间规整（DTW）和时间序列数据聚类的方法。该方法将时间序列数据的动态规整问题视为使用动态规划求解的优化问题，然后使用混合整数规划（MIP）求解第二个优化问题来进行时间序列数据聚类。当全局最优性的证明不是必需时，还可以使用k-medoids聚类来增加速度。我们的方法的改进效率源于聚类和DTW的任务级并行化。我们使用UCR时间序列存档对我们的方法进行了测试，发现当使用相同的聚类方法时，我们的方法的速度平均比下一个最快的选项快33%。在考虑只有较大数据集（超过1000个时间序列）时，速度提高到64%。由于DTW计算速度较快，MIP聚类在少量较长时间序列上效果最好。",
    "tldr": "这种方法提出了一种计算效率高的动态时间规整（DTW）和时间序列数据聚类的方法，在保证全局最优性不是必需的情况下，使用混合整数规划（MIP）和k-medoids聚类来增加速度，同时实现了任务级并行化，通过测试发现比其他选项快33%，在大数据集上速度提高到64%。",
    "en_tdlr": "This approach proposes a computationally efficient method for dynamic time warping (DTW) and clustering of time-series data. It solves the optimization problem of dynamic warping using dynamic programming and uses mixed-integer programming (MIP) and k-medoids clustering to increase speed when global optimality is not essential. Task-level parallelization is employed to improve efficiency, and the method outperforms other options by 33% on average and up to 64% for larger datasets."
}