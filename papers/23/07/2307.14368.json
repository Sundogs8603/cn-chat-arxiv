{
    "title": "Synthesis of Procedural Models for Deterministic Transition Systems. (arXiv:2307.14368v1 [cs.FL])",
    "abstract": "This paper introduces a general approach for synthesizing procedural models of the state-transitions of a given discrete system. The approach is general in that it accepts different target languages for modeling the state-transitions of a discrete system; different model acquisition tasks with different target languages, such as the synthesis of STRIPS action models, or the update rule of a cellular automaton, fit as particular instances of our general approach. We follow an inductive approach to synthesis meaning that a set of examples of state-transitions, represented as (pre-state, action, post-state) tuples, are given as input. The goal is to synthesize a structured program that, when executed on a given pre-state, outputs its associated post-state. Our synthesis method implements a combinatorial search in the space of well-structured terminating programs that can be built using a Random-Access Machine (RAM), with a minimalist instruction set, and a finite amount of memory. The com",
    "link": "http://arxiv.org/abs/2307.14368",
    "context": "Title: Synthesis of Procedural Models for Deterministic Transition Systems. (arXiv:2307.14368v1 [cs.FL])\nAbstract: This paper introduces a general approach for synthesizing procedural models of the state-transitions of a given discrete system. The approach is general in that it accepts different target languages for modeling the state-transitions of a discrete system; different model acquisition tasks with different target languages, such as the synthesis of STRIPS action models, or the update rule of a cellular automaton, fit as particular instances of our general approach. We follow an inductive approach to synthesis meaning that a set of examples of state-transitions, represented as (pre-state, action, post-state) tuples, are given as input. The goal is to synthesize a structured program that, when executed on a given pre-state, outputs its associated post-state. Our synthesis method implements a combinatorial search in the space of well-structured terminating programs that can be built using a Random-Access Machine (RAM), with a minimalist instruction set, and a finite amount of memory. The com",
    "path": "papers/23/07/2307.14368.json",
    "total_tokens": 853,
    "translated_title": "指定过渡系统的过程化模型综合",
    "translated_abstract": "本文介绍了一种通用的方法，用于综合给定离散系统的状态过渡的过程化模型。该方法是通用的，因为它接受不同的目标语言来对离散系统的状态过渡进行建模；不同的目标语言与不同的模型获取任务，例如STRIPS动作模型的综合，或细胞自动机的更新规则，都适用于我们的通用方法。我们采用归纳式综合方法，即将状态过渡的示例集合（表示为（前状态，动作，后状态）元组）作为输入。目标是综合出一个结构化程序，该程序在给定前状态上执行时输出其关联的后状态。我们的综合方法在一个具有极简指令集和有限内存的随机访问机器（RAM）的良构终止程序空间中实现组合搜索。",
    "tldr": "本文介绍了一种通用方法，用于综合离散系统的状态过渡的过程化模型，并采用归纳式综合方法。该方法可以接受不同目标语言并应用于不同模型获取任务，从而实现了结构化程序的综合。"
}