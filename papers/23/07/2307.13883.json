{
    "title": "ExeDec: Execution Decomposition for Compositional Generalization in Neural Program Synthesis. (arXiv:2307.13883v1 [cs.LG])",
    "abstract": "When writing programs, people have the ability to tackle a new complex task by decomposing it into smaller and more familiar subtasks. While it is difficult to measure whether neural program synthesis methods have similar capabilities, we can measure whether they compositionally generalize, that is, whether a model that has been trained on the simpler subtasks is subsequently able to solve more complex tasks. In this paper, we characterize several different forms of compositional generalization that are desirable in program synthesis, forming a meta-benchmark which we use to create generalization tasks for two popular datasets, RobustFill and DeepCoder. We then propose ExeDec, a novel decomposition-based synthesis strategy that predicts execution subgoals to solve problems step-by-step informed by program execution at each step. ExeDec has better synthesis performance and greatly improved compositional generalization ability compared to baselines.",
    "link": "http://arxiv.org/abs/2307.13883",
    "context": "Title: ExeDec: Execution Decomposition for Compositional Generalization in Neural Program Synthesis. (arXiv:2307.13883v1 [cs.LG])\nAbstract: When writing programs, people have the ability to tackle a new complex task by decomposing it into smaller and more familiar subtasks. While it is difficult to measure whether neural program synthesis methods have similar capabilities, we can measure whether they compositionally generalize, that is, whether a model that has been trained on the simpler subtasks is subsequently able to solve more complex tasks. In this paper, we characterize several different forms of compositional generalization that are desirable in program synthesis, forming a meta-benchmark which we use to create generalization tasks for two popular datasets, RobustFill and DeepCoder. We then propose ExeDec, a novel decomposition-based synthesis strategy that predicts execution subgoals to solve problems step-by-step informed by program execution at each step. ExeDec has better synthesis performance and greatly improved compositional generalization ability compared to baselines.",
    "path": "papers/23/07/2307.13883.json",
    "total_tokens": 851,
    "translated_title": "ExeDec: 在神经程序合成中进行执行分解以实现组合泛化",
    "translated_abstract": "在编写程序时，人们通过将复杂任务分解为较小且更熟悉的子任务来解决。虽然衡量神经程序合成方法是否具有类似的能力是困难的，但我们可以衡量它们是否能够进行组合泛化，即经过训练在较简单的子任务上的模型是否能够解决更复杂的任务。在本文中，我们描述了在程序合成中希望的几种不同形式的组合泛化，并形成一个元基准，用于为两个受欢迎的数据集RobustFill和DeepCoder创建泛化任务。然后，我们提出了一种新颖的基于分解的合成策略ExeDec，它通过在每个步骤的程序执行的指导下逐步预测执行子目标来解决问题。与基线方法相比，ExeDec具有更佳的合成性能和大大改进的组合泛化能力。",
    "tldr": "ExeDec是一种基于分解的合成策略，通过预测执行子目标并在每个步骤的程序执行的指导下逐步解决问题，实现了更好的合成性能和组合泛化能力。",
    "en_tdlr": "ExeDec is a decomposition-based synthesis strategy that predicts execution subgoals and solves problems step-by-step guided by program execution at each step, achieving better synthesis performance and compositional generalization ability."
}