{
    "title": "MGit: A Model Versioning and Management System. (arXiv:2307.07507v1 [cs.LG])",
    "abstract": "Models derived from other models are extremely common in machine learning (ML) today. For example, transfer learning is used to create task-specific models from \"pre-trained\" models through finetuning. This has led to an ecosystem where models are related to each other, sharing structure and often even parameter values. However, it is hard to manage these model derivatives: the storage overhead of storing all derived models quickly becomes onerous, prompting users to get rid of intermediate models that might be useful for further analysis. Additionally, undesired behaviors in models are hard to track down (e.g., is a bug inherited from an upstream model?). In this paper, we propose a model versioning and management system called MGit that makes it easier to store, test, update, and collaborate on model derivatives. MGit introduces a lineage graph that records provenance and versioning information between models, optimizations to efficiently store model parameters, as well as abstractio",
    "link": "http://arxiv.org/abs/2307.07507",
    "context": "Title: MGit: A Model Versioning and Management System. (arXiv:2307.07507v1 [cs.LG])\nAbstract: Models derived from other models are extremely common in machine learning (ML) today. For example, transfer learning is used to create task-specific models from \"pre-trained\" models through finetuning. This has led to an ecosystem where models are related to each other, sharing structure and often even parameter values. However, it is hard to manage these model derivatives: the storage overhead of storing all derived models quickly becomes onerous, prompting users to get rid of intermediate models that might be useful for further analysis. Additionally, undesired behaviors in models are hard to track down (e.g., is a bug inherited from an upstream model?). In this paper, we propose a model versioning and management system called MGit that makes it easier to store, test, update, and collaborate on model derivatives. MGit introduces a lineage graph that records provenance and versioning information between models, optimizations to efficiently store model parameters, as well as abstractio",
    "path": "papers/23/07/2307.07507.json",
    "total_tokens": 863,
    "translated_title": "MGit:一个模型版本控制和管理系统",
    "translated_abstract": "从其他模型派生出的模型在机器学习中非常常见。例如，通过微调，迁移学习用于从“预训练”模型创建特定任务的模型。这导致了一个模型之间相关且共享结构甚至参数值的生态系统。然而，管理这些模型派生物是困难的：存储所有派生模型的开销很快变得繁重，导致用户丢弃可能对进一步分析有用的中间模型。此外，难以追踪模型中的不良行为（例如，是否从上游模型继承了一个错误？）。在本文中，我们提出了一个名为MGit的模型版本控制和管理系统，它使得存储、测试、更新和协作模型派生物更加容易。MGit引入了一个记录模型之间来源和版本信息的血统图，以及优化存储模型参数的抽象机制。",
    "tldr": "MGit是一个模型版本控制和管理系统，解决了机器学习中模型派生物的困难管理问题，通过引入血统图和优化存储机制，使得存储、测试、更新和协作模型派生物更加容易。",
    "en_tdlr": "MGit is a model versioning and management system that addresses the challenges of managing model derivatives in machine learning, by introducing a lineage graph and optimizing storage mechanisms, making it easier to store, test, update, and collaborate on model derivatives."
}