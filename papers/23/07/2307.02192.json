{
    "title": "The FormAI Dataset: Generative AI in Software Security Through the Lens of Formal Verification. (arXiv:2307.02192v2 [cs.DB] UPDATED)",
    "abstract": "This paper presents the FormAI dataset, a large collection of 112, 000 AI-generated compilable and independent C programs with vulnerability classification. We introduce a dynamic zero-shot prompting technique constructed to spawn diverse programs utilizing Large Language Models (LLMs). The dataset is generated by GPT-3.5-turbo and comprises programs with varying levels of complexity. Some programs handle complicated tasks like network management, table games, or encryption, while others deal with simpler tasks like string manipulation. Every program is labeled with the vulnerabilities found within the source code, indicating the type, line number, and vulnerable function name. This is accomplished by employing a formal verification method using the Efficient SMT-based Bounded Model Checker (ESBMC), which uses model checking, abstract interpretation, constraint programming, and satisfiability modulo theories to reason over safety/security properties in programs. This approach definitiv",
    "link": "http://arxiv.org/abs/2307.02192",
    "context": "Title: The FormAI Dataset: Generative AI in Software Security Through the Lens of Formal Verification. (arXiv:2307.02192v2 [cs.DB] UPDATED)\nAbstract: This paper presents the FormAI dataset, a large collection of 112, 000 AI-generated compilable and independent C programs with vulnerability classification. We introduce a dynamic zero-shot prompting technique constructed to spawn diverse programs utilizing Large Language Models (LLMs). The dataset is generated by GPT-3.5-turbo and comprises programs with varying levels of complexity. Some programs handle complicated tasks like network management, table games, or encryption, while others deal with simpler tasks like string manipulation. Every program is labeled with the vulnerabilities found within the source code, indicating the type, line number, and vulnerable function name. This is accomplished by employing a formal verification method using the Efficient SMT-based Bounded Model Checker (ESBMC), which uses model checking, abstract interpretation, constraint programming, and satisfiability modulo theories to reason over safety/security properties in programs. This approach definitiv",
    "path": "papers/23/07/2307.02192.json",
    "total_tokens": 880,
    "translated_title": "FormAI数据集：以形式验证为视角的软件安全生成AI",
    "translated_abstract": "本文介绍了FormAI数据集，这是一个包含112,000个具有漏洞分类的AI生成的可编译和独立的C程序的大型集合。我们引入了一种动态零-shot提示技术，用于生成利用大型语言模型（LLMs）的多样化程序。该数据集由GPT-3.5-turbo生成，并包含具有不同复杂度的程序。有些程序处理复杂任务，如网络管理、桌面游戏或加密，而其他程序处理简单任务，如字符串操作。每个程序都用源代码中找到的漏洞进行标记，指示类型、行号和漏洞函数名。这是通过使用高效的基于SMT的有界模型检查器（ESBMC）的形式验证方法实现的。该方法使用模型检查、抽象解释、约束编程和可满足性模理论来推理程序中的安全性/安全属性。这种方法确定了和验证了程序的安全性和可靠性。",
    "tldr": "本文介绍了一个名为FormAI的数据集，其中包含112,000个可编译的C程序，利用动态零-shot提示技术生成。这些程序经过形式验证，标记了源代码中的漏洞，并使用多种技术来提高程序的安全性和可靠性。"
}