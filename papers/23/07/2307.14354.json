{
    "title": "Learned Gridification for Efficient Point Cloud Processing. (arXiv:2307.14354v1 [cs.CV])",
    "abstract": "Neural operations that rely on neighborhood information are much more expensive when deployed on point clouds than on grid data due to the irregular distances between points in a point cloud. In a grid, on the other hand, we can compute the kernel only once and reuse it for all query positions. As a result, operations that rely on neighborhood information scale much worse for point clouds than for grid data, specially for large inputs and large neighborhoods.  In this work, we address the scalability issue of point cloud methods by tackling its root cause: the irregularity of the data. We propose learnable gridification as the first step in a point cloud processing pipeline to transform the point cloud into a compact, regular grid. Thanks to gridification, subsequent layers can use operations defined on regular grids, e.g., Conv3D, which scale much better than native point cloud methods. We then extend gridification to point cloud to point cloud tasks, e.g., segmentation, by adding a l",
    "link": "http://arxiv.org/abs/2307.14354",
    "context": "Title: Learned Gridification for Efficient Point Cloud Processing. (arXiv:2307.14354v1 [cs.CV])\nAbstract: Neural operations that rely on neighborhood information are much more expensive when deployed on point clouds than on grid data due to the irregular distances between points in a point cloud. In a grid, on the other hand, we can compute the kernel only once and reuse it for all query positions. As a result, operations that rely on neighborhood information scale much worse for point clouds than for grid data, specially for large inputs and large neighborhoods.  In this work, we address the scalability issue of point cloud methods by tackling its root cause: the irregularity of the data. We propose learnable gridification as the first step in a point cloud processing pipeline to transform the point cloud into a compact, regular grid. Thanks to gridification, subsequent layers can use operations defined on regular grids, e.g., Conv3D, which scale much better than native point cloud methods. We then extend gridification to point cloud to point cloud tasks, e.g., segmentation, by adding a l",
    "path": "papers/23/07/2307.14354.json",
    "total_tokens": 860,
    "translated_title": "学习网格化以提高点云处理效率",
    "translated_abstract": "与网格数据相比，点云上依赖于邻域信息的神经操作会更加昂贵，因为点云中点之间的距离是不规则的。另一方面，在网格上，我们可以仅计算一次卷积核，然后重用它来处理所有查询位置。因此，与网格数据相比，依赖于邻域信息的操作在点云上的可扩展性更差，特别是对于大输入和大邻域。在这项工作中，我们通过解决数据的不规则性来解决点云方法的可扩展性问题。我们提出了可学习的网格化作为点云处理流程的第一步，将点云转换为紧凑、规则的网格。通过网格化，后续的层可以使用在规则网格上定义的操作，例如Conv3D，这比原生的点云方法具有更好的可扩展性。然后，我们将网格化扩展到点云到点云的任务，例如分割，通过添加一个...",
    "tldr": "本论文提出了学习网格化方法，用于将点云转换为紧凑、规则的网格，在点云处理中提高了可扩展性，特别是对于大输入和大邻域。"
}