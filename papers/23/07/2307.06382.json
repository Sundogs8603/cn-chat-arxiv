{
    "title": "Rethinking Answer Set Programming Templates. (arXiv:2307.06382v1 [cs.AI])",
    "abstract": "In imperative programming, the Domain-Driven Design methodology helps in coping with the complexity of software development by materializing in code the invariants of a domain of interest. Code is cleaner and more secure because any implicit assumption is removed in favor of invariants, thus enabling a fail fast mindset and the immediate reporting of unexpected conditions. This article introduces a notion of template for Answer Set Programming that, in addition to the don't repeat yourself principle, enforces locality of some predicates by means of a simple naming convention. Local predicates are mapped to the usual global namespace adopted by mainstream engines, using universally unique identifiers to avoid name clashes. This way, local predicates can be used to enforce invariants on the expected outcome of a template in a possibly empty context of application, independently by other rules that can be added to such a context. Template applications transpiled this way can be processed ",
    "link": "http://arxiv.org/abs/2307.06382",
    "context": "Title: Rethinking Answer Set Programming Templates. (arXiv:2307.06382v1 [cs.AI])\nAbstract: In imperative programming, the Domain-Driven Design methodology helps in coping with the complexity of software development by materializing in code the invariants of a domain of interest. Code is cleaner and more secure because any implicit assumption is removed in favor of invariants, thus enabling a fail fast mindset and the immediate reporting of unexpected conditions. This article introduces a notion of template for Answer Set Programming that, in addition to the don't repeat yourself principle, enforces locality of some predicates by means of a simple naming convention. Local predicates are mapped to the usual global namespace adopted by mainstream engines, using universally unique identifiers to avoid name clashes. This way, local predicates can be used to enforce invariants on the expected outcome of a template in a possibly empty context of application, independently by other rules that can be added to such a context. Template applications transpiled this way can be processed ",
    "path": "papers/23/07/2307.06382.json",
    "total_tokens": 860,
    "translated_title": "重新思考答案集编程模板",
    "translated_abstract": "在命令式编程中，领域驱动设计方法论通过将领域中的不变量体现在代码中，帮助应对软件开发的复杂性。代码更清晰、更安全，因为任何隐含的假设都被移除，转而使用不变量，从而实现快速失败的思维方式并立即报告未预期的条件。本文介绍了一种答案集编程模板的概念，除了遵循不重复自己原则外，还通过简单的命名约定强制某些谓词的局部性。局部谓词被映射到主流引擎采用的通用全局命名空间，使用全局唯一标识符来避免名称冲突。这种方式，局部谓词可以用于在可能为空的应用上下文中强制执行对模板预期结果的不变性，而不受其他可以添加到该上下文的规则的影响。使用这种方式转换的模板应用可以被处理。",
    "tldr": "本文提出了一种答案集编程模板的概念，通过使用简单的命名约定，强制某些谓词的局部性，从而实现了对模板预期结果的不变性，并且避免了名称冲突。",
    "en_tdlr": "This article introduces a notion of template for Answer Set Programming that enforces locality of some predicates by means of a simple naming convention, ensuring invariants on the expected outcome of a template and avoiding name clashes."
}