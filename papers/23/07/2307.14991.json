{
    "title": "Multilingual Code Co-Evolution Using Large Language Models. (arXiv:2307.14991v1 [cs.SE])",
    "abstract": "Many software projects implement APIs and algorithms in multiple programming languages. Maintaining such projects is tiresome, as developers have to ensure that any change (e.g., a bug fix or a new feature) is being propagated, timely and without errors, to implementations in other programming languages. In the world of ever-changing software, using rule-based translation tools (i.e., transpilers) or machine learning models for translating code from one language to another provides limited value. Translating each time the entire codebase from one language to another is not the way developers work. In this paper, we target a novel task: translating code changes from one programming language to another using large language models (LLMs). We design and implement the first LLM, dubbed Codeditor, to tackle this task. Codeditor explicitly models code changes as edit sequences and learns to correlate changes across programming languages. To evaluate Codeditor, we collect a corpus of 6,613 ali",
    "link": "http://arxiv.org/abs/2307.14991",
    "context": "Title: Multilingual Code Co-Evolution Using Large Language Models. (arXiv:2307.14991v1 [cs.SE])\nAbstract: Many software projects implement APIs and algorithms in multiple programming languages. Maintaining such projects is tiresome, as developers have to ensure that any change (e.g., a bug fix or a new feature) is being propagated, timely and without errors, to implementations in other programming languages. In the world of ever-changing software, using rule-based translation tools (i.e., transpilers) or machine learning models for translating code from one language to another provides limited value. Translating each time the entire codebase from one language to another is not the way developers work. In this paper, we target a novel task: translating code changes from one programming language to another using large language models (LLMs). We design and implement the first LLM, dubbed Codeditor, to tackle this task. Codeditor explicitly models code changes as edit sequences and learns to correlate changes across programming languages. To evaluate Codeditor, we collect a corpus of 6,613 ali",
    "path": "papers/23/07/2307.14991.json",
    "total_tokens": 978,
    "translated_title": "使用大型语言模型的多语言代码共同演进",
    "translated_abstract": "许多软件项目在多种编程语言中实现API和算法。维护这样的项目很繁琐，因为开发人员必须确保任何变化（例如错误修复或新功能）能够及时且无误地传播到其他编程语言的实现中。在不断变化的软件世界中，使用基于规则的翻译工具（例如转译器）或用于将代码从一种语言翻译成另一种语言的机器学习模型提供有限的价值。每次将整个代码库从一种语言翻译到另一种语言的方式并不符合开发人员的工作方式。在本文中，我们针对一个新颖的任务：使用大型语言模型（LLMs）将代码更改从一种编程语言翻译到另一种编程语言。我们设计并实现了第一个LLM，名为Codeditor，来处理这个任务。Codeditor明确地将代码更改建模为编辑序列，并学习在编程语言之间建立更改的关联性。为了评估Codeditor，我们收集了一个包含6,613个示例的语料库。",
    "tldr": "本文介绍了使用大型语言模型（LLMs）将代码更改从一种编程语言翻译到另一种编程语言的方法。通过设计和实现第一个LLM，Codeditor，以将代码更改建模为编辑序列，并学习不同编程语言之间的关联性，我们为多语言代码共同演进提供了一种新的解决方法。",
    "en_tdlr": "This paper presents a method for translating code changes from one programming language to another using large language models (LLMs). By designing and implementing the first LLM, Codeditor, which models code changes as edit sequences and learns correlations across programming languages, a novel approach is provided for multilingual code co-evolution."
}