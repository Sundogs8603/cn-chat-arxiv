{
    "title": "Oracle Computability and Turing Reducibility in the Calculus of Inductive Constructions. (arXiv:2307.15543v1 [cs.LO])",
    "abstract": "We develop synthetic notions of oracle computability and Turing reducibility in the Calculus of Inductive Constructions (CIC), the constructive type theory underlying the Coq proof assistant. As usual in synthetic approaches, we employ a definition of oracle computations based on meta-level functions rather than object-level models of computation, relying on the fact that in constructive systems such as CIC all definable functions are computable by construction. Such an approach lends itself well to machine-checked proofs, which we carry out in Coq.  There is a tension in finding a good synthetic rendering of the higher-order notion of oracle computability. On the one hand, it has to be informative enough to prove central results, ensuring that all notions are faithfully captured. On the other hand, it has to be restricted enough to benefit from axioms for synthetic computability, which usually concern first-order objects. Drawing inspiration from a definition by Andrej Bauer based on ",
    "link": "http://arxiv.org/abs/2307.15543",
    "context": "Title: Oracle Computability and Turing Reducibility in the Calculus of Inductive Constructions. (arXiv:2307.15543v1 [cs.LO])\nAbstract: We develop synthetic notions of oracle computability and Turing reducibility in the Calculus of Inductive Constructions (CIC), the constructive type theory underlying the Coq proof assistant. As usual in synthetic approaches, we employ a definition of oracle computations based on meta-level functions rather than object-level models of computation, relying on the fact that in constructive systems such as CIC all definable functions are computable by construction. Such an approach lends itself well to machine-checked proofs, which we carry out in Coq.  There is a tension in finding a good synthetic rendering of the higher-order notion of oracle computability. On the one hand, it has to be informative enough to prove central results, ensuring that all notions are faithfully captured. On the other hand, it has to be restricted enough to benefit from axioms for synthetic computability, which usually concern first-order objects. Drawing inspiration from a definition by Andrej Bauer based on ",
    "path": "papers/23/07/2307.15543.json",
    "total_tokens": 891,
    "translated_title": "Oracle计算可行性和图灵可归约在归纳构造演算中的研究",
    "translated_abstract": "我们在Coq证明助手中的归纳构造演算（CIC）中，发展了Oracle计算可行性和图灵可归约的合成概念。在合成方法中，我们采用基于元级函数而不是基于对象级计算模型的oracle计算定义，依赖于构造系统中的可计算性。这种方法非常适合于机器验证的证明，我们在Coq中进行了验证。在找到合适的高阶oracle计算的合成表示时存在一些紧张关系。一方面，它必须足够信息丰富以证明中心结果，确保所有概念都被忠实地捕捉到。另一方面，它必须受限以获取合成可计算性的公理的好处，这些公理通常涉及一阶对象。借鉴Andrey Bauer基于一阶对象的定义，我们得到启发...",
    "tldr": "本研究在Coq证明助手中的归纳构造演算（CIC）中，发展了Oracle计算可行性和图灵可归约的合成概念，并通过机器验证的方式进行了验证。这为处理高阶oracle计算提供了一种有用的策略。",
    "en_tdlr": "This research develops synthetic notions of oracle computability and Turing reducibility in the Calculus of Inductive Constructions (CIC), and verifies them using machine-checking in the Coq proof assistant, providing a useful strategy for handling higher-order oracle computations."
}