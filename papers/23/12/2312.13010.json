{
    "title": "AgentCoder: Multi-Agent-based Code Generation with Iterative Testing and Optimisation. (arXiv:2312.13010v2 [cs.CL] UPDATED)",
    "abstract": "The advancement of natural language processing (NLP) has been significantly boosted by the development of transformer-based large language models (LLMs). These models have revolutionized NLP tasks, particularly in code generation, aiding developers in creating software with enhanced efficiency. Despite their advancements, challenges in balancing code snippet generation with effective test case generation and execution persist. To address these issues, this paper introduces Multi-Agent Assistant Code Generation (AgentCoder), a novel solution comprising a multi-agent framework with specialized agents: the programmer agent, the test designer agent, and the test executor agent. During the coding procedure, the programmer agent will focus on the code generation and refinement based on the test executor agent's feedback. The test designer agent will generate test cases for the generated code, and the test executor agent will run the code with the test cases and write the feedback to the prog",
    "link": "http://arxiv.org/abs/2312.13010",
    "context": "Title: AgentCoder: Multi-Agent-based Code Generation with Iterative Testing and Optimisation. (arXiv:2312.13010v2 [cs.CL] UPDATED)\nAbstract: The advancement of natural language processing (NLP) has been significantly boosted by the development of transformer-based large language models (LLMs). These models have revolutionized NLP tasks, particularly in code generation, aiding developers in creating software with enhanced efficiency. Despite their advancements, challenges in balancing code snippet generation with effective test case generation and execution persist. To address these issues, this paper introduces Multi-Agent Assistant Code Generation (AgentCoder), a novel solution comprising a multi-agent framework with specialized agents: the programmer agent, the test designer agent, and the test executor agent. During the coding procedure, the programmer agent will focus on the code generation and refinement based on the test executor agent's feedback. The test designer agent will generate test cases for the generated code, and the test executor agent will run the code with the test cases and write the feedback to the prog",
    "path": "papers/23/12/2312.13010.json",
    "total_tokens": 836,
    "translated_title": "AgentCoder: 基于多Agent的代码生成和迭代测试与优化",
    "translated_abstract": "自然语言处理(NLP)的发展在大型语言模型(LLM)的发展推动下取得了显著的进展。这些模型在代码生成方面实现了革命性的突破，帮助开发人员提高软件的效率。尽管取得了这些进展，但在平衡代码段的生成与有效的测试用例生成和执行方面仍存在挑战。为了解决这些问题，本文介绍了一种新颖的解决方案——多Agent助手代码生成(AgentCoder)，该解决方案包括一个多Agent框架和专门的Agent：程序员Agent、测试设计师Agent和测试执行Agent。在编码过程中，程序员Agent将根据测试执行Agent的反馈重点关注代码的生成和改进。测试设计师Agent将为生成的代码生成测试用例，测试执行Agent将使用测试用例运行代码并将反馈写入到编程者",
    "tldr": "AgentCoder是一种基于多Agent的代码生成和测试优化解决方案，通过程序员Agent、测试设计师Agent和测试执行Agent的协作，实现了在平衡代码生成和有效测试用例生成与执行方面的挑战中的突破。",
    "en_tdlr": "AgentCoder is a multi-agent-based solution for code generation and testing optimization, which addresses the challenges of balancing code generation with effective test case generation and execution through collaboration of programmer agent, test designer agent, and test executor agent."
}