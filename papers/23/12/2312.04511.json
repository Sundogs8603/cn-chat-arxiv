{
    "title": "An LLM Compiler for Parallel Function Calling",
    "abstract": "Recent language models have shown remarkable results on various complex reasoning benchmarks. The reasoning capabilities of LLMs enable them to execute external function calls to overcome their inherent limitations, such as knowledge cutoffs, poor arithmetic skills, or lack of access to private data. This development has allowed LLMs to select and coordinate multiple functions based on the context to tackle more complex problems. However, current methods for multiple function calling often require sequential reasoning and acting for each function which can result in high latency, cost, and sometimes inaccurate behavior. To address this, we introduce LLMCompiler, which executes functions in parallel to efficiently orchestrate multiple function calling. Drawing from the principles of classical compilers, LLMCompiler streamlines parallel function calling with three components: (i) an LLM Planner, formulating execution plans; (ii) a Task Fetching Unit, dispatching function calling tasks; a",
    "link": "https://arxiv.org/abs/2312.04511",
    "context": "Title: An LLM Compiler for Parallel Function Calling\nAbstract: Recent language models have shown remarkable results on various complex reasoning benchmarks. The reasoning capabilities of LLMs enable them to execute external function calls to overcome their inherent limitations, such as knowledge cutoffs, poor arithmetic skills, or lack of access to private data. This development has allowed LLMs to select and coordinate multiple functions based on the context to tackle more complex problems. However, current methods for multiple function calling often require sequential reasoning and acting for each function which can result in high latency, cost, and sometimes inaccurate behavior. To address this, we introduce LLMCompiler, which executes functions in parallel to efficiently orchestrate multiple function calling. Drawing from the principles of classical compilers, LLMCompiler streamlines parallel function calling with three components: (i) an LLM Planner, formulating execution plans; (ii) a Task Fetching Unit, dispatching function calling tasks; a",
    "path": "papers/23/12/2312.04511.json",
    "total_tokens": 846,
    "translated_title": "一种用于并行函数调用的LLM编译器",
    "translated_abstract": "最近的语言模型在各种复杂推理基准测试中取得了显著的成果。LLM的推理能力使它们能够执行外部函数调用，以克服它们的固有局限，例如知识截断、糟糕的算术能力或无法访问私有数据。这一发展使得LLM能够基于上下文选择和协调多个函数，以解决更复杂的问题。然而，当前的多函数调用方法通常需要为每个函数进行顺序推理和执行，从而导致高延迟、高成本和有时不准确的行为。为了解决这个问题，我们引入了LLM编译器，它在并行执行函数的同时高效地协调多个函数调用。借鉴经典编译器的原理，LLM编译器通过三个组件简化并行函数调用：（i）LLM规划器，制定执行计划；（ii）任务获取单元，分派函数调用任务",
    "tldr": "本研究介绍了一种名为LLMCompiler的编译器，通过并行执行函数来高效地协调多个函数调用，解决了当前多函数调用方法中存在的高延迟、高成本和不准确行为的问题。",
    "en_tdlr": "This research introduces LLMCompiler, a compiler that efficiently orchestrates multiple function calling by executing functions in parallel, addressing the issues of high latency, cost, and inaccurate behavior observed in current methods for multiple function calling."
}