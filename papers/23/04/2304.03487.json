{
    "title": "ParaGraph: Weighted Graph Representation for Performance Optimization of HPC Kernels. (arXiv:2304.03487v1 [cs.DC])",
    "abstract": "GPU-based HPC clusters are attracting more scientific application developers due to their extensive parallelism and energy efficiency. In order to achieve portability among a variety of multi/many core architectures, a popular choice for an application developer is to utilize directive-based parallel programming models, such as OpenMP. However, even with OpenMP, the developer must choose from among many strategies for exploiting a GPU or a CPU. Recently, Machine Learning (ML) approaches have brought significant advances in the optimizations of HPC applications. To this end, several ways have been proposed to represent application characteristics for ML models. However, the available techniques fail to capture features that are crucial for exposing parallelism. In this paper, we introduce a new graph-based program representation for parallel applications that extends the Abstract Syntax Tree to represent control and data flow information. The originality of this work lies in the additio",
    "link": "http://arxiv.org/abs/2304.03487",
    "context": "Title: ParaGraph: Weighted Graph Representation for Performance Optimization of HPC Kernels. (arXiv:2304.03487v1 [cs.DC])\nAbstract: GPU-based HPC clusters are attracting more scientific application developers due to their extensive parallelism and energy efficiency. In order to achieve portability among a variety of multi/many core architectures, a popular choice for an application developer is to utilize directive-based parallel programming models, such as OpenMP. However, even with OpenMP, the developer must choose from among many strategies for exploiting a GPU or a CPU. Recently, Machine Learning (ML) approaches have brought significant advances in the optimizations of HPC applications. To this end, several ways have been proposed to represent application characteristics for ML models. However, the available techniques fail to capture features that are crucial for exposing parallelism. In this paper, we introduce a new graph-based program representation for parallel applications that extends the Abstract Syntax Tree to represent control and data flow information. The originality of this work lies in the additio",
    "path": "papers/23/04/2304.03487.json",
    "total_tokens": 870,
    "translated_title": "ParaGraph: 用于 HPC Kernel 性能优化的加权图表示法",
    "translated_abstract": "基于 GPU 的 HPC 集群因其广泛的并行性和高能效性吸引了越来越多的科学应用程序开发人员。为了在多种多核架构中实现可移植性，一种应用程序开发人员的流行选择是利用基于指令的并行编程模型，例如 OpenMP。然而，即使使用 OpenMP，开发人员也必须从许多策略中选择用于利用 GPU 或 CPU。近年来，机器学习 (ML) 方法在 HPC 应用程序优化方面带来了显著进展。为此，已经提出了几种用于 ML 模型表示应用程序特征的方法。然而，现有技术未能捕获展示并行性至关重要的特征。因此，本文介绍了一种新的基于图形的程序表示法，用于表示控制和数据流信息，扩展了抽象语法树。本文的独创性在于对图中节点加权，传递应用程序特定信息，帮助机器学习算法优化 HPC 内核代码。",
    "tldr": "ParaGraph提出了一种基于加权图的程序表示法，用于优化HPC内核代码，帮助机器学习算法传递应用程序特定信息以帮助提高性能。",
    "en_tdlr": "ParaGraph proposes a weighted graph-based program representation for optimizing HPC kernel code, which helps machine learning algorithms to convey application-specific information to improve performance."
}