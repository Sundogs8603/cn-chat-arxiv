{
    "title": "Revisiting Deep Learning for Variable Type Recovery. (arXiv:2304.03854v1 [cs.LG])",
    "abstract": "Compiled binary executables are often the only available artifact in reverse engineering, malware analysis, and software systems maintenance. Unfortunately, the lack of semantic information like variable types makes comprehending binaries difficult. In efforts to improve the comprehensibility of binaries, researchers have recently used machine learning techniques to predict semantic information contained in the original source code. Chen et al. implemented DIRTY, a Transformer-based Encoder-Decoder architecture capable of augmenting decompiled code with variable names and types by leveraging decompiler output tokens and variable size information. Chen et al. were able to demonstrate a substantial increase in name and type extraction accuracy on Hex-Rays decompiler outputs compared to existing static analysis and AI-based techniques. We extend the original DIRTY results by re-training the DIRTY model on a dataset produced by the open-source Ghidra decompiler. Although Chen et al. conclu",
    "link": "http://arxiv.org/abs/2304.03854",
    "context": "Title: Revisiting Deep Learning for Variable Type Recovery. (arXiv:2304.03854v1 [cs.LG])\nAbstract: Compiled binary executables are often the only available artifact in reverse engineering, malware analysis, and software systems maintenance. Unfortunately, the lack of semantic information like variable types makes comprehending binaries difficult. In efforts to improve the comprehensibility of binaries, researchers have recently used machine learning techniques to predict semantic information contained in the original source code. Chen et al. implemented DIRTY, a Transformer-based Encoder-Decoder architecture capable of augmenting decompiled code with variable names and types by leveraging decompiler output tokens and variable size information. Chen et al. were able to demonstrate a substantial increase in name and type extraction accuracy on Hex-Rays decompiler outputs compared to existing static analysis and AI-based techniques. We extend the original DIRTY results by re-training the DIRTY model on a dataset produced by the open-source Ghidra decompiler. Although Chen et al. conclu",
    "path": "papers/23/04/2304.03854.json",
    "total_tokens": 881,
    "translated_title": "重新探讨深度学习在变量类型恢复中的应用",
    "translated_abstract": "在逆向工程、恶意软件分析和软件系统维护中，已编译的二进制可执行文件往往是唯一可用的工件。然而，缺乏像变量类型这样的语义信息使得理解二进制文件变得困难。为了改进二进制文件的可理解性，近期研究人员使用机器学习技术来预测原始源代码中包含的语义信息。Chen等人实现了DIRTY，一种基于Transformer的编码器-解码器架构，能够利用反编译器输出标记和变量大小信息，增强反编译代码的变量名称和类型。相比现有的静态分析和基于人工智能的技术，Chen等人能够证明DIRTY在Hex-Rays反编译器输出的名称和类型提取准确性上有大幅提升。我们通过在由开源Ghidra反编译器产生的数据集上重新训练DIRTY模型来扩展原始DIRTY结果。尽管Chen等人得出结论，",
    "tldr": "该论文讨论了使用机器学习技术预测反编译代码中变量名称和类型的语义信息，其中提到基于Transformer的编码器-解码器架构DIRTY能够有效地提高名称和类型提取的准确性。",
    "en_tdlr": "This paper discusses the use of machine learning techniques to predict semantic information about variable names and types in decompiled code, with DIRTY, a Transformer-based Encoder-Decoder architecture, being highlighted for its success in improving accuracy of extraction."
}