{
    "title": "\\\"Uberpr\\\"ufung von Integrit\\\"atsbedingungen in Deduktiven Datenbanken. (arXiv:2304.09944v1 [cs.DB])",
    "abstract": "Advancements in computer science and AI lead to the development of larger, more complex knowledge bases. These are susceptible to contradictions, particularly when multiple experts are involved. To ensure integrity during changes, procedures are needed. This work addresses the problem from a logical programming perspective. Integrity violations can be interpreted as special operations on proofs of integrity constraints, with SLDNF proofs being the focus. We define a proof tree as a special data structure and demonstrate the implication of the existence of an SLDNF proof through such a tree. Proof trees are more convenient than SLDNF trees and allow set-oriented considerations of proofs. They also present the proof structure more clearly, enabling further applications. Using this structure, we determine a minimal set of conditions that specify when a change in the knowledge base affects the validity of an integrity constraint. Additionally, this approach allows for the reuse of large pa",
    "link": "http://arxiv.org/abs/2304.09944",
    "context": "Title: \\\"Uberpr\\\"ufung von Integrit\\\"atsbedingungen in Deduktiven Datenbanken. (arXiv:2304.09944v1 [cs.DB])\nAbstract: Advancements in computer science and AI lead to the development of larger, more complex knowledge bases. These are susceptible to contradictions, particularly when multiple experts are involved. To ensure integrity during changes, procedures are needed. This work addresses the problem from a logical programming perspective. Integrity violations can be interpreted as special operations on proofs of integrity constraints, with SLDNF proofs being the focus. We define a proof tree as a special data structure and demonstrate the implication of the existence of an SLDNF proof through such a tree. Proof trees are more convenient than SLDNF trees and allow set-oriented considerations of proofs. They also present the proof structure more clearly, enabling further applications. Using this structure, we determine a minimal set of conditions that specify when a change in the knowledge base affects the validity of an integrity constraint. Additionally, this approach allows for the reuse of large pa",
    "path": "papers/23/04/2304.09944.json",
    "total_tokens": 885,
    "translated_title": "在演绎数据库中验证完整性条件",
    "translated_abstract": "计算机科学和人工智能的进步导致了更大、更复杂的知识库的开发。这些知识库容易出现矛盾，特别是在涉及多个专家时。为了保证变化期间的完整性，需要一些程序。本文从逻辑编程的角度解决了这个问题。完整性违规可被解释为完整性约束证明上的特殊操作，其中SLDNF证明是重点。我们将证明树定义为一种特殊的数据结构，并通过这样一棵树演示存在SLDNF证明的含义。证明树比SLDNF树更方便，并允许对证明进行集合取向的考虑。它们也更清晰地展示了证明结构，从而实现了进一步的应用。使用此结构，我们确定了一个最小的条件集，指定在知识库中的更改影响完整性约束的有效性的情况。此外，这种方法允许重用大型数据集。",
    "tldr": "本文提出了从逻辑编程的角度解决演绎数据库完整性问题的方法，使用证明树代替SLDNF树更方便，可以使用一组最小的条件指定知识库中更改对完整性约束的有效性的影响。",
    "en_tdlr": "This paper proposes a logical programming approach to address the integrity problem in deductive databases, using proof trees instead of SLDNF trees. A minimal set of conditions is defined to specify the effect of changes to the validity of integrity constraints in the knowledge base."
}