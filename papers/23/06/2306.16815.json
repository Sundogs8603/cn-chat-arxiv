{
    "title": "Computing all-vs-all MEMs in grammar-compressed text. (arXiv:2306.16815v1 [cs.IR])",
    "abstract": "We describe a compression-aware method to compute all-vs-all maximal exact matches (MEM) among strings of a repetitive collection $\\mathcal{T}$. The key concept in our work is the construction of a fully-balanced grammar $\\mathcal{G}$ from $\\mathcal{T}$ that meets a property that we call \\emph{fix-free}: the expansions of the nonterminals that have the same height in the parse tree form a fix-free set (i.e., prefix-free and suffix-free). The fix-free property allows us to compute the MEMs of $\\mathcal{T}$ incrementally over $\\mathcal{G}$ using a standard suffix-tree-based MEM algorithm, which runs on a subset of grammar rules at a time and does not decompress nonterminals. By modifying the locally-consistent grammar of Christiansen et al 2020., we show how we can build $\\mathcal{G}$ from $\\mathcal{T}$ in linear time and space. We also demonstrate that our MEM algorithm runs on top of $\\mathcal{G}$ in $O(G +occ)$ time and uses $O(\\log G(G+occ))$ bits, where $G$ is the grammar size, and ",
    "link": "http://arxiv.org/abs/2306.16815",
    "context": "Title: Computing all-vs-all MEMs in grammar-compressed text. (arXiv:2306.16815v1 [cs.IR])\nAbstract: We describe a compression-aware method to compute all-vs-all maximal exact matches (MEM) among strings of a repetitive collection $\\mathcal{T}$. The key concept in our work is the construction of a fully-balanced grammar $\\mathcal{G}$ from $\\mathcal{T}$ that meets a property that we call \\emph{fix-free}: the expansions of the nonterminals that have the same height in the parse tree form a fix-free set (i.e., prefix-free and suffix-free). The fix-free property allows us to compute the MEMs of $\\mathcal{T}$ incrementally over $\\mathcal{G}$ using a standard suffix-tree-based MEM algorithm, which runs on a subset of grammar rules at a time and does not decompress nonterminals. By modifying the locally-consistent grammar of Christiansen et al 2020., we show how we can build $\\mathcal{G}$ from $\\mathcal{T}$ in linear time and space. We also demonstrate that our MEM algorithm runs on top of $\\mathcal{G}$ in $O(G +occ)$ time and uses $O(\\log G(G+occ))$ bits, where $G$ is the grammar size, and ",
    "path": "papers/23/06/2306.16815.json",
    "total_tokens": 1024,
    "translated_title": "在语法压缩文本中计算全对全最大精确匹配（MEM）",
    "translated_abstract": "我们描述了一种压缩感知方法，用于计算重复集合$\\mathcal{T}$中字符串之间的全对全最大精确匹配（MEM）。我们工作的关键概念是从$\\mathcal{T}$构建一个完全平衡的语法$\\mathcal{G}$，满足我们称之为“fix-free”的属性：解析树中具有相同高度的非终结符的扩展形成了一个fix-free集合（即前缀自由和后缀自由）。fix-free属性使我们能够使用标准的基于后缀树的MEM算法在$\\mathcal{G}$上递增地计算$\\mathcal{T}$的MEM，该算法一次在一组语法规则上运行，并且不解压缩非终结符。通过修改Christiansen等人2020年的局部一致性语法，我们展示了如何以线性时间和空间构建$\\mathcal{G}$从$\\mathcal{T}$。我们还证明了我们的MEM算法在$\\mathcal{G}$上以$O(G+occ)$时间运行，并且使用$O(\\log G(G+occ))$位，其中$G$是语法大小，而$occ$是MEM的数量。",
    "tldr": "本论文提出了一种压缩感知方法，在语法压缩文本中计算全对全最大精确匹配（MEM）。通过构建一个完全平衡的语法，满足特定属性，并修改语法规则，我们能够以更高效的方式计算MEMs。我们的方法在时间和空间复杂度上都具有优势。"
}