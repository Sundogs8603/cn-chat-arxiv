{
    "title": "Kriging Convolutional Networks. (arXiv:2306.09463v1 [cs.LG])",
    "abstract": "Spatial interpolation is a class of estimation problems where locations with known values are used to estimate values at other locations, with an emphasis on harnessing spatial locality and trends. Traditional Kriging methods have strong Gaussian assumptions, and as a result, often fail to capture complexities within the data. Inspired by the recent progress of graph neural networks, we introduce Kriging Convolutional Networks (KCN), a method of combining the advantages of Graph Convolutional Networks (GCN) and Kriging. Compared to standard GCNs, KCNs make direct use of neighboring observations when generating predictions. KCNs also contain the Kriging method as a specific configuration. We further improve the model's performance by adding attention. Empirically, we show that this model outperforms GCNs and Kriging in several applications. The implementation of KCN using PyTorch is publicized at the GitHub repository: https://github.com/tufts-ml/kcn-torch.",
    "link": "http://arxiv.org/abs/2306.09463",
    "context": "Title: Kriging Convolutional Networks. (arXiv:2306.09463v1 [cs.LG])\nAbstract: Spatial interpolation is a class of estimation problems where locations with known values are used to estimate values at other locations, with an emphasis on harnessing spatial locality and trends. Traditional Kriging methods have strong Gaussian assumptions, and as a result, often fail to capture complexities within the data. Inspired by the recent progress of graph neural networks, we introduce Kriging Convolutional Networks (KCN), a method of combining the advantages of Graph Convolutional Networks (GCN) and Kriging. Compared to standard GCNs, KCNs make direct use of neighboring observations when generating predictions. KCNs also contain the Kriging method as a specific configuration. We further improve the model's performance by adding attention. Empirically, we show that this model outperforms GCNs and Kriging in several applications. The implementation of KCN using PyTorch is publicized at the GitHub repository: https://github.com/tufts-ml/kcn-torch.",
    "path": "papers/23/06/2306.09463.json",
    "total_tokens": 861,
    "translated_title": "Kriging卷积网络",
    "translated_abstract": "空间插值是一类估计问题，其中已知值的位置用于估计其他位置的值，着重于利用空间局部性和趋势。传统的Kriging方法具有强烈的高斯假设，因此常常无法捕捉数据内部的复杂性。受最近图神经网络进展的启发，我们介绍了Kriging卷积网络（KCN），它将图卷积网络（GCN）和Kriging的优点相结合。与标准GCN相比，KCN在产生预测时直接利用相邻观测值。此外，KCN还将Kriging方法作为特定配置包含在内。我们通过添加注意力来进一步提高模型的性能。通过实验证明，这种模型在几个应用中的性能优于GCN和Kriging。使用PyTorch实现的KCN在GitHub存储库上公开：https://github.com/tufts-ml/kcn-torch。",
    "tldr": "该研究介绍了一种新的Kriging卷积网络方法，结合了Kriging和图卷积网络的优点，并在多个应用中表现出了更好的性能。",
    "en_tdlr": "This study introduces a new method of combining the strengths of Kriging and Graph Convolutional Networks (GCN) into Kriging Convolutional Networks (KCN) that utilize neighboring observations when generating predictions. Empirical results demonstrate that KCNs outperform both GCNs and Kriging in several applications."
}