{
    "title": "Synthesising Recursive Functions for First-Order Model Counting: Challenges, Progress, and Conjectures. (arXiv:2306.04189v1 [cs.LO])",
    "abstract": "First-order model counting (FOMC) is a computational problem that asks to count the models of a sentence in finite-domain first-order logic. In this paper, we argue that the capabilities of FOMC algorithms to date are limited by their inability to express many types of recursive computations. To enable such computations, we relax the restrictions that typically accompany domain recursion and generalise the circuits used to express a solution to an FOMC problem to directed graphs that may contain cycles. To this end, we adapt the most well-established (weighted) FOMC algorithm ForcLift to work with such graphs and introduce new compilation rules that can create cycle-inducing edges that encode recursive function calls. These improvements allow the algorithm to find efficient solutions to counting problems that were previously beyond its reach, including those that cannot be solved efficiently by any other exact FOMC algorithm. We end with a few conjectures on what classes of instances c",
    "link": "http://arxiv.org/abs/2306.04189",
    "context": "Title: Synthesising Recursive Functions for First-Order Model Counting: Challenges, Progress, and Conjectures. (arXiv:2306.04189v1 [cs.LO])\nAbstract: First-order model counting (FOMC) is a computational problem that asks to count the models of a sentence in finite-domain first-order logic. In this paper, we argue that the capabilities of FOMC algorithms to date are limited by their inability to express many types of recursive computations. To enable such computations, we relax the restrictions that typically accompany domain recursion and generalise the circuits used to express a solution to an FOMC problem to directed graphs that may contain cycles. To this end, we adapt the most well-established (weighted) FOMC algorithm ForcLift to work with such graphs and introduce new compilation rules that can create cycle-inducing edges that encode recursive function calls. These improvements allow the algorithm to find efficient solutions to counting problems that were previously beyond its reach, including those that cannot be solved efficiently by any other exact FOMC algorithm. We end with a few conjectures on what classes of instances c",
    "path": "papers/23/06/2306.04189.json",
    "total_tokens": 938,
    "translated_title": "面向一阶模型计数的递归函数合成：挑战、进展和猜想",
    "translated_abstract": "一阶模型计数(FOMC)是一个计算问题，它要求在有限域一阶逻辑中计算出一个句子的模型数量。本文认为，迄今为止，FOMC算法的能力受到了它们表达许多类型递归计算的能力的限制。为了实现这些计算，我们放宽了通常伴随域递归的限制，并将用于表达FOMC问题解的电路通用化为可能包含循环的有向图。为此，我们将最具代表性的FOMC算法ForcLift(加权)适应为能够与这样的图一起使用，并引入了新的编译规则，可以创建编码递归函数调用的循环引导边缘。这些改进使算法能够找到对以前无法到达的计数问题的高效解决方案，包括那些不能被任何其他精确FOMC算法有效解决的问题。最后，我们给出了一些关于哪些情况类递归运算可以支持的猜想。",
    "tldr": "本文提出了一种用于解决一阶模型计数问题的算法，它可以表达许多类型递归计算。改进后的算法可以找到那些之前无法有效解决的计数问题的高效解决方案。",
    "en_tdlr": "This paper proposes an algorithm for solving first-order model counting problems, which can express many types of recursive computations. The improved algorithm can find efficient solutions to counting problems that were previously beyond its reach, including those that cannot be solved efficiently by any other exact FOMC algorithm."
}