{
    "title": "Evaluation of OpenAI Codex for HPC Parallel Programming Models Kernel Generation. (arXiv:2306.15121v1 [cs.AI])",
    "abstract": "We evaluate AI-assisted generative capabilities on fundamental numerical kernels in high-performance computing (HPC), including AXPY, GEMV, GEMM, SpMV, Jacobi Stencil, and CG. We test the generated kernel codes for a variety of language-supported programming models, including (1) C++ (e.g., OpenMP [including offload], OpenACC, Kokkos, SyCL, CUDA, and HIP), (2) Fortran (e.g., OpenMP [including offload] and OpenACC), (3) Python (e.g., numba, Numba, cuPy, and pyCUDA), and (4) Julia (e.g., Threads, CUDA.jl, AMDGPU.jl, and KernelAbstractions.jl). We use the GitHub Copilot capabilities powered by OpenAI Codex available in Visual Studio Code as of April 2023 to generate a vast amount of implementations given simple <kernel> + <programming model> + <optional hints> prompt variants. To quantify and compare the results, we propose a proficiency metric around the initial 10 suggestions given for each prompt. Results suggest that the OpenAI Codex outputs for C++ correlate with the adoption and mat",
    "link": "http://arxiv.org/abs/2306.15121",
    "context": "Title: Evaluation of OpenAI Codex for HPC Parallel Programming Models Kernel Generation. (arXiv:2306.15121v1 [cs.AI])\nAbstract: We evaluate AI-assisted generative capabilities on fundamental numerical kernels in high-performance computing (HPC), including AXPY, GEMV, GEMM, SpMV, Jacobi Stencil, and CG. We test the generated kernel codes for a variety of language-supported programming models, including (1) C++ (e.g., OpenMP [including offload], OpenACC, Kokkos, SyCL, CUDA, and HIP), (2) Fortran (e.g., OpenMP [including offload] and OpenACC), (3) Python (e.g., numba, Numba, cuPy, and pyCUDA), and (4) Julia (e.g., Threads, CUDA.jl, AMDGPU.jl, and KernelAbstractions.jl). We use the GitHub Copilot capabilities powered by OpenAI Codex available in Visual Studio Code as of April 2023 to generate a vast amount of implementations given simple <kernel> + <programming model> + <optional hints> prompt variants. To quantify and compare the results, we propose a proficiency metric around the initial 10 suggestions given for each prompt. Results suggest that the OpenAI Codex outputs for C++ correlate with the adoption and mat",
    "path": "papers/23/06/2306.15121.json",
    "total_tokens": 968,
    "translated_title": "对于HPC并行编程模型内核生成的OpenAI Codex的评估",
    "translated_abstract": "我们评估了在高性能计算（HPC）中基本数值内核（包括AXPY，GEMV，GEMM，SpMV，Jacobi Stencil和CG）上的AI辅助生成能力。我们对多种语言支持的编程模型（包括C++（如OpenMP [包括卸载]，OpenACC，Kokkos，SyCL，CUDA和HIP），Fortran（如OpenMP [包括卸载]和OpenACC），Python（如numba，Numba，cuPy和pyCUDA）和Julia（如Threads，CUDA.jl，AMDGPU.jl和KernelAbstractions.jl））进行了生成内核代码的测试。我们使用了OpenAI Codex在2023年4月之后在Visual Studio Code中提供的GitHub Copilot功能来生成大量的实现，只需给出简单的<kernel> + <programming model> + <optional hints>提示变体。为了定量和比较结果，我们提出了一个以每个提示的初始10个建议为基础的熟练度指标。结果表明，OpenAI Codex对于C++的输出与采纳度和成熟度相关。",
    "tldr": "本论文评估了在高性能计算中使用AI辅助生成能力来生成基本数值内核的效果，并测试了多种编程模型下生成的内核代码。结果表明，OpenAI Codex在C++中的输出与采纳度和成熟度相关。",
    "en_tdlr": "This paper evaluates the effectiveness of using AI-assisted generative capabilities to generate fundamental numerical kernels in high-performance computing (HPC), and tests the generated kernel codes under various programming models. The results indicate that the outputs of OpenAI Codex in C++ correlate with their adoption and maturity."
}