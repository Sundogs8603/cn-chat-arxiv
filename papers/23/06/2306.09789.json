{
    "title": "Dynamic Decision Tree Ensembles for Energy-Efficient Inference on IoT Edge Nodes. (arXiv:2306.09789v1 [cs.LG])",
    "abstract": "With the increasing popularity of Internet of Things (IoT) devices, there is a growing need for energy-efficient Machine Learning (ML) models that can run on constrained edge nodes. Decision tree ensembles, such as Random Forests (RFs) and Gradient Boosting (GBTs), are particularly suited for this task, given their relatively low complexity compared to other alternatives. However, their inference time and energy costs are still significant for edge hardware. Given that said costs grow linearly with the ensemble size, this paper proposes the use of dynamic ensembles, that adjust the number of executed trees based both on a latency/energy target and on the complexity of the processed input, to trade-off computational cost and accuracy. We focus on deploying these algorithms on multi-core low-power IoT devices, designing a tool that automatically converts a Python ensemble into optimized C code, and exploring several optimizations that account for the available parallelism and memory hier",
    "link": "http://arxiv.org/abs/2306.09789",
    "context": "Title: Dynamic Decision Tree Ensembles for Energy-Efficient Inference on IoT Edge Nodes. (arXiv:2306.09789v1 [cs.LG])\nAbstract: With the increasing popularity of Internet of Things (IoT) devices, there is a growing need for energy-efficient Machine Learning (ML) models that can run on constrained edge nodes. Decision tree ensembles, such as Random Forests (RFs) and Gradient Boosting (GBTs), are particularly suited for this task, given their relatively low complexity compared to other alternatives. However, their inference time and energy costs are still significant for edge hardware. Given that said costs grow linearly with the ensemble size, this paper proposes the use of dynamic ensembles, that adjust the number of executed trees based both on a latency/energy target and on the complexity of the processed input, to trade-off computational cost and accuracy. We focus on deploying these algorithms on multi-core low-power IoT devices, designing a tool that automatically converts a Python ensemble into optimized C code, and exploring several optimizations that account for the available parallelism and memory hier",
    "path": "papers/23/06/2306.09789.json",
    "total_tokens": 905,
    "translated_title": "IoT边缘节点上的能源高效推理的动态决策树集成",
    "translated_abstract": "随着物联网(IoT)设备的普及，需要能够在受限制的边缘节点上运行的能源高效机器学习(ML)模型。决策树集成，如随机森林(RFs)和梯度提升(GBTs)，在这个任务中特别适合，因为它们相对于其他选择具有较低的复杂性。然而，它们的推理时间和能量成本对于边缘硬件仍然很大。鉴于这种成本随着合奏规模的线性增长，本文提出使用动态合奏，根据延迟/能量目标和处理的输入的复杂性调整执行树的数量，以权衡计算成本和精度。我们专注于在多核低功耗IoT设备上部署这些算法，设计了一种工具，可将Python合奏自动转换为优化的C代码，并探索了几种优化策略，考虑了这些设备中可用的并行性和存储结构。",
    "tldr": "本文提出了一种在IoT边缘节点上非常适用的动态决策树集成算法，该算法可以自动调整执行树的数量，以权衡计算成本和精度，从而提高能源效率。"
}