{
    "title": "Is AI the better programming partner? Human-Human Pair Programming vs. Human-AI pAIr Programming. (arXiv:2306.05153v1 [cs.HC])",
    "abstract": "The emergence of large-language models (LLMs) that excel at code generation and commercial products such as GitHub's Copilot has sparked interest in human-AI pair programming (referred to as \"pAIr programming\") where an AI system collaborates with a human programmer. While traditional pair programming between humans has been extensively studied, it remains uncertain whether its findings can be applied to human-AI pair programming. We compare human-human and human-AI pair programming, exploring their similarities and differences in interaction, measures, benefits, and challenges. We find that the effectiveness of both approaches is mixed in the literature (though the measures used for pAIr programming are not as comprehensive). We summarize moderating factors on the success of human-human pair programming, which provides opportunities for pAIr programming research. For example, mismatched expertise makes pair programming less productive, therefore well-designed AI programming assistants",
    "link": "http://arxiv.org/abs/2306.05153",
    "context": "Title: Is AI the better programming partner? Human-Human Pair Programming vs. Human-AI pAIr Programming. (arXiv:2306.05153v1 [cs.HC])\nAbstract: The emergence of large-language models (LLMs) that excel at code generation and commercial products such as GitHub's Copilot has sparked interest in human-AI pair programming (referred to as \"pAIr programming\") where an AI system collaborates with a human programmer. While traditional pair programming between humans has been extensively studied, it remains uncertain whether its findings can be applied to human-AI pair programming. We compare human-human and human-AI pair programming, exploring their similarities and differences in interaction, measures, benefits, and challenges. We find that the effectiveness of both approaches is mixed in the literature (though the measures used for pAIr programming are not as comprehensive). We summarize moderating factors on the success of human-human pair programming, which provides opportunities for pAIr programming research. For example, mismatched expertise makes pair programming less productive, therefore well-designed AI programming assistants",
    "path": "papers/23/06/2306.05153.json",
    "total_tokens": 872,
    "translated_title": "人工智能是否是更好的编程伙伴？人人对编程 vs 人工智能对编程",
    "translated_abstract": "随着掌握代码生成能力的大型语言模型(LLMs)的出现以及商业产品，如GitHub的Copilot，人工智能与人类程序员的合作(pAIr编程)引起了人们的兴趣。虽然传统的人人对编程已经被广泛研究，但仍然不确定其研究结果是否能适用于人工智能对编程。我们比较了人人对编程和人工智能对编程，探讨了它们在交互、衡量、优点和挑战方面的相似之处和差异之处。我们发现，两种方法的有效性在文献中各不相同（尽管用于pAIr编程的度量不太全面）。我们总结了影响人人对编程成功的调节因素，为pAIr编程研究提供了机会。例如，不匹配的专业知识会使对编程缺乏生产力，因此设计良好的AI编程助手可以潜在地解决这个问题。",
    "tldr": "人工智能与人类程序员共同开发可以通过设计良好的AI编程助手，增强双方合作的生产力。",
    "en_tdlr": "Collaborating with AI in programming can improve productivity when well-designed AI programming assistants are used to address issues such as mismatched expertise between human and AI partners."
}