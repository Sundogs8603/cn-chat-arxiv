{
    "title": "Learning the Relation between Code Features and Code Transforms with Structured Prediction. (arXiv:1907.09282v2 [cs.SE] UPDATED)",
    "abstract": "To effectively guide the exploration of the code transform space for automated code evolution techniques, we present in this paper the first approach for structurally predicting code transforms at the level of AST nodes using conditional random fields (CRFs). Our approach first learns offline a probabilistic model that captures how certain code transforms are applied to certain AST nodes, and then uses the learned model to predict transforms for arbitrary new, unseen code snippets. {Our approach involves a novel representation of both programs and code transforms. Specifically, we introduce the formal framework for defining the so-called AST-level code transforms and we demonstrate how the CRF model can be accordingly designed, learned, and used for prediction}. We instantiate our approach in the context of repair transform prediction for Java programs. Our instantiation contains a set of carefully designed code features, deals with the training data imbalance issue, and comprises tran",
    "link": "http://arxiv.org/abs/1907.09282",
    "context": "Title: Learning the Relation between Code Features and Code Transforms with Structured Prediction. (arXiv:1907.09282v2 [cs.SE] UPDATED)\nAbstract: To effectively guide the exploration of the code transform space for automated code evolution techniques, we present in this paper the first approach for structurally predicting code transforms at the level of AST nodes using conditional random fields (CRFs). Our approach first learns offline a probabilistic model that captures how certain code transforms are applied to certain AST nodes, and then uses the learned model to predict transforms for arbitrary new, unseen code snippets. {Our approach involves a novel representation of both programs and code transforms. Specifically, we introduce the formal framework for defining the so-called AST-level code transforms and we demonstrate how the CRF model can be accordingly designed, learned, and used for prediction}. We instantiate our approach in the context of repair transform prediction for Java programs. Our instantiation contains a set of carefully designed code features, deals with the training data imbalance issue, and comprises tran",
    "path": "papers/19/07/1907.09282.json",
    "total_tokens": 953,
    "translated_title": "用结构化预测算法学习代码特征与代码转换之间的关系",
    "translated_abstract": "本文提出了一种利用条件随机场（CRFs）在AST节点级别预测代码转换的方法，以有效地指导自动代码演变技术中代码转换空间的探索。我们的方法首先离线学习概率模型，捕捉特定代码转换应用于特定AST节点的方式，然后利用学习的模型为任意新的、看不见的代码片段预测转换。我们在Java程序的修复转换预测的上下文中实例化了方法，包括一组精心设计的代码特征，解决了训练数据不平衡问题，并涵盖不同语法表示之间的翻译，以便跨代码应用修复转换。实验结果表明，我们的方法优于基于启发式规则或机器学习的以往工作，并且有效地、高效地发现了一组多样化的新的和有用的修复转换。",
    "tldr": "本文提出了一种用条件随机场在AST节点级别预测代码转换的方法，它在Java程序的修复转换预测的上下文中实例化，并成功解决了训练数据不平衡问题，发现了一组多样化的新的和有用的修复转换。",
    "en_tdlr": "This paper proposes an approach to predict code transforms at the level of AST nodes using conditional random fields (CRFs) to guide the exploration of automated code evolution techniques. The approach is instantiated in the context of repair transform prediction for Java programs, and successfully discovers a diverse set of novel and useful repair transforms, while outperforming previous work based on heuristic rules or machine learning."
}